{"version":3,"file":"mind-wired.js","sources":["../src/mindwired-event.ts","../src/service/event-bus.ts","../src/service/dnd.ts","../src/service/geom.ts","../src/components/dnd/viewport-dnd.ts","../src/components/dnd/node-dnd.ts","../src/components/dnd/change-parent-node.ts","../src/assets/icon-chng-parent.svg","../src/assets/icon-folded.svg","../src/components/canvas-ui.ts","../src/components/edge/edge-renderer-type.ts","../src/components/edge/line-edge-renderer.ts","../src/components/edge/natural-curve-renderer.ts","../src/components/edge/mustache-lr-renderer.ts","../src/components/edge/mustache-tb-renderer.ts","../src/components/edge/edge-context.ts","../src/components/edge/edge-style.ts","../src/service/clone.ts","../src/components/node/node-type.ts","../src/components/node/node-ui.ts","../src/components/layout/node/default-layout.ts","../src/components/layout/node/axis-x-layout.ts","../src/components/layout/node/axis-y-layout.ts","../src/components/layout/node/axis-xy-layout.ts","../src/components/layout/node-layout-context.ts","../src/components/node/editor/editor-delegate.ts","../src/components/node/editor/icon-badge-editor.ts","../src/components/node/editor/link-editor.ts","../src/components/node/editor/plain-text-editor.ts","../src/components/node/editor/thumbnail-editor.ts","../src/components/node/node-editing-context.ts","../src/components/alignment/snap/composite-snap-resolver.ts","../src/components/alignment/snap/default-snap-resolver.ts","../src/components/alignment/snap/distance-snap-resolver.ts","../src/components/alignment/alignment-context.ts","../src/components/datasource/tree-ds.ts","../src/components/direction.ts","../src/components/drag-context.ts","../src/service/uuid.ts","../src/components/node/renderer/renderer-delegate.ts","../src/components/node/renderer/plain-text-renderer.ts","../src/components/node/renderer/icon-badge-renderer.ts","../src/components/node/renderer/thumbnail-renderer.ts","../src/components/node/renderer/link-renderer.ts","../src/components/node/node-rendering-context.ts","../src/components/selection/node-selection-model.ts","../src/components/datasource/index.ts","../src/service/store/mind-wired-store.ts","../node_modules/svelte/src/runtime/internal/utils.js","../node_modules/svelte/src/runtime/store/index.js","../src/components/node/schema-context.ts","../src/components/export/export-context.ts","../src/components/mind-wired.ts","../src/components/config.ts","../src/service/dom.ts","../src/index.ts"],"sourcesContent":["import type { NodeUI, SchemaSpec } from \"./components/node\";\nimport type { Point } from \"./service/geom\";\n\nexport type MindWiredEvent<T> = {\n  name: string;\n  desc: string;\n  CLIENT?: MindWiredEvent<T>;\n};\n\nexport type ViewportDragEventArg = {\n  state: \"drag\" | \"done\";\n  offset: Point;\n};\nexport type ViewportDragEvent<T> = MindWiredEvent<T>;\n/**\n * drag state of node\n */\nexport type NodeDragEventArg = {\n  /**\n   * unique node id\n   */\n  nodeId: string;\n  /**\n   * drag state\n   *\n   * * ready - before dragging(mouse pressed)\n   * * drag - dragging state(mouse moving while pressed )\n   * * done - dragging finished(mouse released)\n   */\n  state: \"ready\" | \"drag\" | \"done\";\n  /**\n   *\n   * * children - all descendant nodes are affected except the dragged one\n   * * all - all descendant nodes are affected including the dragged one\n   */\n  target: \"children\" | \"all\";\n  /**\n   * current node x-position relative to center of viewport\n   */\n  x: number;\n  /**\n   * current node y-position relative to center of viewport\n   */\n  y: number;\n};\nexport type NodeDragEvent<T> = MindWiredEvent<T>;\n\nexport type DragBranch = {\n  VIEWPORT: ViewportDragEvent<ViewportDragEventArg>;\n  NODE: NodeDragEvent<NodeDragEventArg>;\n};\n\nexport type NodeEventArg = {\n  /**\n   * affected nodes\n   */\n  nodes: NodeUI[];\n  type:\n    | \"select\"\n    | \"click\"\n    | \"create\"\n    | \"update\"\n    | \"delete\"\n    | \"path\"\n    | \"pos\"\n    | \"model\"\n    | \"schema\"\n    | \"folding\";\n};\nexport type NodeSelectArg = {\n  nodes: NodeUI[];\n  append: boolean;\n  type: \"select\";\n};\nexport type NodeEditingArg = {\n  node: NodeUI;\n  editing: boolean;\n};\nexport type NodeFoldingArg = {\n  node: NodeUI;\n  folded: boolean;\n};\nexport type NodeMoveArg = {\n  node: NodeUI;\n  prevParent: NodeUI;\n};\n/**\n * deleted nodes and affected nodes\n *\n * @prop nodes - deleted nodes\n * @prop updated - updated nodes(children of deleted ones)\n */\nexport type NodeDeletionArg = {\n  /**\n   * deleted nodes\n   */\n  nodes: NodeUI[];\n  /**\n   * affected nodes by deletion(for example, children)\n   */\n  updated: NodeUI[];\n  type: \"delete\";\n};\nexport type NodeEvent<T> = MindWiredEvent<T> & {\n  CLIENT: MindWiredEvent<T>;\n};\nexport type NodeBranch = {\n  /**\n   * one more more nodes selected\n   */\n  SELECTED: NodeEvent<NodeSelectArg>;\n  /**\n   * a node created\n   */\n  CREATED: NodeEvent<NodeEventArg>;\n  /**\n   * node(s) deleted. It is redirected to `EVENT.NODE.DELETED2`\n   * @deprecated use `EVENT.NODE.DELETED2`\n   */\n  DELETED: NodeEvent<NodeEventArg>;\n  /**\n   * node(s) deleted\n   */\n  DELETED2: NodeEvent<NodeDeletionArg>;\n  /**\n   * node(s) updated\n   */\n  UPDATED: NodeEvent<NodeEventArg>;\n  /**\n   * a node clicked\n   */\n  CLICKED: NodeEvent<NodeEventArg>;\n  /**\n   * editing state of a node\n   */\n  EDITING: NodeEvent<NodeEditingArg>;\n  /**\n   * folding state of a node\n   * @deprecated use `EVENT.NODE.UPDATED`\n   */\n  FOLDED: NodeEvent<NodeFoldingArg>;\n  /**\n   * node's parent changed\n   *\n   * @internal used for internal. use `EVENT.NODE.UPDATED` instead\n   */\n  MOVED: NodeEvent<NodeMoveArg>;\n};\n\nexport type ViewportEventArg = {\n  type: \"click\" | \"resize\";\n};\nexport type ViewportEvent<T> = MindWiredEvent<T>;\nexport type ViewportBranch = {\n  RESIZED: ViewportEvent<ViewportEventArg>;\n  CLICKED: ViewportEvent<ViewportEventArg>;\n};\n\nexport type SchemaEventArg = {\n  type: \"update\" | \"create\" | \"delete\";\n  schemas: SchemaSpec[];\n};\nexport type SchemaBranch = {\n  CREATED: NodeEvent<SchemaEventArg>;\n  UPDATED: NodeEvent<SchemaEventArg>;\n  DELETED: NodeEvent<SchemaEventArg>;\n};\nexport type EventRoot = {\n  DRAG: DragBranch;\n  // SELECTION: SelectionBranch;\n  NODE: NodeBranch;\n  VIEWPORT: ViewportBranch;\n  SCHEMA: SchemaBranch;\n};\n\nexport const EVENT: EventRoot = {\n  DRAG: {\n    VIEWPORT: { name: \"viewport.dragged\", desc: \"\" },\n    NODE: { name: \"node.dragged\", desc: \"\" },\n  },\n  NODE: {\n    CREATED: {\n      name: \"node.created\",\n      desc: \"new node created\",\n      CLIENT: {\n        name: \"node.created.client\",\n        desc: \"client-side node creation event\",\n      },\n    },\n    DELETED: {\n      name: \"node.deleted_old\",\n      desc: \"node has been deleted\",\n      CLIENT: {\n        name: \"node.deleted_old.client\",\n        desc: \"client-side node deletion event\",\n      },\n    },\n    DELETED2: {\n      name: \"node.deleted\",\n      desc: \"node has been deleted\",\n      CLIENT: {\n        name: \"node.deleted.client\",\n        desc: \"client-side node deletion event\",\n      },\n    },\n    UPDATED: {\n      name: \"node.updated\",\n      desc: \"content of node updated\",\n      CLIENT: {\n        name: \"node.updated.client\",\n        desc: \"client-side node update event\",\n      },\n    },\n    SELECTED: {\n      name: \"node.selected\",\n      desc: \"one or more nodes selected\",\n      CLIENT: {\n        name: \"node.selected.client\",\n        desc: \"client-side node selection event\",\n      },\n    },\n    CLICKED: {\n      name: \"node.clicked\",\n      desc: \"a node clicked(without dragging)\",\n      CLIENT: {\n        name: \"node.clicked.client\",\n        desc: \"client-side node click event\",\n      },\n    },\n    EDITING: {\n      name: \"node.editing\",\n      desc: \"node's editing state\",\n      CLIENT: {\n        name: \"node.editing.client\",\n        desc: \"client-side node editing state\",\n      },\n    },\n    FOLDED: {\n      name: \"node.folded\",\n      desc: \"node is folded or unfolded\",\n      CLIENT: {\n        name: \"node.folded.client\",\n        desc: \"client-side node editing state\",\n      },\n    },\n    MOVED: {\n      name: \"node.moved\",\n      desc: \"node is folded or unfolded\",\n      CLIENT: {\n        name: \"node.moved.client\",\n        desc: \"client-side node editing state\",\n      },\n    },\n  },\n  VIEWPORT: {\n    RESIZED: {\n      name: \"viewport.resized\",\n      desc: \"viewport size chaged\",\n    },\n    CLICKED: {\n      name: \"viewport.clicked\",\n      desc: \"viewport has been clicked\",\n    },\n  },\n  SCHEMA: {\n    CREATED: {\n      name: \"schema.created\",\n      desc: \"\",\n      CLIENT: { name: \"schema.created.client\", desc: \"\" },\n    },\n    UPDATED: {\n      name: \"schema.updated\",\n      desc: \"\",\n      CLIENT: { name: \"schema.updated.client\", desc: \"\" },\n    },\n    DELETED: {\n      name: \"schema.deleted\",\n      desc: \"\",\n      CLIENT: { name: \"schema.deleted.client\", desc: \"\" },\n    },\n  },\n};\n\nconst eventList = EVENT;\nexport { eventList };\n","import { EVENT, MindWiredEvent } from \"../mindwired-event\";\n\nconst parseEvent = <T extends MindWiredEvent<any>>(eventName: string): T => {\n  const pathes = eventName.toUpperCase().split(\".\");\n  let obj: any = EVENT;\n  for (let i = 0; i < pathes.length; i++) {\n    obj = obj[pathes[i]];\n    if (!obj) {\n      throw new Error(`invalid event name: [${eventName}]`);\n    }\n  }\n  if (obj.name !== eventName) {\n    throw new Error(`event name mismatch: [${eventName}]`);\n  }\n  return obj as T;\n};\nclass EventBus {\n  private callbacks: Map<string, Function[]>;\n  constructor() {\n    this.callbacks = new Map();\n  }\n  on<A = any>(event: MindWiredEvent<A>, callback: (arg: A) => void) {\n    let callbackList = this.callbacks.get(event.name);\n    if (!callbackList) {\n      callbackList = [];\n      this.callbacks.set(event.name, callbackList);\n    }\n    callbackList.push(callback);\n  }\n  off(eventObj: string, callback: Function) {\n    const callbackList = this.callbacks.get(eventObj);\n    if (!callbackList) {\n      return;\n    }\n    const idx = callbackList.findIndex((cb) => cb === callback);\n    callbackList.splice(idx, 1);\n  }\n  /**\n   * used to register client-side callback\n   * @param {MindWiredEvent} eventName like \"valid.event.path\" format\n   * @param {function} callback\n   */\n  listen<A = any>(event: MindWiredEvent<A>, callback: (arg: A) => void) {\n    // const event = parseEvent(eventName.name);\n    this.on(event, callback);\n  }\n  emit<A = any>(event: MindWiredEvent<A>, payload: A) {\n    const callbackList = this.callbacks.get(event.name) || [];\n    callbackList.forEach((cb) => {\n      try {\n        cb(payload);\n      } catch (e) {\n        console.log(e);\n      }\n    });\n    // if (emitForClient) {\n    //   self.setTimeout(() => {\n    //     this.emit(event[\"CLIENT\"], payload, false);\n    //   });\n    // }\n  }\n}\n\nexport { EventBus, EVENT, parseEvent };\n","/**\n * dummy dnd handlers\n */\nconst beforeDrag = () => {};\nconst dragging = beforeDrag;\nconst afterDrag = beforeDrag;\n\ninterface MutableEvent extends TouchEvent, MouseEvent {\n  clientX: number;\n  clientY: number;\n  layerX: number;\n  layerY: number;\n  offsetX: number;\n  offsetY: number;\n  pageX: number;\n  pageY: number;\n  screenX: number;\n  screenY: number;\n}\n\nexport type DndEvent = {\n  originalEvent: MutableEvent;\n  sx: number;\n  sy: number;\n  dx: number;\n  dy: number;\n  ghost: HTMLElement | undefined;\n  once: Function | undefined;\n};\n\nexport type DndHelper = {\n  accept: (el: EventTarget | null) => boolean;\n  beforeDrag: (e: DndEvent) => void;\n  dragging: (e: DndEvent) => void;\n  afterDrag: (e: DndEvent) => void;\n};\nconst convToMouseEvent = (te: MutableEvent) => {\n  let touch = te.touches[0];\n  if (te.type === \"touchend\") {\n    touch = te.changedTouches[0];\n  }\n  te.clientX = touch.clientX;\n  te.clientY = touch.clientY;\n  te.layerX = 0;\n  te.layerY = 0;\n  te.offsetX = 0;\n  te.offsetY = 0;\n  te.pageX = touch.pageX;\n  te.pageY = touch.pageY;\n  te.screenX = touch.screenX;\n  te.screenY = touch.screenY;\n};\nconst clearTouchTimer = (ctx: DndContext) => {\n  clearTimeout(ctx.touchTimer);\n  ctx.touchTimer = undefined;\n};\nconst mousedown = (ctx: DndContext, e: MouseEvent) => {\n  const { handler } = ctx;\n  if (!handler.accept(e.target)) {\n    return;\n  }\n  ctx.dragging = {\n    originalEvent: e as MutableEvent,\n    sx: e.pageX,\n    sy: e.pageY,\n    dx: 0,\n    dy: 0,\n    ghost: undefined,\n    once: undefined,\n  };\n  handler.beforeDrag(ctx.dragging);\n};\n\nconst mousemove = (ctx: DndContext, e: MutableEvent) => {\n  if (ctx.dragging) {\n    e.preventDefault();\n    if (ctx.dragging.once) {\n      ctx.dragging.once();\n      ctx.dragging.once = undefined;\n    }\n    ctx.originalEvent = e;\n    ctx.dragging.dx = e.pageX - ctx.dragging.sx;\n    ctx.dragging.dy = e.pageY - ctx.dragging.sy;\n    ctx.handler.dragging(ctx.dragging);\n  }\n};\nconst mouseup = (ctx: DndContext, e: MouseEvent) => {\n  ctx.originalEvent = e;\n  const body = document.querySelector(\"body\");\n  if (body) {\n    body.style.cursor = \"\";\n  }\n  try {\n    // ghost.clear();\n    if (ctx.dragging) {\n      // console.log('[M-UP]', e.target)\n      ctx.handler.afterDrag(ctx.dragging);\n    }\n  } catch (e) {\n    console.log(\"[DND error]\", e);\n  } finally {\n    ctx.data.clear();\n    ctx.dragging = undefined;\n  }\n};\nconst touchstart = (ctx: DndContext, e: TouchEvent) => {\n  ctx.touchTimer = window.setTimeout(() => {\n    convToMouseEvent(e as MutableEvent);\n    mousedown(ctx, e as MutableEvent);\n  }, 10);\n};\nconst touchmove = (ctx: DndContext, e: TouchEvent) => {\n  clearTouchTimer(ctx);\n  convToMouseEvent(e as MutableEvent);\n  mousemove(ctx, e as MutableEvent);\n};\nconst touchend = (ctx: DndContext, e: TouchEvent) => {\n  clearTouchTimer(ctx);\n  convToMouseEvent(e as MutableEvent);\n  mouseup(ctx, e as MutableEvent);\n};\n\nconst install = (ctx: DndContext) => {\n  const { handler } = ctx;\n  handler.beforeDrag = handler.beforeDrag || beforeDrag;\n  handler.dragging = handler.dragging || dragging;\n  handler.afterDrag = handler.afterDrag || afterDrag;\n\n  window.addEventListener(\"mousedown\", (e) => mousedown(ctx, e), false);\n  window.addEventListener(\n    \"mousemove\",\n    (e) => mousemove(ctx, e as MutableEvent),\n    {\n      passive: false,\n    }\n  );\n  window.addEventListener(\"mouseup\", (e) => mouseup(ctx, e), false);\n  window.addEventListener(\"touchstart\", (e) => touchstart(ctx, e), false);\n  window.addEventListener(\"touchmove\", (e) => touchmove(ctx, e), {\n    passive: false,\n  });\n  window.addEventListener(\n    \"toucend\",\n    (e) => touchend(ctx, e as MutableEvent),\n    false\n  );\n};\nclass DndContext {\n  touchTimer: number | undefined;\n  dragging: DndEvent | undefined;\n  handler: DndHelper;\n  data: Map<string, any>;\n  originalEvent: Event | undefined | null;\n  constructor(handler: DndHelper) {\n    this.touchTimer = undefined;\n    this.handler = handler;\n    this.data = new Map();\n    install(this);\n  }\n  capture(name: string, value: any): void {\n    this.data.set(name, value);\n  }\n  getData(name: string): any {\n    return this.data.get(name);\n  }\n}\n\nexport { DndContext };\n","/**\n * degrees per 1 radian := 57.29577...\n */\nconst DEGREE_PER_RADIAN = 180 / Math.PI;\n\nexport type RotationParam = { scale: number };\n/**\n * class Point(x, y) means screen-based coord, not mathmatical coord\n *\n */\nexport class Point {\n  x: number;\n  y: number;\n  static readonly ZERO = new Point(0, 0);\n  constructor(x: number = 0, y: number = 0) {\n    this.x = x;\n    this.y = y;\n  }\n  clone() {\n    return new Point(this.x, this.y);\n  }\n  sum(other: Point) {\n    return new Point(this.x + other.x, this.y + other.y);\n  }\n}\nexport class Heading {\n  /**\n   * [-180, +180] degrees from positive X axis\n   */\n  private _degree: number;\n  constructor(readonly target: Point, readonly base: Point = Point.ZERO) {\n    const dx = this.target.x - base.x;\n    const dy = this.target.y - base.y;\n    this._degree = Math.atan2(dy === 0 ? 0 : -dy, dx) * DEGREE_PER_RADIAN;\n  }\n  /**\n   * counter clock wise from X-AXIS(east), which is quadrant(1 > 2 > 3 > 4)\n   * @returns [0, 360) degree\n   */\n  get ccwx() {\n    const deg = this._degree;\n    return deg < 0 ? 360 + deg : deg;\n  }\n  /**\n   * clock wise from Y-AXIS(north), which is quadrant(1 > 4 > 3 > 2)\n   * @returns [0, 360) degree\n   */\n  get cwy() {\n    let deg = 90 - this._degree;\n    return deg < 0 ? 360 + deg : deg;\n  }\n  /**\n   * get quadrant number in math\n   * ```\n   *   2 | 1\n   *  ---+---> X\n   *   3 | 4\n   * ```\n   * @returns 1 when [0, 90), 2 when [90, 180), 3 when [180, 270), 4 when [270, 360)\n   */\n  get quadrant() {\n    const deg = this.ccwx;\n    if (deg < 90) {\n      return 1;\n    } else if (deg < 180) {\n      return 2;\n    } else if (deg < 270) {\n      return 3;\n    } else if (deg < 360) {\n      return 4;\n    } else {\n      throw new Error(`unexpected ccwx: ${deg}`);\n    }\n  }\n}\nexport class Geometry {\n  /**\n   * move dst to dst'\n   * ```\n   *\n   *   |\n   *   |             + dst'\n   *   |\n   *   |                + dst\n   *   |  by deg\n   *   +-------------------------->\n   *  base\n   *```\n   * @param {Point} base\n   * @param {Point} dst\n   * @param {number} degree - [0~360]\n   */\n  rotate = (\n    base: Point,\n    dst: Point,\n    degree: number,\n    param: RotationParam = { scale: 1 }\n  ) => {\n    const dx = (dst.x - base.x) * param.scale;\n    const dy = (dst.y - base.y) * param.scale;\n    const rad = (degree * Math.PI) / 180;\n    const cos = Math.cos(rad);\n    const sin = Math.sin(rad);\n\n    return {\n      x: dx * cos - dy * sin + base.x,\n      y: dx * sin + dy * cos + base.y,\n    };\n  };\n  heading(p: Point, base?: Point) {\n    return new Heading(p, base);\n  }\n}\n\nexport const geom = new Geometry();\n","import { DndEvent } from \"../../service/dnd\";\nimport { EVENT } from \"../../service/event-bus\";\nimport { Point } from \"../../service/geom\";\nimport type { CanvasUI } from \"../canvas-ui\";\n/**\n * handles viewport dragging\n */\n\nexport const viewportDndHandler = (canvasUI: CanvasUI) => ({\n  beforeDrag: (e: DndEvent) => {\n    canvasUI.dndContext.capture(\"offset\", canvasUI.config.getOffset());\n  },\n  dragging: (e: DndEvent) => {\n    const { dx, dy } = e;\n    if (dx === 0 && dy === 0) {\n      return;\n    }\n    canvasUI.dndContext.capture(\"dragged\", true);\n    const offset = canvasUI.dndContext.getData(\"offset\");\n    canvasUI.config.emit(EVENT.DRAG.VIEWPORT, {\n      state: \"drag\",\n      offset: new Point(offset.x + dx, offset.y + dy),\n    });\n  },\n  afterDrag: (e: DndEvent) => {\n    // console.log(\"[DND AFTER]\", e);\n    const { dx, dy } = e;\n    if (dx !== 0 || dy !== 0) {\n      const offset = canvasUI.dndContext.getData(\"offset\");\n      canvasUI.config.emit(EVENT.DRAG.VIEWPORT, {\n        state: \"done\",\n        offset: new Point(offset.x + dx, offset.y + dy),\n      });\n    }\n\n    const dragged = canvasUI.dndContext.getData(\"dragged\");\n    if (!dragged) {\n      canvasUI.config.emit(EVENT.VIEWPORT.CLICKED);\n    }\n  },\n});\n","import type { NodeDragEventArg } from \"../../mindwired-event\";\nimport { EVENT } from \"../../service/event-bus\";\nimport type { CanvasUI } from \"../canvas-ui\";\n\nconst nodeDndHandler = (canvasUI: CanvasUI) => ({\n  beforeDrag: (e) => {\n    const { target } = e.originalEvent;\n    const nodeEl = canvasUI.dom.closest(target, \".mwd-node\") as HTMLElement;\n    const nodeId = nodeEl.dataset.uid;\n    canvasUI.dndContext.capture(\"nodeId\", nodeId);\n    const mrd = canvasUI.config.mindWired();\n    const node = mrd.findNode((node) => node.uid === nodeId);\n    canvasUI.config.emit(EVENT.NODE.SELECTED, {\n      nodes: [node],\n      append: e.originalEvent.shiftKey,\n      type: \"select\",\n    });\n    canvasUI.config.emit<NodeDragEventArg>(EVENT.DRAG.NODE, {\n      nodeId,\n      state: \"ready\",\n      target: e.originalEvent.shiftKey ? \"children\" : \"all\",\n      x: 0,\n      y: 0,\n    });\n  },\n  dragging: (e) => {\n    const { dx, dy } = e;\n    const nodeId = canvasUI.dndContext.getData(\"nodeId\");\n    const { scale } = canvasUI.config;\n    // const scale = 1;\n    canvasUI.config.emit<NodeDragEventArg>(EVENT.DRAG.NODE, {\n      nodeId,\n      state: \"drag\",\n      target: e.originalEvent.shiftKey ? \"children\" : \"all\",\n      x: dx / scale,\n      y: dy / scale,\n    });\n  },\n  afterDrag: (e) => {\n    // console.log(\"[DND AFTER]\", e);\n    const { dx, dy } = e;\n    // canvasUI.shiftBy(dx, dy);\n    const nodeId = canvasUI.dndContext.getData(\"nodeId\");\n    const { scale } = canvasUI.config;\n    // const scale = 1;\n    canvasUI.config.emit<NodeDragEventArg>(EVENT.DRAG.NODE, {\n      nodeId,\n      state: \"done\",\n      target: e.originalEvent.shiftKey ? \"children\" : \"all\",\n      x: dx / scale,\n      y: dy / scale,\n    });\n  },\n});\n\nexport default nodeDndHandler;\n","import type { CanvasUI } from \"../canvas-ui\";\n\nconst changeParentDndHandler = (canvasUI: CanvasUI) => ({\n  beforeDrag: () => {},\n  dragging: (e) => {\n    const { dx, dy } = e;\n    const iconEl = canvasUI.dndContext.getData(\"iconEl\");\n    canvasUI.dom.css(iconEl, {\n      transform: `translate(calc(-50% + ${dx}px), ${dy}px)`,\n    });\n  },\n  afterDrag: () => {\n    const { dom } = canvasUI;\n    const iconEl = canvasUI.dndContext.getData(\"iconEl\");\n    const rect = dom.domRect(iconEl);\n    const cx = rect.x + rect.width / 2;\n    const cy = rect.y + rect.height / 2;\n    dom.css(iconEl, {\n      transform: `translate(-50%, 0)`,\n    });\n    const newParentNode = canvasUI.findNodeAt(cx, cy);\n    if (newParentNode) {\n      const mrd = canvasUI.config.mindWired();\n      const nodes = mrd.getSelectedNodes();\n      if (\n        nodes.filter((child) => newParentNode.isDescendantOf(child)).length > 0\n      ) {\n        // dropping parent on child\n      } else {\n        const mwd = canvasUI.config.mindWired();\n        mwd.moveNodes(newParentNode, nodes, true);\n      }\n    }\n  },\n});\nexport default changeParentDndHandler;\n","export default \"data:image/svg+xml,%3csvg%20xmlns='http://www.w3.org/2000/svg'%20height='24px'%20viewBox='0%200%2024%2024'%20width='24px'%20fill='%23000000'%3e%3cpath%20d='M0%200h24v24H0V0z'%20fill='none'/%3e%3cpath%20d='M12%202C6.48%202%202%206.48%202%2012s4.48%2010%2010%2010%2010-4.48%2010-10S17.52%202%2012%202zm0%2018c-4.41%200-8-3.59-8-8s3.59-8%208-8%208%203.59%208%208-3.59%208-8%208zm3-13.5V9h-4v2h4v2.5l3.5-3.5zm-6%204L5.5%2014%209%2017.5V15h4v-2H9z'/%3e%3c/svg%3e\"","export default \"data:image/svg+xml,%3csvg%20xmlns='http://www.w3.org/2000/svg'%20height='24'%20viewBox='0%20-960%20960%20960'%20width='24'%3e%3cpath%20d='M480-134.616%20313.078-301.539l43.383-43.383L480-221.384l123.539-123.538%2043.383%2043.383L480-134.616Zm-123.539-478L313.078-656%20480-822.922%20646.922-656l-43.383%2043.384L480-736.155%20356.461-612.616Z'/%3e%3c/svg%3e\"","import { DndContext, DndHelper } from '../service/dnd'\nimport { viewportDndHandler } from './dnd/viewport-dnd'\nimport nodeDndHandler from './dnd/node-dnd'\nimport changeParentDndHandler from './dnd/change-parent-node'\nimport { EVENT } from '../service/event-bus'\nimport iconSetPara from '../assets/icon-chng-parent.svg'\nimport iconfolding from '@/assets/icon-folded.svg'\nimport { geom, type Point } from '../service/geom'\nimport type { Configuration } from './config'\nimport { NodeUI } from './node/node-ui'\nimport { MindWired } from './mind-wired'\nimport type { NodeRect, SchemaSpec } from './node/node-type'\nimport { INodeEditor } from './node'\nimport type { DomUtil } from '../service/dom'\n\n// const pixelRatio = window.devicePixelRatio;\nconst template = {\n\tviewport: `<div data-mind-wired-viewport>\n    <canvas></canvas>\n    <div class=\"mwd-selection-area\"><div class=\"ctrl-icon\" data-cmd=\"set-para\" style=\"display:none;\"><img src=\"${iconSetPara}\"></div></div>\n    <div class=\"mwd-nodes\"></div>\n  </div>`,\n\tnode: `<div class=\"mwd-node\">\n    <div class=\"mwd-body\" tabIndex=\"0\"></div>\n    <div class=\"mwd-subs\"></div>\n    <div class=\"mwd-node-ctrl\"></div>\n  </div>`,\n\tfoldingControl: `<div class=\"ctrl-icon\" data-cmd=\"unfolding\"><img src=\"${iconfolding}\"></div>`,\n}\n\nconst installViewport = (canvasUI: CanvasUI) => {\n\tconst { el, ui, dom } = canvasUI.config\n\tconst width = ui.width || 600\n\tconst height = ui.height || 600\n\tlet viewport = dom.findOne(el, '[data-mind-wired-viewport]')\n\tif (!viewport) {\n\t\tviewport = dom.parseTemplate(template.viewport, {})\n\t\tif (!ui.useDefaultIcon) {\n\t\t\tviewport.querySelector('img')?.remove()\n\t\t}\n\t\tif (ui.mapId) {\n\t\t\tviewport.dataset.mindWiredViewport = ui.mapId\n\t\t}\n\t\tel.append(viewport)\n\t}\n\t{\n\t\t// canvas\n\t\tlet canvas = dom.findOne<HTMLCanvasElement>(viewport, ':scope > canvas')\n\t\tif (!canvas) {\n\t\t\tviewport.appendChild(dom.tag.canvas())\n\t\t}\n\t}\n\t{\n\t\tconst selectionArea = dom.findOne<HTMLDivElement>(\n\t\t\tviewport,\n\t\t\t':scope > .mwd-selection-area'\n\t\t)\n\t\tif (!selectionArea) {\n\t\t\tviewport.appendChild(dom.tag.div('.mwd-selection-area'))\n\t\t}\n\t}\n\t{\n\t\tconst nodesEl = dom.findOne<HTMLDivElement>(viewport, ':scope > .mwd-nodes')\n\t\tif (!nodesEl) {\n\t\t\tviewport.appendChild(dom.tag.div('.mwd-nodes'))\n\t\t}\n\t}\n\tdom.attr(viewport, 'tabIndex', '0')\n\tdom.css(viewport, { width, height })\n\n\treturn viewport\n}\nconst captureContext2D = (canvasUI: CanvasUI) => {\n\tif (canvasUI) {\n\t\tconst { devicePixelRatio: pixelRatio } = window\n\t\tconst { config, $viewport, $canvas } = canvasUI\n\t\tconst { offsetWidth, offsetHeight } = $viewport\n\t\tcanvasUI.dom.css($canvas, { width: offsetWidth, height: offsetHeight })\n\t\tcanvasUI.dom.attr($canvas, 'width', String(pixelRatio * offsetWidth), true)\n\t\tcanvasUI.dom.attr(\n\t\t\t$canvas,\n\t\t\t'height',\n\t\t\tString(pixelRatio * offsetHeight),\n\t\t\ttrue\n\t\t)\n\t\tconst ctx = $canvas.getContext('2d', { alpha: false })\n\n\t\tcanvasUI.$ctx = ctx\n\t\tcanvasUI.$ctx.scale(pixelRatio, pixelRatio)\n\t\tcanvasUI.drawNodeSelection()\n\t\tconfig.emit(EVENT.VIEWPORT.RESIZED)\n\t}\n}\nconst registerSchema = (\n\tschema: string,\n\t$el: HTMLElement,\n\tconfig: Configuration\n) => {\n\tconst className = config.ui.clazz.schema(schema)\n\tconfig.dom.clazz.add($el, className)\n}\nconst registerElement = (canvasUI: CanvasUI, nodeUI: NodeUI) => {\n\tif (nodeUI.$el) {\n\t\tthrow new Error(`[MINDWIRED] already installed. (${nodeUI.uid})`)\n\t}\n\tconst $el = (nodeUI.$el = canvasUI.dom.parseTemplate(template.node))\n\tconst mwd = canvasUI.config.mindWired()\n\tconst nodeRenderer = mwd.getNodeRender(nodeUI.model)\n\tconst model = mwd.translateModel(nodeUI.model)\n\tconst $bodyEl = canvasUI.getNodeBody(nodeUI)\n\tnodeRenderer.install(nodeUI.model, $bodyEl)\n\tif (model.schema) {\n\t\tregisterSchema(model.schema, $el, canvasUI.config)\n\t\tregisterSchema(model.schema, $bodyEl, canvasUI.config)\n\t}\n\tconst placeHolder = canvasUI.elemOf('.mwd-nodes')\n\tif (nodeUI.isRoot()) {\n\t\tplaceHolder.append($el)\n\t} else {\n\t\tconst $subs = canvasUI.dom.findOne(nodeUI.parent.$el, '.mwd-subs')\n\t\t$subs.append($el)\n\t}\n\t// apply uuid for node instance\n\t$el.dataset.uid = nodeUI.uid\n\treturn nodeUI.$el\n}\nconst unregisterElement = (\n\tcanvasUI: CanvasUI,\n\tnodeUI: NodeUI,\n\tpropagateAll: boolean = false\n) => {\n\tif (!nodeUI.$el) {\n\t\tthrow new Error(`[MINDWIRED][ERROR] not registered node. (${nodeUI.uid})`)\n\t}\n\tnodeUI.$el.remove()\n\tdelete nodeUI.$el\n\tif (propagateAll) {\n\t\tconst { subs } = nodeUI\n\t\tif (subs) {\n\t\t\tsubs.forEach(child => unregisterElement(canvasUI, child))\n\t\t}\n\t}\n}\nconst installDnd = (canvasUI: CanvasUI) => {\n\tconst { dom } = canvasUI\n\treturn new DndContext({\n\t\taccept: (el: HTMLElement) => {\n\t\t\tconst mwd: MindWired = canvasUI.config.mindWired!()\n\t\t\tif (dom.closest(el, '[data-editor-element]')) {\n\t\t\t\treturn false\n\t\t\t}\n\t\t\tif (dom.is(el, `[data-cmd=\"set-para\"]`)) {\n\t\t\t\tconst btn = dom.closest(el, `[data-cmd=\"set-para\"]`)\n\t\t\t\tcanvasUI.dndContext.capture('iconEl', btn)\n\t\t\t\tcanvasUI.dndContext.capture('handler', changeParentDndHandler(canvasUI))\n\t\t\t\treturn true\n\t\t\t} else if (dom.closest(el, '[data-cmd]')) {\n\t\t\t\treturn false\n\t\t\t} else if (dom.is(el, 'canvas')) {\n\t\t\t\tcanvasUI.dndContext.capture('handler', viewportDndHandler(canvasUI))\n\t\t\t\treturn true\n\t\t\t} else if (dom.is(el, '.mwd-node')) {\n\t\t\t\tconst nodeEl = dom.closest(el, '.mwd-node')\n\t\t\t\tconst nodeId = nodeEl.dataset.uid\n\t\t\t\tcanvasUI.dndContext.capture('handler', nodeDndHandler(canvasUI))\n\t\t\t\tcanvasUI.dndContext.capture('nodeId', nodeId)\n\t\t\t\tcanvasUI.dndContext.capture('editing', mwd.isEditing())\n\t\t\t\treturn true\n\t\t\t} else {\n\t\t\t\treturn false\n\t\t\t}\n\t\t},\n\t\tbeforeDrag: e => {\n\t\t\tconst handler = canvasUI.dndContext.getData('handler')\n\t\t\thandler.beforeDrag(e)\n\t\t},\n\t\tdragging: e => {\n\t\t\tconst editing = canvasUI.dndContext.getData('editing')\n\t\t\tif (!editing) {\n\t\t\t\tconst handler = canvasUI.dndContext.getData('handler')\n\t\t\t\thandler.dragging(e)\n\t\t\t}\n\t\t},\n\t\tafterDrag: e => {\n\t\t\tconst editing = canvasUI.dndContext.getData('editing')\n\t\t\tif (!editing) {\n\t\t\t\tconst handler = canvasUI.dndContext.getData('handler')\n\t\t\t\thandler.afterDrag(e)\n\t\t\t}\n\t\t},\n\t} as DndHelper)\n}\nconst updateFolding = (node: NodeUI, display: string, dom: DomUtil) => {\n\tif (!node.isReady()) {\n\t\treturn\n\t}\n\tdom.css(node.$el!, { display })\n\tif (node.isFolded()) {\n\t\treturn\n\t}\n\tnode.subs.forEach(child => {\n\t\tupdateFolding(child, display, dom)\n\t})\n}\nconst installFoldingIcon = (\n\tnodeEl: HTMLElement,\n\trect: DOMRect,\n\tconfig: Configuration,\n\tcallback: (foldingEl: HTMLElement) => void\n) => {\n\tlet foldingEl = nodeEl.querySelector<HTMLElement>(\n\t\t`:scope > [data-cmd=\"unfolding\"]`\n\t)\n\tif (!foldingEl) {\n\t\tconst { dom } = config\n\t\tfoldingEl = dom.parseTemplate(template.foldingControl, {})\n\t\tdom.css(foldingEl, {\n\t\t\ttransform: `translate(${rect.width / 2 + 4}px, -50%)`,\n\t\t\tzIndex: 0,\n\t\t})\n\t\tif (!config.ui.useDefaultIcon) {\n\t\t\tfoldingEl.querySelector('img')?.remove()\n\t\t}\n\t\tnodeEl.append(foldingEl)\n\t\tcallback(foldingEl)\n\t}\n}\nconst installFocusHandler = (canvasUI: CanvasUI) => {\n\t/*\n  dom.event.focus(\n    canvasUI.$viewport,\n    (e) => {\n      if (dom.is(e.target, \"[data-editor-element]\", true)) {\n        // prevents focus to propaga to root elem\n        // it breaks editing process\n      } else if (dom.is(e.target, \".mwd-node\")) {\n        const uid = e.target.parentNode.dataset.uid;\n        const mwd = canvasUI.config.mindWired();\n        const node = mwd.findNode((node) => node.uid === uid);\n        canvasUI.config.emit(EVENT.NODE.SELECTED, { node });\n      }\n    },\n    true\n  );\n  */\n}\nconst applyDrawingOption = <K extends keyof CanvasRenderingContext2D>(\n\tctx: CanvasRenderingContext2D,\n\toptions: Partial<CanvasRenderingContext2D>,\n\tfn?: (ctx: CanvasRenderingContext2D) => void\n) => {\n\tif (options) {\n\t\tObject.keys(options).forEach(key => {\n\t\t\tconst val = options[key]\n\t\t\tif (val) {\n\t\t\t\tctx[key] = val\n\t\t\t}\n\t\t})\n\t}\n\tif (fn) {\n\t\tfn(ctx)\n\t}\n}\nexport class CanvasUI {\n\tconfig: Configuration\n\t$viewport: HTMLElement\n\tdndContext: DndContext\n\tresizeObserver: ResizeObserver\n\tselectionArea: NodeRect | undefined\n\t$ctx: CanvasRenderingContext2D\n\tconstructor(config: Configuration) {\n\t\tthis.config = config\n\t\tthis.$viewport = installViewport(this)\n\t\tcaptureContext2D(this)\n\t\tinstallFocusHandler(this)\n\t\tthis.dndContext = installDnd(this)\n\t\tlet timer: number | undefined\n\t\tconst resizer = () => {\n\t\t\tclearTimeout(timer)\n\t\t\ttimer = window.setTimeout(captureContext2D, 150, this)\n\t\t}\n\t\tthis.resizeObserver = new ResizeObserver(resizer)\n\t\tthis.resizeObserver.observe(this.$viewport)\n\t\t// this.selectionArea;\n\t}\n\tget dom() {\n\t\treturn this.config.dom\n\t}\n\tget $canvas() {\n\t\treturn this.$viewport.querySelector<HTMLElement>(\n\t\t\t'canvas'\n\t\t) as HTMLCanvasElement\n\t}\n\tget $holder() {\n\t\treturn this.$viewport.querySelector<HTMLElement>('.mwd-nodes')!\n\t}\n\tget scale() {\n\t\treturn this.config.scale\n\t}\n\tgetContext() {\n\t\treturn this.$ctx\n\t}\n\tgetHolderOffset() {\n\t\tconst el = this.$holder\n\t\t// const baseOffset = this.config.getOffset();\n\t\treturn { x: el!.offsetLeft, y: el!.offsetTop }\n\t}\n\t/**\n\t * multiply scale to numeric properties\n\t * @param obj object to mutiply scale\n\t * @returns\n\t */\n\tsetScale<T>(obj: T): T {\n\t\tconst { scale } = this\n\t\tif (typeof obj === 'number') {\n\t\t\treturn (obj * scale) as T\n\t\t} else if (Array.isArray(obj)) {\n\t\t\tconst cloned = [...obj]\n\t\t\tcloned.forEach((elem, index) => {\n\t\t\t\tcloned[index] = this.setScale(elem)\n\t\t\t})\n\t\t\treturn cloned as T\n\t\t} else if (typeof obj === 'object') {\n\t\t\tconst cloned = { ...obj }\n\t\t\tfor (let prop in cloned) {\n\t\t\t\tcloned[prop] = this.setScale<any>(obj[prop])\n\t\t\t}\n\t\t\treturn cloned\n\t\t}\n\t\treturn obj\n\t}\n\t/**\n\t * multiply scale to numeric properties\n\t * @param point point to multiply scale\n\t * @returns\n\t */\n\tgetScaledPos(point: Point) {\n\t\tpoint.x *= this.scale\n\t\tpoint.y *= this.scale\n\t\treturn point\n\t}\n\t/**\n\t * multiply scale to offset(x,y) of the node\n\t * @param node\n\t * @returns\n\t */\n\tgetScaledOffset(node: NodeUI): any {\n\t\treturn this.getScaledPos(node.offset())\n\t}\n\tgetDimension() {\n\t\tconst el = this.$canvas\n\t\treturn { width: el!.offsetWidth, height: el!.offsetHeight }\n\t}\n\tgetNodeDimension(node: NodeUI, relative = false) {\n\t\tconst dim = node.dimension(relative)\n\t\tconst { scale } = this.config\n\t\tdim.center.x *= scale\n\t\tdim.center.y *= scale\n\t\treturn dim\n\t}\n\tgetAbsoluteDimensions(nodes: NodeUI[]) {\n\t\tconst rects = nodes.map((n: NodeUI) => this.getNodeDimension(n))\n\t\tconst area = rects.reduce(\n\t\t\t(acc: NodeRect, rect: NodeRect) => acc.merge(rect),\n\t\t\trects[0]\n\t\t)\n\t\treturn area\n\t}\n\telemOf(cssSelector: string) {\n\t\treturn this.$viewport.querySelector(cssSelector)\n\t}\n\tshiftBy(dx: number, dy: number) {\n\t\tconst offset = this.config.getOffset()\n\t\toffset.x += dx\n\t\toffset.y += dy\n\t\tthis.config.setOffset(offset)\n\t\tthis.repaintNodeHolder()\n\t}\n\trenderWith(callback: (ctx: CanvasRenderingContext2D) => void) {\n\t\tconst ctx = this.getContext()\n\t\tconst offset = this.getHolderOffset()\n\t\ttry {\n\t\t\tctx.translate(offset.x, offset.y)\n\t\t\tctx.save()\n\t\t\tcallback(ctx)\n\t\t} finally {\n\t\t\tctx.restore()\n\t\t\tctx.translate(-offset.x, -offset.y)\n\t\t}\n\t}\n\tfindNodeAt(x: number, y: number) {\n\t\tconst nodeBodies = this.$holder.querySelectorAll<HTMLElement>('.mwd-body')\n\t\tlet found = null\n\t\tconst { dom } = this\n\t\tfor (let i = 0; i < nodeBodies.length; i++) {\n\t\t\tconst rect = dom.domRect(nodeBodies[i])\n\t\t\tif (\n\t\t\t\trect.left <= x &&\n\t\t\t\trect.right >= x &&\n\t\t\t\trect.top <= y &&\n\t\t\t\trect.bottom >= y\n\t\t\t) {\n\t\t\t\tfound = nodeBodies[i]\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t\tif (!found) {\n\t\t\treturn null\n\t\t}\n\t\tconst mwd = this.config.mindWired()\n\t\tconst nodeEl = dom.closest(found, '.mwd-node') as HTMLElement\n\t\tconst node = mwd.findNode(node => node.uid === nodeEl.dataset.uid)\n\t\treturn node\n\t}\n\tdrawPath(\n\t\tpoints: Point[],\n\t\toptions: Partial<CanvasRenderingContext2D>,\n\t\tfn: (ctx: CanvasRenderingContext2D) => void\n\t) {\n\t\tthis.renderWith(ctx => {\n\t\t\tapplyDrawingOption(ctx, options, fn)\n\t\t\tctx.beginPath()\n\t\t\tlet s = points[0]\n\t\t\t// points = points.slice(1);\n\t\t\tctx.moveTo(s.x, s.y)\n\t\t\tpoints.forEach(e => {\n\t\t\t\tctx.lineTo(e.x, e.y)\n\t\t\t})\n\t\t\tctx.stroke()\n\t\t})\n\t}\n\tdrawCurve<K extends keyof CanvasRenderingContext2D>(\n\t\ts: Point,\n\t\te: Point,\n\t\toption: {\n\t\t\tdegree: number\n\t\t\tratio: number\n\t\t\tprops: Record<K, CanvasRenderingContext2D[K]>\n\t\t},\n\t\tfn: (ctx: CanvasRenderingContext2D) => void\n\t) {\n\t\t// const ctx = this.getContext();\n\t\tthis.renderWith(ctx => {\n\t\t\tapplyDrawingOption(ctx, option.props, fn)\n\t\t\tconst lenSE = Math.sqrt(\n\t\t\t\t(s.x - e.x) * (s.x - e.x) + (s.y - e.y) * (s.y - e.y)\n\t\t\t)\n\t\t\tconst degree = option.degree\n\t\t\tconst length = lenSE * option.ratio\n\t\t\tconst scale = (length / lenSE) * this.scale\n\t\t\tconst cp1 = geom.rotate(s, e, degree, { scale })\n\t\t\tconst cp2 = geom.rotate(e, s, degree, { scale })\n\t\t\t// const offset = this.getHolderOffset();\n\n\t\t\tctx.beginPath()\n\t\t\tctx.moveTo(s.x, s.y)\n\t\t\tctx.bezierCurveTo(cp1.x, cp1.y, cp2.x, cp2.y, e.x, e.y)\n\t\t\tctx.stroke()\n\t\t})\n\t\t// ctx.save();\n\n\t\t// ctx.restore();\n\t}\n\tdrawBeizeCurve<K extends keyof CanvasRenderingContext2D>(\n\t\ts: Point,\n\t\te: Point,\n\t\toption: { cpoints: Point[]; props: Record<K, CanvasRenderingContext2D[K]> },\n\t\tfn: (ctx: CanvasRenderingContext2D) => void\n\t) {\n\t\tconst ctx = this.getContext()\n\t\tctx.save()\n\t\tapplyDrawingOption(ctx, option.props, fn)\n\t\tconst [cp1, cp2] = option.cpoints\n\t\tconst offset = this.getHolderOffset()\n\t\tctx.beginPath()\n\t\tctx.moveTo(offset.x + s.x, offset.y + s.y)\n\t\tctx.bezierCurveTo(\n\t\t\toffset.x + cp1.x,\n\t\t\toffset.y + cp1.y,\n\t\t\toffset.x + cp2.x,\n\t\t\toffset.y + cp2.y,\n\t\t\toffset.x + e.x,\n\t\t\toffset.y + e.y\n\t\t)\n\t\tctx.stroke()\n\t\tctx.restore()\n\t}\n\tdrawVLines(\n\t\txPoints: number[],\n\t\toption: (ctx: CanvasRenderingContext2D) => void\n\t) {\n\t\tconst H = this.$viewport.offsetHeight\n\t\tconst ctx = this.getContext()\n\t\tctx.save()\n\t\tif (typeof option === 'function') {\n\t\t\toption(ctx)\n\t\t}\n\t\tctx.beginPath()\n\t\tconst offset = this.getHolderOffset()\n\t\txPoints.forEach(x => {\n\t\t\tctx.moveTo(offset.x + x, 0)\n\t\t\tctx.lineTo(offset.x + x, H)\n\t\t})\n\t\tctx.stroke()\n\t\tctx.closePath()\n\t\tctx.restore()\n\t}\n\tdrawHLines(\n\t\tyPoints: number[],\n\t\toption: (ctx: CanvasRenderingContext2D) => void\n\t) {\n\t\tconst W = this.$viewport.offsetWidth\n\t\tconst ctx = this.getContext()\n\t\tctx.save()\n\t\tif (typeof option === 'function') {\n\t\t\toption(ctx)\n\t\t}\n\t\tctx.beginPath()\n\t\tconst offset = this.getHolderOffset()\n\t\tyPoints.forEach(y => {\n\t\t\tctx.moveTo(0, offset.y + y)\n\t\t\tctx.lineTo(W, offset.y + y)\n\t\t})\n\t\tctx.stroke()\n\t\tctx.closePath()\n\t\tctx.restore()\n\t}\n\tclear() {\n\t\tconst dim = this.getDimension()\n\t\tconst ctx = this.getContext()\n\t\tctx.fillStyle = 'white'\n\t\tctx.fillRect(0, 0, dim.width, dim.height)\n\n\t\t// drawGrid(ctx, dim);\n\t}\n\n\trepaintNodeHolder() {\n\t\tconst baseOffset = this.config.getOffset()\n\t\tconst { scale } = this.config\n\t\tthis.dom.css(this.$holder, {\n\t\t\ttop: `calc(50% + ${baseOffset.y}px)`,\n\t\t\tleft: `calc(50% + ${baseOffset.x}px)`,\n\t\t\ttransform: `scale(${scale})`,\n\t\t})\n\t\tthis.drawNodeSelection()\n\t}\n\tmoveNode(nodeUI: NodeUI) {\n\t\t// moveNode\n\t\tconst { parent } = nodeUI\n\t\tconst $subs = this.dom.findOne(parent!.$el!, '.mwd-subs')\n\t\t$subs!.append(nodeUI.$el!)\n\t}\n\tdrawNodeSelection() {\n\t\tconst area = this.selectionArea\n\t\tif (!area) {\n\t\t\treturn\n\t\t}\n\t\tconst { selection } = this.config.ui\n\t\tconst { dom } = this\n\t\tconst offset = this.getHolderOffset()\n\t\tconst el = dom.findOne(this.$viewport, '.mwd-selection-area')\n\t\tdom.css(el, {\n\t\t\tleft: offset.x + area.left - selection.padding,\n\t\t\ttop: offset.y + area.top - selection.padding,\n\t\t\twidth: area.width + 2 * selection.padding,\n\t\t\theight: area.height + 2 * selection.padding,\n\t\t})\n\t\tconst ctrl = dom.findOne(el, 'div')\n\t\tdom.css(ctrl, {\n\t\t\tdisplay: '',\n\t\t\twidth: 24,\n\t\t\theight: 24,\n\t\t})\n\t}\n\tupdateSelection(nodes: NodeUI[]) {\n\t\tif (!nodes || nodes.length === 0) {\n\t\t\treturn\n\t\t}\n\t\tthis.clearNodeSelection()\n\t\tthis.selectionArea = this.getAbsoluteDimensions(nodes)\n\t\tthis.drawNodeSelection()\n\t}\n\tclearNodeSelection() {\n\t\tif (this.selectionArea) {\n\t\t\tconst { dom } = this\n\t\t\tconst el = dom.findOne(this.$viewport, '.mwd-selection-area')\n\t\t\tdom.css(el, { top: -1, left: -1, width: 0, height: 0 })\n\t\t\tconst ctrl = dom.findOne(el, 'div')\n\t\t\tdom.css(ctrl, { display: 'none' })\n\t\t\tthis.selectionArea = undefined\n\t\t}\n\t}\n\tdrawNode(nodeUI: NodeUI) {\n\t\tif (!nodeUI.$el) {\n\t\t\tregisterElement(this, nodeUI)\n\t\t}\n\t\tconst { $el, zIndex } = nodeUI\n\t\tconst $body = $el!.querySelector<HTMLElement>('.mwd-body')\n\t\t// 1. folding state\n\t\tconst foldedClassName = this.config.foldedNodeClassName()\n\t\tconst { dom } = this\n\t\tif (nodeUI.isFolded()) {\n\t\t\tdom.clazz.add($el, foldedClassName)\n\t\t} else {\n\t\t\tdom.clazz.remove($el, foldedClassName)\n\t\t}\n\t\t// 2. positioning\n\t\tconst pos = nodeUI.getPos()\n\t\tdom.css($el!, { top: pos.y, left: pos.x, zIndex: zIndex })\n\t\t// 3. selection state\n\t\tconst methodName = nodeUI.isSelected() ? 'add' : 'remove'\n\t\tconst className = this.config.activeClassName('node')\n\t\tdom.clazz[methodName]($body, className)\n\t\t// 4. level\n\t\tconst levelClassName: string = this.config.nodeLevelClassName(nodeUI)\n\t\tdom.clazz.add($body, levelClassName)\n\t\t$body.dataset.level = `${nodeUI.level()}`\n\t\t// 5. additional style\n\t\tconst { style } = nodeUI.view\n\t\tif (style) {\n\t\t\tdom.renderStyle($body, style)\n\t\t}\n\t\tconst mwd = this.config.mindWired()\n\t\tconst nodeRenderer = mwd.getNodeRender(nodeUI.model)\n\t\tconst model = mwd.translateModel(nodeUI.model)\n\t\tnodeRenderer.render(model, $body, {\n\t\t\tselected: nodeUI.selected,\n\t\t\tediting: nodeUI.editing,\n\t\t})\n\t}\n\tshowNodeEditor(nodeUI: NodeUI, nodeEditor: INodeEditor) {\n\t\tconst { uid } = nodeUI\n\t\tconst mwd = this.config.mindWired()\n\t\tconst model = mwd.translateModel(nodeUI.model)\n\t\tconst nodeEl = this.$holder.querySelector<HTMLElement>(`[data-uid=${uid}]`)\n\t\tconst $editorEl = nodeEditor.showEditor(\n\t\t\tmodel,\n\t\t\tnodeEl,\n\t\t\tnodeUI.getStyle('style')\n\t\t)\n\t\t// mark editor element for focus management\n\t\t// see installFocusHandler();\n\t\tthis.dom.css($editorEl, { transform: `scale(${1 / this.scale})` })\n\t\t$editorEl.dataset.editorElement = ''\n\n\t\treturn new Promise(ok => {\n\t\t\tsetTimeout(ok)\n\t\t})\n\t}\n\thideNodeEditor(nodeUI: NodeUI) {\n\t\tconst { uid } = nodeUI\n\t\tconst { dom } = this\n\t\tconst nodeEl = this.$holder.querySelector<HTMLElement>(`[data-uid=${uid}]`)\n\t\tconst editBox = dom.findOne(nodeEl!, '[data-editor-element]')\n\t\tif (editBox) {\n\t\t\teditBox.remove()\n\t\t}\n\t\tdom.findOne(nodeEl!, '.mwd-body')!.focus()\n\t}\n\tregsiterNode(nodeUI: NodeUI) {\n\t\tregisterElement(this, nodeUI)\n\t}\n\tunregisterNode(nodeUI: NodeUI) {\n\t\tunregisterElement(this, nodeUI)\n\t\tthis.clearNodeSelection()\n\t}\n\tunregisterNodeTree(node: NodeUI) {\n\t\tunregisterElement(this, node, true)\n\t}\n\tupdateFoldingNodes(nodeUI: NodeUI) {\n\t\tconst display = nodeUI.isFolded() ? 'none' : ''\n\t\tconst { dom } = this\n\t\tconst nodeEl = dom.findOne(this.$holder, `[data-uid=\"${nodeUI.uid}\"]`)!\n\t\tconst subEl = dom.findOne(nodeEl, ':scope > .mwd-subs')\n\t\tdom.css(subEl, { display })\n\t\tif (nodeUI.isFolded()) {\n\t\t\tconst rect = dom.domRect(nodeUI.$bodyEl)\n\t\t\tinstallFoldingIcon(nodeEl, rect, this.config, foldingEl => {\n\t\t\t\tdom.event.click(foldingEl, e => {\n\t\t\t\t\te.stopPropagation()\n\t\t\t\t\tconst mwd = this.config.mindWired()\n\t\t\t\t\tmwd.setFoldingState([nodeUI], false)\n\t\t\t\t\t// nodeUI.setFolding(false);\n\t\t\t\t})\n\t\t\t})\n\t\t} else {\n\t\t\tdom.findOne(nodeEl, ':scope > [data-cmd=\"unfolding\"]')!.remove()\n\t\t}\n\t}\n\tgetNodeBody(nodeUI: NodeUI) {\n\t\tlet nodeEl = nodeUI.$el!\n\t\tif (!nodeEl) {\n\t\t\tnodeEl = registerElement(this, nodeUI)\n\t\t}\n\t\treturn nodeEl.querySelector<HTMLElement>(`.mwd-body`)\n\t}\n\tdrawSchema(schemaSpec: SchemaSpec) {\n\t\tconst { name, style } = schemaSpec\n\t\tif (style) {\n\t\t\tconst { mapId, styleDef } = this.config.ui\n\t\t\tconst styleId = styleDef.schema.styleId\n\t\t\t\t.replace('@schema', name)\n\t\t\t\t.replace('@mapId', mapId ? `-${mapId}` : '')\n\t\t\tlet styleEl = document.querySelector(styleId)\n\t\t\tif (!styleEl) {\n\t\t\t\tstyleEl = this.dom.tag.style(styleId)\n\t\t\t\tdocument.head.appendChild(styleEl)\n\t\t\t}\n\t\t\tconst body = Object.keys(style).reduce((cssText, prop) => {\n\t\t\t\tconst dashedprop = prop.replace(\n\t\t\t\t\t/[A-Z]/g,\n\t\t\t\t\tmatch => `-${match.toLowerCase()}`\n\t\t\t\t)\n\t\t\t\treturn cssText + `${dashedprop}: ${style[prop]};`\n\t\t\t}, '')\n\t\t\tconst selector = styleDef.schema.selector\n\t\t\t\t.replace('@schema', name)\n\t\t\t\t.replace('@mapId', mapId ? `=\"${mapId}\"` : '')\n\t\t\tstyleEl.innerHTML = `${selector} { ${body} }`\n\t\t}\n\t}\n\tremoveSchema(schemaName: string) {\n\t\tconst { mapId, styleDef } = this.config.ui\n\t\tconst styleId = styleDef.schema.styleId\n\t\t\t.replace('@schema', schemaName)\n\t\t\t.replace('@mapId', mapId ? `-${mapId}` : '')\n\t\tlet styleEl = document.querySelector(styleId)\n\t\tif (styleEl) {\n\t\t\tstyleEl.remove()\n\t\t}\n\t}\n\tbindSchema(node: NodeUI, schemaSpec: SchemaSpec): boolean {\n\t\tconst { model } = node.spec\n\t\tconst { name } = schemaSpec\n\t\tconst classes: string[] = model.schema\n\t\t\t? model.schema.split(' ').map(clazz => clazz.trim())\n\t\t\t: []\n\t\tif (classes.includes(name)) {\n\t\t\treturn false\n\t\t}\n\t\tclasses.push(name)\n\t\tmodel.schema = classes.join(' ').trim()\n\n\t\tconst $bodyEl = this.getNodeBody(node)\n\t\tnode.$el.classList.add(name)\n\t\t$bodyEl.classList.add(name)\n\t\treturn true\n\t}\n\tunbindSchema(node: NodeUI, schemaSpec: SchemaSpec): boolean {\n\t\tconst { model } = node.spec\n\t\tif (!model.schema) {\n\t\t\treturn false\n\t\t}\n\t\tconst { name } = schemaSpec\n\t\tconst classes: string[] = model.schema\n\t\t\t.split(' ')\n\t\t\t.map(clazz => clazz.trim())\n\t\t\t.filter(clazz => clazz.length > 0 && clazz !== name)\n\t\tmodel.schema = classes.join(' ').trim()\n\t\tif (model.schema.length === 0) {\n\t\t\tdelete model.schema\n\t\t}\n\t\tconst $bodyEl = this.getNodeBody(node)\n\t\tnode.$el.classList.remove(name)\n\t\t$bodyEl.classList.remove(name)\n\t\treturn true\n\t}\n}\n","import { type CanvasUI } from \"../canvas-ui\";\nimport { type NodeUI } from \"../node\";\n\nexport type EdgeRendererName = string;\n\nexport type EdgeRederingOptionType<T> = {\n  optionType: T;\n};\n/**\n * Top level edge renderer interface. All implementation provide unique name and rendering opration on canvas.\n * @template T - type of custom edge option\n */\nexport interface IEdgeRenderer<T = any> {\n  /**\n   * unique renderer name\n   */\n  name: EdgeRendererName;\n  /**\n   * FIXME NodeUI보다는 EdgeSpec(node.$style) 이 적절해보임.\n   * @param node\n   */\n  getRenderingOption(node: NodeUI): T;\n  render: (canvas: CanvasUI, srcNode: NodeUI, dstNode: NodeUI) => void;\n}\n\nexport abstract class AbstractEdgeRenderer<T> implements IEdgeRenderer<T> {\n  abstract name: string;\n  /**\n   * provides default option to be used for pollyfill\n   */\n  get defaultOption(): T {\n    return undefined;\n  }\n  abstract render(canvas: CanvasUI, srcNode: NodeUI, dstNode: NodeUI): void;\n  getRenderingOption(node: NodeUI): T {\n    const option: T = node.$style.option;\n    const { defaultOption } = this;\n    if (defaultOption !== undefined) {\n      for (let prop in defaultOption) {\n        if (option[prop] === undefined && defaultOption[prop] !== undefined) {\n          option[prop] = defaultOption[prop];\n        }\n      }\n    }\n    return option;\n  }\n}\n","import { Point } from \"@/setting\";\nimport type { CanvasUI } from \"../canvas-ui\";\nimport { NodeRect } from \"../node/node-type\";\nimport { type NodeUI } from \"../node/node-ui\";\nimport { AbstractEdgeRenderer } from \"./edge-renderer-type\";\n\nconst valignOf = (option: any) => {\n  const valign = option && option.valign;\n  return valign || \"center\";\n};\nconst pointAt = <K extends keyof NodeRect>(\n  rect: NodeRect,\n  lblY: K,\n  lblX: K,\n  offsetY: number\n) => {\n  const x = rect[lblX] as number;\n  const y = rect[lblY] as number;\n  return new Point(x, y + offsetY);\n};\nexport class LineEdgeRenderer extends AbstractEdgeRenderer<void> {\n  get name() {\n    return \"line\";\n  }\n  /**\n   * drawing line between srcNode and dstNode\n   * @param canvas\n   * @param srcNode\n   * @param dstNode\n   */\n  render(canvas: CanvasUI, srcNode: NodeUI, dstNode: NodeUI) {\n    const { scale } = canvas;\n    const [s, e] = [srcNode, dstNode].map((node) =>\n      canvas.getNodeDimension(node)\n    );\n\n    const option = this.getRenderingOption(srcNode);\n    const valign = valignOf(option);\n    const pathes: Point[] = [];\n    const auxPathes: Point[] = [];\n    const srcStyle = srcNode.$style;\n    const srcLineWidth = srcStyle.width * scale;\n    const dstStyle = dstNode.$style;\n    const dstLineWidth = dstStyle.width * scale;\n    const lineGap = Math.abs(srcLineWidth - dstLineWidth);\n    const offsetY = dstLineWidth / 2;\n\n    if (valign === \"center\") {\n      pathes.push(s.center, e.center);\n    } else if (valign === \"bottom\") {\n      const isLR = s.cx <= e.cx;\n      const shiftX = isLR ? 2 : -2;\n      const sLabel = isLR ? \"right\" : \"left\";\n      const eLabel: [\"left\" | \"right\", \"left\" | \"right\"] = isLR\n        ? [\"left\", \"right\"]\n        : [\"right\", \"left\"];\n      const s0 = pointAt(s, \"bottom\", sLabel, offsetY);\n      const s1 = s0.clone();\n      s1.x += shiftX;\n      const d1 = pointAt(e, \"bottom\", eLabel[0], offsetY);\n      const d0 = d1.clone();\n      d0.x -= shiftX;\n      pathes.push(s0, s1, d0, d1);\n      pathes.push(pointAt(e, \"bottom\", eLabel[1], offsetY));\n      if (lineGap > 0) {\n        const p0 = s0.clone();\n        p0.y += lineGap;\n        const p1 = s1.clone();\n        p1.y += lineGap;\n        auxPathes.push(p0, p1, d0, d1);\n      }\n    }\n    canvas.drawPath(\n      pathes,\n      {\n        lineWidth: dstLineWidth,\n        strokeStyle: dstStyle.color,\n        lineJoin: \"round\",\n      },\n      (ctx) => {\n        if (dstStyle.dash) {\n          ctx.setLineDash(dstStyle.dash);\n        }\n      }\n    );\n    if (auxPathes.length > 0) {\n      canvas.drawPath(\n        auxPathes,\n        {\n          lineWidth: dstLineWidth,\n          strokeStyle: dstStyle.color,\n          lineJoin: \"round\",\n        },\n        (ctx) => {\n          if (dstStyle.dash) {\n            ctx.setLineDash(dstStyle.dash);\n          }\n        }\n      );\n    }\n    if (srcNode.isRoot() && valign === \"bottom\") {\n      const offset = srcLineWidth / 2;\n      canvas.drawPath(\n        [\n          pointAt(s, \"bottom\", \"left\", offset),\n          pointAt(s, \"bottom\", \"right\", offset),\n        ],\n        {\n          lineWidth: srcLineWidth,\n          strokeStyle: srcStyle.color,\n          lineJoin: \"round\",\n        },\n        (ctx) => {\n          if (srcStyle.dash) {\n            ctx.setLineDash(srcStyle.dash);\n          }\n        }\n      );\n    }\n  }\n}\n","/**\n * natural curve\n */\nimport type { CanvasUI } from \"../canvas-ui\";\nimport type { NodeUI } from \"../node/node-ui\";\nimport { AbstractEdgeRenderer } from \"./edge-renderer-type\";\n\nexport type NaturalCurveEdgeOption = {\n  deg: number;\n  ratio: number;\n};\nexport class NaturalCourveEdgeRenderer extends AbstractEdgeRenderer<NaturalCurveEdgeOption> {\n  get name() {\n    return \"curve\";\n  }\n  get defaultOption() {\n    return { deg: 20, ratio: 0.4 } as NaturalCurveEdgeOption;\n  }\n  render(canvas: CanvasUI, srcNode: NodeUI, dstNode: NodeUI) {\n    const { scale } = canvas;\n    const [s, e] = [srcNode, dstNode].map((node) =>\n      canvas.getScaledOffset(node)\n    );\n    const style = dstNode.$style;\n    const option = this.getRenderingOption(dstNode);\n    canvas.drawCurve(\n      s,\n      e,\n      {\n        degree: option.deg || 20,\n        ratio: option.ratio || 0.4,\n        props: {\n          lineWidth: style.width * scale,\n          strokeStyle: style.color,\n        },\n      },\n      style.getEdgeRenderer()\n    );\n  }\n}\n","import { Point } from \"../../service/geom\";\nimport type { CanvasUI } from \"../canvas-ui\";\nimport { type NodeRect } from \"../node/node-type\";\nimport { type NodeUI } from \"../node/node-ui\";\nimport { AbstractEdgeRenderer } from \"./edge-renderer-type\";\nimport type { EdgeStyle } from \"./edge-style\";\n\nexport type MustachLREdgeOption = {\n  valign: \"bottom\" | \"center\" | \"top\";\n};\nconst valignOf = (option: MustachLREdgeOption) => {\n  const valign = option && option.valign;\n  return valign || \"center\";\n};\nconst pointAt = <K extends keyof NodeRect>(\n  rect: NodeRect,\n  lblY: K,\n  lblX: K,\n  offsetY: number\n) => {\n  const x = rect[lblX] as number;\n  const y = rect[lblY] as number;\n  return new Point(x, y + offsetY);\n};\nconst renderUnderline = (\n  canvas: CanvasUI,\n  style: EdgeStyle,\n  rect: NodeRect,\n  lineWidth: number\n) => {\n  const offset = lineWidth / 2;\n  canvas.drawPath(\n    [\n      { x: rect.left, y: rect.bottom + offset } as Point,\n      { x: rect.right, y: rect.bottom + offset } as Point,\n    ],\n    { lineWidth, strokeStyle: style.color },\n    (ctx) => {\n      if (style.dash) {\n        ctx.setLineDash(style.dash);\n      }\n    }\n  );\n};\nconst rnederCurve = (\n  canvas: CanvasUI,\n  src: Point,\n  srcStyle: EdgeStyle,\n  dst: Point,\n  dstStyle: EdgeStyle\n) => {\n  const { scale } = canvas;\n  const srcLineWidth = srcStyle.width * scale;\n  const dstLineWidth = dstStyle.width * scale;\n  const lineWidth = Math.min(srcLineWidth, dstLineWidth);\n  const distance = dst.x - src.x;\n  const lineOffset = Math.abs(srcLineWidth - dstLineWidth);\n  src.y -= lineOffset / 2;\n  const props = { lineWidth: lineWidth, strokeStyle: dstStyle.color };\n  const rendererFn = (ctx: CanvasRenderingContext2D) => {\n    if (dstStyle.dash) {\n      ctx.setLineDash(dstStyle.dash);\n    }\n  };\n  canvas.drawBeizeCurve(\n    src,\n    dst,\n    {\n      cpoints: [\n        { x: src.x + distance / 2, y: src.y } as Point,\n        { x: dst.x - distance / 2, y: dst.y } as Point,\n      ],\n      props,\n    },\n    rendererFn\n  );\n  if (lineOffset > 0) {\n    src.y += lineOffset;\n    if (lineOffset / 2 >= dstLineWidth) {\n      props.lineWidth = srcLineWidth;\n    }\n    canvas.drawBeizeCurve(\n      src,\n      dst,\n      {\n        cpoints: [\n          { x: src.x + distance / 2, y: src.y } as Point,\n          { x: dst.x - distance / 2, y: dst.y } as Point,\n        ],\n        props,\n      },\n      rendererFn\n    );\n  }\n};\nexport class MustacheLREdgeRenderer extends AbstractEdgeRenderer<MustachLREdgeOption> {\n  get name() {\n    return \"mustache_lr\";\n  }\n  render(canvas: CanvasUI, srcNode: NodeUI, dstNode: NodeUI) {\n    const [s, e] = [srcNode, dstNode].map((node) =>\n      canvas.getNodeDimension(node)\n    );\n    const padding = {\n      src: srcNode.$style.width * canvas.scale,\n      dst: dstNode.$style.width * canvas.scale,\n    };\n    const option = this.getRenderingOption(srcNode);\n    const isBottom = valignOf(option) === \"bottom\";\n\n    if (isBottom && srcNode.firstChild() === dstNode) {\n      renderUnderline(canvas, srcNode.$style, s, padding.src);\n    }\n\n    let sp: Point, ep: Point;\n    const isLR = s.cx <= e.cx; // [srcNode ... dstNode]\n    const labelY = isBottom ? \"bottom\" : \"cy\";\n    if (isLR) {\n      // srcNode ... dstNode\n      sp = pointAt(s, labelY, \"right\", padding.src / 2);\n      ep = pointAt(e, labelY, \"left\", padding.dst / 2);\n    } else {\n      // dstNode ... srcNode\n      sp = pointAt(s, labelY, \"left\", padding.src / 2);\n      ep = pointAt(e, labelY, \"right\", padding.dst / 2);\n    }\n    rnederCurve(canvas, sp, srcNode.$style, ep, dstNode.$style);\n    if ((dstNode.isFolded() || dstNode.isLeaf()) && isBottom) {\n      renderUnderline(canvas, dstNode.$style, e, padding.dst);\n    }\n  }\n}\n","import { Point } from \"../../service/geom\";\nimport type { CanvasUI } from \"../canvas-ui\";\nimport { type NodeRect } from \"../node/node-type\";\nimport { type NodeUI } from \"../node/node-ui\";\nimport { AbstractEdgeRenderer } from \"./edge-renderer-type\";\n\nconst renderCurve = (\n  canvas: CanvasUI,\n  srcNode: NodeUI,\n  s: NodeRect,\n  dstNode: NodeUI,\n  e: NodeRect,\n  dy: number\n) => {\n  const { scale } = canvas;\n  const srcWidth = srcNode.$style.width * scale;\n  const dstWidth = dstNode.$style.width * scale;\n  const width = Math.min(srcWidth, dstWidth);\n  const offset = Math.abs(srcWidth - dstWidth);\n  s.center.x -= offset / 2;\n  const props = { lineWidth: width, strokeStyle: dstNode.$style.color };\n  const rendererFn = (ctx: CanvasRenderingContext2D) => {\n    if (srcNode.$style.dash) {\n      ctx.setLineDash(srcNode.$style.dash);\n    }\n  };\n  canvas.drawBeizeCurve(\n    s.center,\n    e.center,\n    {\n      cpoints: [\n        { x: s.cx, y: s.cy + dy / 2 } as Point,\n        { x: e.cx, y: e.cy - dy / 2 } as Point,\n      ],\n      props,\n    },\n    rendererFn\n  );\n  if (offset > 0) {\n    s.center.y += offset;\n    canvas.drawBeizeCurve(\n      s.center,\n      e.center,\n      {\n        cpoints: [\n          { x: s.cx, y: s.cy + dy / 2 } as Point,\n          { x: e.cx, y: e.cy - dy / 2 } as Point,\n        ],\n        props,\n      },\n      rendererFn\n    );\n  }\n};\nexport class MustacheTBEdgeRenderer extends AbstractEdgeRenderer<void> {\n  get name() {\n    return \"mustache_tb\";\n  }\n  render(canvas: CanvasUI, srcNode: NodeUI, dstNode: NodeUI) {\n    const [s, e] = [srcNode, dstNode].map((node) =>\n      canvas.getNodeDimension(node)\n    );\n    const padding = { hor: 0, ver: 5 };\n\n    let min: NodeRect, max: NodeRect;\n    if (s.cy <= e.cy) {\n      min = s;\n      max = e;\n    } else {\n      min = e;\n      max = s;\n    }\n\n    min.center.y = min.bottom + padding.ver;\n    max.center.y = max.top - padding.ver;\n\n    const dy = max.cy - min.cy;\n    renderCurve(canvas, srcNode, s, dstNode, e, s === min ? dy : -dy);\n  }\n}\n","import { EVENT } from \"../../service/event-bus\";\nimport { type NodeUI } from \"../node/node-ui\";\nimport type { Configuration } from \"../config\";\nimport type { CanvasUI } from \"../canvas-ui\";\nimport type { EdgeRendererName, IEdgeRenderer } from \"./edge-renderer-type\";\nimport type { NodeMoveArg, ViewportEventArg } from \"../../mindwired-event\";\nimport { LineEdgeRenderer } from \"./line-edge-renderer\";\nimport { NaturalCourveEdgeRenderer } from \"./natural-curve-renderer\";\nimport { MustacheLREdgeRenderer } from \"./mustache-lr-renderer\";\nimport { MustacheTBEdgeRenderer } from \"./mustache-tb-renderer\";\n\nconst filterIndex = (edges: Edge[], callback: Function) => {\n  const pos: number[] = [];\n  edges.forEach((e, index) => {\n    if (callback(e)) {\n      pos.push(index);\n    }\n  });\n  return pos;\n};\n\nexport const installDefaultEdgeRenderers = (ctx: EdgeContext) => {\n  ctx.registerEdgeRenderer(new LineEdgeRenderer());\n  ctx.registerEdgeRenderer(new NaturalCourveEdgeRenderer());\n  ctx.registerEdgeRenderer(new MustacheLREdgeRenderer());\n  ctx.registerEdgeRenderer(new MustacheTBEdgeRenderer());\n};\nconst createEdges = (srcNode: NodeUI, edges: Edge[]) => {\n  srcNode.children((child: NodeUI) => {\n    const e = new Edge(srcNode, child);\n    edges.push(e);\n    createEdges(child, edges);\n  });\n};\n\nexport class Edge {\n  srcNode: NodeUI;\n  dstNode: NodeUI;\n  visible: boolean;\n  constructor(srcNode: NodeUI, dstNode: NodeUI) {\n    this.srcNode = srcNode;\n    this.dstNode = dstNode;\n    this.visible = true;\n  }\n  get src() {\n    return this.srcNode;\n  }\n  get dst() {\n    return this.dstNode;\n  }\n  matched(node: NodeUI) {\n    return this.srcNode === node || this.dstNode === node;\n  }\n  matchedDst(node: NodeUI) {\n    return this.dstNode === node;\n  }\n}\nconst updateVisibleState = (\n  edgeUI: EdgeContext,\n  edge: Edge,\n  visible: boolean\n) => {\n  edge.visible = visible;\n  const childEdges = edgeUI.filterEdges(\n    (e: Edge) => e.src === edge.dst && !e.src.isFolded()\n  );\n  childEdges.forEach((edge: Edge) => {\n    updateVisibleState(edgeUI, edge, visible);\n  });\n};\nexport class EdgeContext {\n  config: Configuration;\n  canvas: CanvasUI;\n  private edges: Edge[];\n  private renderers = new Map<EdgeRendererName, IEdgeRenderer>();\n  constructor(config: Configuration, canvas: CanvasUI) {\n    this.config = config;\n    this.canvas = canvas;\n    this.edges = [] as Edge[];\n    this.config\n      .listen(EVENT.VIEWPORT.RESIZED, (_: ViewportEventArg) => {\n        this.repaint();\n      })\n      .listen(EVENT.NODE.MOVED, ({ node, prevParent }: NodeMoveArg) => {\n        this._deleteBetween(prevParent, node);\n        this._addEdge(node.parent!, node);\n        this.repaint();\n      });\n  }\n  listRenderers(): IEdgeRenderer[] {\n    return [...this.renderers.values()];\n  }\n\n  private _addEdge(src: NodeUI, dst: NodeUI) {\n    const e = new Edge(src, dst);\n    this.edges.push(e);\n  }\n  addEdge(src: NodeUI, dst: NodeUI) {\n    this._addEdge(src, dst);\n    this.repaint();\n  }\n  private _deleteBetween(src: NodeUI, dst: NodeUI) {\n    const pos = filterIndex(\n      this.edges,\n      (e: Edge) => e.src === src && e.dst === dst\n    );\n    return pos.reverse().flatMap((index) => this.edges.splice(index, 1));\n  }\n  deleteBetween(src: NodeUI, dst: NodeUI): Edge[] {\n    const deleted = this._deleteBetween(src, dst);\n    if (deleted.length > 0) {\n      this.repaint();\n    }\n    return deleted;\n  }\n  /**\n   * deletes edges matching the nodes\n   * @param nodes\n   */\n  deleteEdges(nodes: NodeUI[]) {\n    let deleted = 0;\n    nodes.forEach((node) => {\n      const pos = filterIndex(this.edges, (e: Edge) => e.matched(nodes[0]));\n      if (pos.length > 0) {\n        pos.reverse().forEach((index) => this.edges.splice(index, 1));\n      }\n      deleted += pos.length;\n    });\n    if (deleted > 0) {\n      this.repaint();\n    }\n  }\n  setRootNode(rootNode: NodeUI) {\n    this.edges = [];\n    createEdges(rootNode, this.edges);\n  }\n  registerEdgeRenderer(render: IEdgeRenderer) {\n    const { name } = render;\n    if (this.renderers.has(name)) {\n      throw new Error(`duplicated edge name: [${name}]`);\n    }\n    this.renderers.set(name, render);\n  }\n  filterEdges(predicate: (e: Edge) => boolean) {\n    return this.edges.filter(predicate);\n  }\n  setEdgeVisible(\n    node: NodeUI,\n    visible: boolean,\n    repaintImmediately: boolean = true\n  ) {\n    const edges = this.filterEdges((edge) => edge.src === node);\n    edges.forEach((edge) => {\n      updateVisibleState(this, edge, visible);\n    });\n    if (repaintImmediately) {\n      this.repaint();\n    }\n  }\n  repaint(clearCanvas = true) {\n    if (clearCanvas) {\n      this.canvas.clear();\n    }\n    this.edges.forEach((e) => {\n      const { src, dst } = e;\n      const style = dst.$style;\n      if (e.visible) {\n        const renderer = this.renderers.get(style.name.toLowerCase());\n        renderer.render(this.canvas, src, dst);\n      }\n    });\n  }\n  dispose() {\n    const { edges } = this;\n    edges.splice(0, edges.length);\n    this.repaint();\n  }\n}\n","/**\n * edge style calculator\n *\n * supported style\n * - name:string\n * - option:object(edge dependant)\n * - color:string(name of color, #aaccss, etc)\n * - width:number(line width)\n */\n\nimport type { LevelBasedEdgeWidth, EdgeSpec } from \"../node/node-type\";\nimport { type NodeUI } from \"../node/node-ui\";\n\n// fix edge style 필요\nconst DEFAULT_EDGE_STYLE: EdgeSpec = {\n  name: \"line\",\n  option: {},\n  color: \"#000000\",\n  width: 1,\n  inherit: true,\n};\nconst traceStyle = <K extends keyof EdgeSpec>(node: NodeUI, prop: K) => {\n  let nodeRef = node;\n  let style = nodeRef.getStyle(\"edge\");\n  while (\n    (!style[prop] || (nodeRef !== node && style.inherit === false)) &&\n    !nodeRef.isRoot()\n  ) {\n    nodeRef = nodeRef.parent;\n    style = nodeRef.getStyle(\"edge\");\n  }\n  return style[prop] || DEFAULT_EDGE_STYLE[prop];\n};\nexport class EdgeStyle {\n  nodeUI: NodeUI;\n  constructor(nodeUI: NodeUI) {\n    this.nodeUI = nodeUI;\n  }\n  get name() {\n    return traceStyle(this.nodeUI, \"name\");\n  }\n  get option() {\n    return traceStyle(this.nodeUI, \"option\");\n  }\n  get color() {\n    return traceStyle(this.nodeUI, \"color\");\n  }\n  get width() {\n    const width = traceStyle(this.nodeUI, \"width\");\n    if (typeof width === \"function\") {\n      return width(this.nodeUI.spec, this.nodeUI.level());\n    } else if (typeof width === \"number\") {\n      return width;\n    } else {\n      const lvlWidth = width as LevelBasedEdgeWidth;\n      return Math.max(\n        lvlWidth.root + lvlWidth.delta * this.nodeUI.level(),\n        lvlWidth.min\n      );\n    }\n  }\n  get dash() {\n    return traceStyle(this.nodeUI, \"dash\");\n  }\n  getEdgeRenderer() {\n    // FIXME - 없어져도 될 듯...\n    return undefined;\n  }\n}\n","const isPrimitive = (o: any): boolean => {\n  const type = typeof o;\n  return \"number,string,boolean,undefined\".includes(type);\n};\nconst isFunction = (o: any): boolean => typeof o === \"function\";\n/**\n * check if obj is null or undefined\n * @param obj\n * @returns\n */\nconst notDefined = (obj: any): boolean => obj === undefined || obj === null;\nconst deepCopy = <T = any>(src: T) => {\n  if (\n    src === undefined ||\n    src === null ||\n    isPrimitive(src) ||\n    isFunction(src)\n  ) {\n    return src;\n  }\n  const dst = (Array.isArray(src) ? [] : {}) as T;\n  Object.keys(src).forEach((prop) => {\n    const value = deepCopy(src[prop]);\n    dst[prop] = value;\n  });\n  return dst;\n};\n/**\n * merge properties of src into dst\n *\n *```javascript\n * src: {color: '#000', padding: {left: 8, right: 8}}\n * dst: {color: '#aaa', padding: {top: 16} }\n *\n * merged dst: {color: '#000', padding: {top: 16, left:8, right: 8}}\n * ```\n * @param {object} src\n * @param {object} dst\n */\nconst mergeLeaf = (src: Record<string, any>, dst: Record<string, any>) => {\n  Object.keys(src).forEach((prop) => {\n    if (notDefined(dst[prop])) {\n      dst[prop] = deepCopy(src[prop]);\n    } else if (isPrimitive(src[prop]) || isFunction(src[prop])) {\n      dst[prop] = src[prop];\n    } else {\n      mergeLeaf(src[prop], dst[prop]);\n    }\n  });\n  return dst;\n};\nexport default {\n  deepCopy,\n  mergeLeaf,\n};\n","export type NodeModelType = \"text\" | \"icon-badge\" | \"thumbnail\" | \"link\";\n/**\n * ```\n * number - same width and height\n * [number, number] - [width, height]\n * ```\n */\nexport type ImageSizeSpec = number | [number, number];\n/**\n *  ```\n *  icon-badge\n *  +------+--------------+\n *  | IMG  |    T E X T   |\n *  +------+--------------+\n *\n *  [configuration]\n *  node: {\n *    model: {\n *      'icon-badge': {\n *        icon: 'https://image.url.value',\n *        text: 'text value'\n *      }\n *    },\n *    view: { ... }\n *  }\n * ```\n *\n */\nexport type IconBadgeSpec = {\n  /**\n   * uril to icon image\n   */\n  icon: string;\n  /**\n   * text\n   */\n  text: string;\n  size?: ImageSizeSpec;\n};\nexport type ThumbnailFillMode = \"contain\" | \"cover\";\nexport type ThumbnailSpec = {\n  path: string;\n  size: ImageSizeSpec;\n  mode: ThumbnailFillMode;\n};\nexport type LinkSpec = { url: string; body: ModelSpec };\nexport type ProviderSpec = { key: any };\nexport type SchemaSpec = {\n  /**\n   * name of schema(must be unique in a map)\n   */\n  name: string;\n  style?: Partial<CSSStyleDeclaration>;\n};\nexport type ModelSpec = {\n  type?: NodeModelType;\n  schema?: string;\n  text?: string;\n  thumbnail?: ThumbnailSpec;\n  \"icon-badge\"?: IconBadgeSpec;\n  link?: LinkSpec;\n  provider?: ProviderSpec;\n};\nimport { Point, WebColorString } from \"../../setting\";\n/**\n * edge width by node's level\n *\n * * root - edge width of root node(level 0)\n * * delta - used to determine edge width by level (root + level * delta)\n * * min - minimal edge width\n *\n * Example\n *\n * ```js\n *   width: { root: 6, detal: -2, min: 1 }\n * ```\n * * root node(level-0): 6px\n * * node at level-1 : 4px;\n * * node at level-2 : 2px;\n * * node at level-3 : 1px;\n * * node at level-4 : 1px;\n */\nexport type LevelBasedEdgeWidth = {\n  root: number;\n  delta: number;\n  min: number;\n};\nexport type EdgeSpec = {\n  name?: string;\n  color?: WebColorString;\n  width?:\n    | number\n    | LevelBasedEdgeWidth\n    | ((node: NodeSpec, level: number) => number);\n  dash?: number[];\n  /**\n   * if true, all descendant nodes use this edge(default: true)\n   */\n  inherit?: boolean;\n  option?: any;\n};\nexport type NodeLayoutType =\n  | \"X-AXIS\"\n  | \"Y-AXIS\"\n  | \"XY-AXIS\"\n  | \"DEFAULT\"\n  | string;\nexport type NodeLayout = {\n  type: NodeLayoutType;\n};\nexport type ViewSpec = {\n  x: number;\n  y: number;\n  layout?: NodeLayout;\n  edge?: EdgeSpec;\n  folding?: boolean;\n  style?: Partial<CSSStyleDeclaration>;\n};\n\nexport type NodeSpec = {\n  root?: boolean;\n  model: ModelSpec;\n  view: ViewSpec;\n  subs?: NodeSpec[];\n};\n\nexport class NodeRect {\n  constructor(readonly center: Point, private _rect: DOMRect) {}\n  get width() {\n    return this._rect.width;\n  }\n  get height() {\n    return this._rect.height;\n  }\n  get left() {\n    return this.center.x - this._rect.width / 2;\n  }\n  get right() {\n    return this.center.x + this._rect.width / 2;\n  }\n  get top() {\n    return this.center.y - this._rect.height / 2;\n  }\n  get bottom() {\n    return this.center.y + this._rect.height / 2;\n  }\n  get cx() {\n    return this.center.x;\n  }\n  get cy() {\n    return this.center.y;\n  }\n  get x() {\n    return this.left;\n  }\n  get y() {\n    return this.top;\n  }\n  get r() {\n    return this.right;\n  }\n  get b() {\n    return this.bottom;\n  }\n  merge(other: NodeRect) {\n    if (this === other) {\n      return this;\n    }\n    const minX = Math.min(this.left, other.left);\n    const minY = Math.min(this.top, other.top);\n    const maxX = Math.max(this.right, other.right);\n    const maxY = Math.max(this.bottom, other.bottom);\n    this.center.x = (maxX + minX) / 2;\n    this.center.y = (maxY + minY) / 2;\n    const width = maxX - minX;\n    const height = maxY - minY;\n    this._rect = new DOMRect(minX, minY, width, height);\n    return this;\n  }\n}\n","import clone from '@/service/clone'\nimport { EVENT } from '../../service/event-bus'\nimport { type Heading, Point, geom } from '../../service/geom'\nimport type { Configuration } from '../config'\nimport { EdgeStyle } from '../edge/edge-style'\nimport {\n\ttype NodeSpec,\n\tModelSpec,\n\tNodeLayout,\n\tNodeRect,\n\tViewSpec,\n} from './node-type'\n\nconst parseSubs = (nodeUi: NodeUI) => {\n\tconst { subs } = nodeUi.spec\n\tif (!subs || subs.length === 0) {\n\t\treturn []\n\t}\n\treturn subs.map(elem => {\n\t\tconst node = new NodeUI(elem, nodeUi.sharedConfig)\n\t\tnode.parent = nodeUi\n\t\treturn node\n\t})\n}\nlet zIndex = 1\n/**\n * A class representing a node in the tree structure.\n */\nexport class NodeUI {\n\tspec: NodeSpec\n\tsharedConfig: Configuration\n\t$el: HTMLElement | undefined\n\tselected: boolean\n\tediting: boolean\n\tuid: string\n\tzIndex: number\n\tsubs: NodeUI[]\n\tparent?: NodeUI\n\t$style: EdgeStyle\n\t// folding: boolean;\n\t$dim: NodeRect\n\tconstructor(\n\t\tspec: NodeSpec,\n\t\tsharedConfig: Configuration,\n\t\tparentNode?: NodeUI\n\t) {\n\t\tthis.spec = spec\n\t\tthis.sharedConfig = sharedConfig\n\t\tthis.$el = undefined\n\t\tthis.selected = false\n\t\tthis.editing = false\n\t\tthis.uid = this.sharedConfig.ui.uuid()\n\t\tthis.zIndex = 0\n\t\tthis.subs = parseSubs(this)\n\t\tthis.parent = parentNode\n\t\tthis.$style = new EdgeStyle(this)\n\t\t// this.folding = false;\n\t\tthis.$dim = undefined\n\t}\n\t/**\n\t * ModelSpec of the node\n\t */\n\tget model() {\n\t\treturn clone.deepCopy(this.spec.model)\n\t}\n\t/**\n\t * ViewSpec of the node\n\t */\n\tget view() {\n\t\tconst view = clone.deepCopy(this.spec.view)\n\t\tdelete view.x\n\t\tdelete view.y\n\t\treturn view\n\t}\n\tget $bodyEl() {\n\t\tconst canvas = this.sharedConfig.getCanvas()\n\t\treturn canvas.getNodeBody(this)\n\t}\n\tget x() {\n\t\treturn this.spec.view.x\n\t}\n\tget y() {\n\t\treturn this.spec.view.y\n\t}\n\t/**\n\t * offset(distance) from the direct parent node\n\t */\n\tget relativeOffset() {\n\t\treturn new Point(this.x, this.y)\n\t}\n\t/**\n\t * returns available NodeLayout.\n\t */\n\tget layout(): NodeLayout {\n\t\tlet { layout } = this.spec.view\n\t\tif (layout) {\n\t\t\treturn { ...layout }\n\t\t} else return this.parent && this.parent.layout\n\t}\n\t/**\n\t * Indicates whether the node is currently active(selected) or not\n\t * @returns {boolean} true if the node is active(selected), otherwise false.\n\t */\n\tget active() {\n\t\treturn !!this.$el\n\t}\n\t/**\n\t * Return child nodes.\n\t * @returns {NodeUI[]} child nodes\n\t */\n\tget childNodes(): NodeUI[] {\n\t\treturn [...this.subs]\n\t}\n\t/**\n\t * Returns whether the node is folded or not.\n\t * @returns {boolean} `true` if the node is folded, otherwise `false`.\n\t */\n\tget folding(): boolean {\n\t\treturn this.spec.view.folding || false\n\t}\n\t/**\n\t * Returns whether the node is ready to use or not.\n\t * @returns {boolean} `true` if the node is ready to use, `false` otherwise.\n\t */\n\tisReady(): boolean {\n\t\treturn !!this.$el\n\t}\n\n\t/**\n\t * Calculate node's position and size.\n\t * @param {boolean} [relative=false] calculate relative position to parent node.\n\t * @returns {NodeRect} position and size of the node.\n\t */\n\tdimension(relative: boolean = false): NodeRect {\n\t\tconst el = this.$bodyEl\n\t\tconst offset = relative ? this.relativeOffset : this.offset()\n\t\treturn (this.$dim = new NodeRect(offset, this.sharedConfig.dom.domRect(el)))\n\t}\n\t/**\n\t * Calculate node's level in the tree structure.\n\t * (Root node's level is 0.)\n\t * @returns {number} node's level.\n\t */\n\tlevel(): number {\n\t\treturn this.isRoot() ? 0 : this.parent!.level() + 1\n\t}\n\tgetStyle<K extends keyof ViewSpec>(type: K) {\n\t\t// type: 'edge', 'node'\n\t\treturn Object.assign({}, this.spec.view[type]) as ViewSpec[K]\n\t}\n\t/**\n\t * check if the node is selected or not.\n\t * @returns {boolean} `true` if selected, `false` otherwise.\n\t */\n\tisSelected(): boolean {\n\t\t// returns `true` if the node is selected, `false` otherwise.\n\t\treturn this.selected\n\t}\n\t/**\n\t * Set the selected state of the node.\n\t * If the node is selected, the z-index is updated and the node is repainted\n\t * @param {boolean} selected - `true` if selected, `false` otherwise.\n\t */\n\tsetSelected(selected: boolean) {\n\t\tthis.selected = selected\n\t\tthis.zIndex = ++zIndex\n\t\t// repaint the node if it's active and selected state changed.\n\t\tif (this.active && this.selected !== selected) {\n\t\t\tthis.repaint()\n\t\t}\n\t}\n\t/**\n\t * Check if this node is a descendant of `dstNode`.\n\t * @param {NodeUI} dstNode - The destination node to check\n\t * @returns {boolean} `true` if this node is a descendant of `dstNode`, `false` otherwise.\n\t */\n\tisDescendantOf(dstNode: NodeUI): boolean {\n\t\t// check if this node is a descendant of `dstNode`\n\t\tlet ref: NodeUI | undefined = this\n\t\twhile (ref) {\n\t\t\tif (ref === dstNode) {\n\t\t\t\treturn true\n\t\t\t} else {\n\t\t\t\tref = ref.parent\n\t\t\t}\n\t\t}\n\t\treturn false\n\t}\n\t/**\n\t * Update the node model with the callback function.\n\t * @param {Function} callback - The callback function to update the node model.\n\t */\n\tupdateModel(callback: (model: ModelSpec) => boolean | undefined) {\n\t\tconst { model } = this.spec\n\t\tif (callback(model)) {\n\t\t\tthis.$dim = null\n\t\t\tthis.sharedConfig.emit(EVENT.NODE.UPDATED, {\n\t\t\t\tnodes: [this],\n\t\t\t\ttype: 'update',\n\t\t\t})\n\t\t}\n\t}\n\tgetHeading(): Heading {\n\t\treturn geom.heading(new Point(this.x, this.y))\n\t}\n\t/**\n\t * absolute offset\n\t * @returns offset from root to this node\n\t */\n\toffset(): Point {\n\t\tlet ref: NodeUI = this\n\t\tconst p = new Point(0, 0)\n\t\twhile (ref) {\n\t\t\tp.x += ref.x\n\t\t\tp.y += ref.y\n\t\t\tref = ref.parent\n\t\t}\n\t\treturn p\n\t}\n\tsetOffset({ x, y }: Point) {\n\t\tif (this.isRoot()) {\n\t\t\treturn\n\t\t}\n\t\tconst poff = this.parent!.offset()\n\t\tthis.setPos(x - poff.x, y - poff.y)\n\t}\n\t/**\n\t * relative pos from the direct parent\n\t * @returns (x, y) from the direct parent\n\t */\n\tgetPos(): Point {\n\t\treturn new Point(this.x, this.y) // { x: this.x, y: this.y };\n\t}\n\t/**\n\t * Sets the position of the node\n\t *\n\t * @param {number} x - The x-coordinate of the position\n\t * @param {number} y - The y-coordinate of the position\n\t * @param {boolean} update - Flag indicating whether to repaint viewport\n\t */\n\tsetPos(x: number, y: number, update: boolean = true) {\n\t\tthis.spec.view.x = x\n\t\tthis.spec.view.y = y\n\t\tif (update) {\n\t\t\tthis.repaint()\n\t\t}\n\t}\n\tisEditingState() {\n\t\treturn this.editing\n\t}\n\t/**\n\t * Set the editing state of the node.\n\t *\n\t * @param {boolean} editing - The new editing state to set\n\t */\n\tsetEditingState(editing: boolean) {\n\t\tthis.editing = editing\n\t\tthis.repaint()\n\t}\n\t/**\n\t * Check if the node is a root node.\n\t *\n\t * @return {boolean} Indicates if the node is a root node.\n\t */\n\tisRoot(): boolean {\n\t\treturn this.spec.root\n\t}\n\t/**\n\t * Check if the node is a leaf node.\n\t *\n\t * @return {boolean} Indicates if the node is a leaf node.\n\t */\n\tisLeaf(): boolean {\n\t\treturn this.subs.length === 0\n\t}\n\n\t/**\n\t * Iterates over the children nodes and invokes a callback function for each child.\n\t *\n\t * @param {(child: NodeUI, parent: NodeUI) => void} callback - callback function to accept child node.\n\t */\n\tchildren(callback: (child: NodeUI, parent: NodeUI) => void) {\n\t\tthis.subs.forEach(child => callback(child, this))\n\t}\n\t/**\n\t * Searches this node and its descendants for the first node that satisfies the provided testing function.\n\t *\n\t * @param {(node: NodeUI) => boolean} predicate - takes a node as an argument and\n\t * returns a boolean indicating whether the node is the one being searched for.\n\t * @return {NodeUI} The first node in the tree that passes the test, or `undefined` if no node passes the test.\n\t */\n\tfind(predicate: (node: NodeUI) => boolean): NodeUI {\n\t\t// predicate 반환 타입이 boolean인지 NodeUI인지 확인필요함.\n\t\tif (predicate(this)) {\n\t\t\treturn this\n\t\t}\n\t\tlet found = undefined\n\t\tfor (let i = 0; i < this.subs.length; i++) {\n\t\t\tif ((found = this.subs[i].find(predicate))) {\n\t\t\t\treturn found\n\t\t\t}\n\t\t}\n\t\treturn undefined\n\t}\n\n\t/**\n\t * Adds a child node to this node.\n\t * If the child node is already a child of another node, it is removed from that node before adding it.\n\t *\n\t * @param childUI Child node to be added to this node.\n\t * @return The previous parent of the child node, or `null` if it didn't have a parent before.\n\t */\n\taddChild(childUI: NodeUI): NodeUI | null {\n\t\tconst prevParent = childUI.parent\n\t\tif (prevParent && prevParent !== this) {\n\t\t\tprevParent.removeChild(childUI)\n\t\t}\n\n\t\tchildUI.parent = this\n\t\tthis.subs.push(childUI)\n\n\t\tconst canvasUI = this.sharedConfig.getCanvas()\n\t\tcanvasUI.moveNode(childUI)\n\n\t\treturn prevParent\n\t}\n\t/**\n\t * Removes a child node from this node.\n\t *\n\t * @param childUI Child node to be removed from this node.\n\t * @return The node that was removed, or `null` if the given node is not a child of this node.\n\t */\n\tremoveChild(childUI: NodeUI): NodeUI | null {\n\t\tif (childUI.parent !== this) {\n\t\t\t// not a child node\n\t\t\treturn null\n\t\t}\n\t\tconst pos = this.subs.findIndex(node => node.uid === childUI.uid)\n\t\tif (pos === -1) {\n\t\t\t// not a child node\n\t\t\treturn null\n\t\t}\n\t\tconst deletedNodes = this.subs.splice(pos, 1)\n\t\tdeletedNodes.forEach(node => (node.parent = undefined)) // clear ref to parent(this)\n\t\treturn deletedNodes[0]\n\t}\n\t/**\n\t * Get the first child node of this node.\n\t * @return The first child node, or `undefined` if this node has no children.\n\t */\n\tfirstChild(): NodeUI | undefined {\n\t\treturn this.subs[0]\n\t}\n\t/**\n\t * Get the last child node of this node.\n\t * @return The last child node, or `undefined` if this node has no children.\n\t */\n\tlastChild(): NodeUI | undefined {\n\t\t// returns the last child node of this node, or undefined if no children\n\t\tif (this.subs.length === 0) {\n\t\t\treturn undefined\n\t\t}\n\t\treturn this.subs[this.subs.length - 1]\n\t}\n\t/**\n\t * change folding state\n\t * @param folding if true, children of this node are hidden, else visible\n\t * @returns true if folding state is changed, false if not changed\n\t */\n\tsetFolding(folding: boolean) {\n\t\tif (this.folding === folding) {\n\t\t\treturn false\n\t\t}\n\t\t// this.folding = folding;\n\t\tif (folding) {\n\t\t\tthis.spec.view.folding = true\n\t\t} else {\n\t\t\tdelete this.spec.view.folding\n\t\t}\n\t\tthis.repaint()\n\t\treturn true\n\t}\n\t/**\n\t * check if the node is folded(children hidden) or not\n\t * @return true if the node is folded, false if not folded\n\t */\n\tisFolded() {\n\t\treturn this.folding\n\t}\n\trepaint() {\n\t\tconst canvasUI = this.sharedConfig.getCanvas()\n\t\tcanvasUI.drawNode(this)\n\t}\n\tstatic build(spec: NodeSpec, config: Configuration) {\n\t\tspec.root = true\n\t\treturn new NodeUI(spec, config)\n\t}\n}\n","/**\n * Default layout manager\n * It does nothing, keeping all nodes in their position.\n */\n\nimport { type NodeLayoutContext } from \"..\";\nimport { type NodeUI } from \"../../node/node-ui\";\nimport { INodeLayoutManager } from \"../node-layout-manager\";\n\nexport class DefaultNodeLayout implements INodeLayoutManager {\n  constructor(readonly layoutContext: NodeLayoutContext) {}\n  get name() {\n    return \"DEFAULT\";\n  }\n  doLayout(nodeUI: NodeUI) {}\n  setPosition() {}\n}\n","import type { PositionParam, LayoutParam, NodeLayoutContext } from \"..\";\nimport { type NodeUI } from \"../../node/node-ui\";\nimport { type INodeLayoutManager } from \"../node-layout-manager\";\n\n/**\n *\n */\nexport class XAxisNodeLayout implements INodeLayoutManager {\n  constructor(readonly layoutContext: NodeLayoutContext) {}\n  get name() {\n    return \"X-AXIS\";\n  }\n  /**\n   * reflective layout manager relative to parent\n   *\n   */\n  private _reverseXPos(node: NodeUI, context: LayoutParam) {\n    const { x, y } = node;\n    node.setPos(-x, y);\n    const manager = this.layoutContext.getLayoutManager(node.layout);\n    manager.doLayout(node, context);\n  }\n  doLayout = (nodeUI: NodeUI, context: LayoutParam) => {\n    const { dir } = context;\n    if (!dir) {\n      return;\n    }\n    if (dir.updated(\"LR\") || dir.updated(\"RL\")) {\n      nodeUI.children((childUI: NodeUI) => {\n        this._reverseXPos(childUI, context);\n      });\n    }\n  };\n  setPosition = (nodeUI: NodeUI, context: PositionParam) => {\n    const { baseNode } = context;\n    const heading = baseNode\n      ? baseNode.getHeading()\n      : nodeUI.parent.getHeading();\n    const rightSide = heading.cwy <= 180;\n    let x = 0;\n    let y = 0;\n    let halfWidth = nodeUI.dimension(true).width / 2;\n    if (baseNode) {\n      const rect = baseNode.dimension(true);\n      if (rightSide) {\n        x = rect.left + halfWidth;\n      } else {\n        x = rect.right - halfWidth;\n      }\n      y = rect.bottom + 20;\n    } else {\n      const rect = nodeUI.parent.dimension(true);\n      const offset = context.offset + halfWidth;\n      if (rightSide) {\n        x = rect.width / 2 + offset;\n      } else {\n        x = -rect.width / 2 - offset;\n      }\n    }\n\n    // const { baseNode, rect } = context;\n\n    nodeUI.setPos(x, y);\n  };\n}\n","import type { LayoutParam, NodeLayoutContext, PositionParam } from \"..\";\nimport { type NodeUI } from \"../../node/node-ui\";\nimport { INodeLayoutManager } from \"../node-layout-manager\";\n\nexport class YAxisNodeLayout implements INodeLayoutManager {\n  constructor(readonly layoutContext: NodeLayoutContext) {}\n  get name() {\n    return \"Y-AXIS\";\n  }\n  /**\n   * reflective layout manager relative to parent\n   *\n   */\n  _reverseYPos(node: NodeUI, context: LayoutParam) {\n    const { x, y } = node;\n    node.setPos(x, -y);\n    const manager = this.layoutContext.getLayoutManager(node.layout);\n    manager.doLayout(node, context);\n  }\n  doLayout = (nodeUI: NodeUI, context: LayoutParam) => {\n    const { dir } = context;\n    if (!dir) {\n      return;\n    }\n    if (dir.updated(\"TB\") || dir.updated(\"BT\")) {\n      nodeUI.children((childUI: NodeUI) => {\n        this._reverseYPos(childUI, context);\n      });\n    }\n  };\n  setPosition = (nodeUI: NodeUI, context: PositionParam) => {\n    const { baseNode } = context;\n    const heading = baseNode\n      ? baseNode.getHeading()\n      : nodeUI.parent.getHeading();\n    const topSide = heading.ccwx <= 180;\n    let x = 0;\n    let y = 0;\n    const nodeRect = nodeUI.dimension(true);\n    let halfHeight = nodeRect.height / 2;\n    if (baseNode) {\n      const rect = baseNode.dimension(true);\n      x = rect.cx + (rect.width + nodeRect.width + context.offset) / 2;\n      if (topSide) {\n        y = rect.bottom - halfHeight;\n      } else {\n        y = rect.top + halfHeight;\n      }\n    } else {\n      const rect = nodeUI.parent.dimension(true);\n      const offset = context.offset + halfHeight;\n      x = 0;\n      if (topSide) {\n        y = -rect.height / 2 - offset;\n      } else {\n        y = rect.height / 2 + offset;\n      }\n    }\n    nodeUI.setPos(x, y);\n  };\n}\n","import type { LayoutParam, NodeLayoutContext, PositionParam } from \"..\";\nimport { type NodeUI } from \"../../node/node-ui\";\nimport { INodeLayoutManager } from \"../node-layout-manager\";\n// import xLayout from \"./axis-x-layout\";\n// import yLayout from \"./axis-y-layout\";\n\nexport class XYAxisNodeLayout implements INodeLayoutManager {\n  constructor(readonly layoutContext: NodeLayoutContext) {}\n  get name() {\n    return \"XY-AXIS\";\n  }\n  doLayout(nodeUI: NodeUI, context: LayoutParam) {\n    const { dir } = context;\n    if (!dir) {\n      return;\n    }\n    const xLayout = this.layoutContext.getLayoutManager({ type: \"X-AXIS\" });\n    xLayout.doLayout(nodeUI, context);\n    const yLayout = this.layoutContext.getLayoutManager({ type: \"Y-AXIS\" });\n    yLayout.doLayout(nodeUI, context);\n  }\n  setPosition = (nodeUI: NodeUI, context: PositionParam) => {\n    const xLayout = this.layoutContext.getLayoutManager({ type: \"X-AXIS\" });\n    xLayout.setPosition(nodeUI, context);\n  };\n}\n","import { DefaultNodeLayout } from \"./node/default-layout\";\nimport { XAxisNodeLayout } from \"./node/axis-x-layout\";\nimport { YAxisNodeLayout } from \"./node/axis-y-layout\";\nimport { XYAxisNodeLayout } from \"./node/axis-xy-layout\";\nimport type { NodeUI } from \"../node/node-ui\";\nimport type { NodeLayoutType, NodeLayout } from \"../node/node-type\";\nimport { INodeLayoutManager } from \"./node-layout-manager\";\nimport type { Direction } from \"../direction\";\nimport type { Configuration } from \"../config\";\n\nexport type { INodeLayoutManager };\nexport type LayoutParam = { dir: Direction };\nexport type PositionParam = { baseNode: NodeUI; offset: number };\nexport class NodeLayoutContext {\n  private _layoutMap = new Map<NodeLayoutType, INodeLayoutManager>();\n  constructor(readonly config: Configuration) {}\n  get canvas() {\n    return this.config.getCanvas();\n  }\n  registerLayoutManager(layout: INodeLayoutManager) {\n    this._layoutMap.set(layout.name, layout);\n  }\n  getLayoutManager(layout: NodeLayout): INodeLayoutManager {\n    const layoutName = layout ? layout.type : \"DEFAULT\";\n    return this._layoutMap.get(layoutName);\n  }\n  setPosition(nodeUI: NodeUI, context: PositionParam) {\n    const { layout } = nodeUI;\n    const manager = this.getLayoutManager(layout);\n    manager.setPosition(nodeUI, context);\n  }\n  layout(nodeUI: NodeUI, context: LayoutParam) {\n    const { layout } = nodeUI;\n    const manager = this.getLayoutManager(layout);\n    manager.doLayout(nodeUI, context);\n  }\n  listLayoutManagers(): INodeLayoutManager[] {\n    return [...this._layoutMap.values()];\n  }\n}\n\nexport const installDefaultLayoutManagers = (ctx: NodeLayoutContext) => {\n  ctx.registerLayoutManager(new DefaultNodeLayout(ctx));\n  ctx.registerLayoutManager(new XAxisNodeLayout(ctx));\n  ctx.registerLayoutManager(new YAxisNodeLayout(ctx));\n  ctx.registerLayoutManager(new XYAxisNodeLayout(ctx));\n};\n","import { INodeEditor, UserDefinedEditor } from \"..\";\nimport { NodeEditingContext } from \"../node-editing-context\";\nimport type { ModelSpec } from \"../node-type\";\n\nexport class NodeEditingDelegate<T> implements INodeEditor {\n  constructor(\n    readonly ctx: NodeEditingContext,\n    readonly delegate: UserDefinedEditor<T>\n  ) {}\n  get name() {\n    return this.delegate.name;\n  }\n  private _pickRenderer(): INodeEditor {\n    const { ctx } = this;\n    const { text, iconBadge, thumbnail } = this.delegate;\n    let name: string = \"text\";\n    if (text) {\n      name = \"text\";\n    } else if (iconBadge) {\n      name = \"icon-badge\";\n    } else if (thumbnail) {\n      name = \"thumbnail\";\n    }\n    return ctx.getEditor(name);\n  }\n\n  showEditor(model: ModelSpec, parentEl: HTMLElement): HTMLElement {\n    const editor = this._pickRenderer();\n    return editor.showEditor(model, parentEl);\n  }\n}\n","import { INodeEditor } from \"..\";\nimport type { NodeEditingContext } from \"../node-editing-context\";\nimport type { ModelSpec } from \"../node-type\";\n\nconst template = {\n  editor: `<div class=\"mwd-node-editor thumbnail-editor\">\n    <div><input type=\"text\" data-icon></div>\n    <div><textarea data-text></textarea></div>\n    <div><button data-close>CLOSE</button></div>\n</div>`,\n};\nexport class IconBadgeEditor implements INodeEditor {\n  constructor(readonly ctx: NodeEditingContext) {}\n  get name() {\n    return \"icon-badge\";\n  }\n  showEditor(model: ModelSpec, parentEl: HTMLElement): HTMLElement {\n    const { dom } = this.ctx.config;\n\n    const iconBadge = model[\"icon-badge\"];\n    const $editor = this.ctx.parse(template.editor);\n    {\n      const $icon = dom.findOne<HTMLInputElement>($editor, \"[data-icon]\");\n      $icon.value = iconBadge.icon;\n      dom.event.input(\n        $icon,\n        (e) => {\n          const path = (e.target as HTMLTextAreaElement).value.trim();\n          this.ctx.updateModel(() => {\n            iconBadge.icon = path;\n            return false;\n          });\n        },\n        { debouce: 500 }\n      );\n    }\n\n    {\n      const $textarea = dom.findOne(\n        $editor,\n        \"[data-text]\"\n      ) as HTMLTextAreaElement;\n      $textarea.value = iconBadge.text;\n      dom.event.input(\n        $textarea,\n        (e) => {\n          const text = (e.target as HTMLTextAreaElement).value.trim();\n          this.ctx.updateModel(() => {\n            iconBadge.text = text;\n            return false;\n          });\n        },\n        { debouce: 500 }\n      );\n    }\n    {\n      const $close = dom.findOne($editor, \"[data-close]\");\n      dom.event.click($close, () => {\n        this.ctx.close();\n      });\n    }\n    parentEl.appendChild($editor);\n    return $editor;\n  }\n}\n","import { INodeEditor } from \"..\";\nimport type { NodeEditingContext } from \"../node-editing-context\";\nimport type { ModelSpec } from \"../node-type\";\n\nconst template = {\n  editor: `<div class=\"mwd-node-editor link-editor\">\n    <div><input type=\"text\" data-url></div>\n    <div><input type=\"text\" data-body></div>\n    <div><button data-submit>UPDATE</button></div>\n</div>`,\n};\n\nexport class LinkEditor implements INodeEditor {\n  constructor(readonly ctx: NodeEditingContext) {}\n  get name() {\n    return \"link\";\n  }\n  showEditor(model: ModelSpec, parentEl: HTMLElement): HTMLElement {\n    const { dom } = this.ctx.config;\n    const $editor = this.ctx.parse(template.editor);\n    const $url = dom.findOne($editor, \"[data-url]\") as HTMLInputElement;\n    const $body = dom.findOne($editor, \"[data-body]\") as HTMLInputElement;\n    {\n      const { url, body } = model.link;\n      $url.value = url;\n      $body.value = body.text || url;\n    }\n    parentEl.appendChild($editor);\n    dom.event.click($editor, (e) => {\n      const target = e.target as HTMLElement;\n      if (dom.is(target, \"[data-submit]\")) {\n        this.ctx.updateModel((model) => {\n          const { link } = model;\n          link.url = $url.value;\n          link.body.text = $body.value;\n          return true;\n        });\n      }\n    });\n    return $editor;\n  }\n}\n","import { INodeEditor } from \"..\";\nimport { type NodeEditingContext } from \"../node-editing-context\";\nimport { type ModelSpec } from \"../node-type\";\n\nconst template = {\n  editor: `<div class=\"mwd-node-editor plain-text-editbox\">\n  <textarea value=\"\"></textarea>\n  <button data-cmd=\"save\" data-submit>SAVE</button>\n</div>`,\n};\nexport class PlainTextEditor implements INodeEditor {\n  get name() {\n    return \"text\";\n  }\n  constructor(readonly ctx: NodeEditingContext) {}\n  showEditor(model: ModelSpec, parentEl: HTMLElement): HTMLElement {\n    const { dom } = this.ctx.config;\n    const $editorEl = this.ctx.parse(template.editor);\n    const textArea = this.ctx.query(\n      $editorEl,\n      \"textarea\"\n    ) as HTMLTextAreaElement;\n\n    textArea.value = model.text;\n    dom.css(textArea, { width: 120, height: 40 });\n    dom.event.click($editorEl, (e) => {\n      if ((e.target as HTMLElement).dataset.cmd === \"save\") {\n        this.ctx.updateModel((model: ModelSpec) => {\n          model.text = textArea.value.trim();\n          return true;\n        });\n      }\n    });\n    parentEl.append($editorEl);\n    return $editorEl;\n  }\n}\n","import { INodeEditor } from \"..\";\nimport type { NodeEditingContext } from \"../node-editing-context\";\nimport { ThumbnailFillMode, type ModelSpec } from \"../node-type\";\n\nconst template = {\n  editor: `\n  <div class=\"mwd-node-editor thumnail-editor\">\n    <div class=\"inline-mwd-form\">\n      <input type=\"text\" data-form-size>\n    </div>\n    <div class=\"mode\">\n      <label><input type=\"radio\" name=\"mode\" data-mode=\"cover\">Cover</label>\n      <label><input type=\"radio\" name=\"mode\" data-mode=\"contain\">Contain</label>\n    </div>\n    <div class=\"path-form\">\n        <textarea></textarea>\n    </div>\n    <div class=\"\"><button data-close>CLOSE</button></div>\n  </div>`,\n};\nexport class ThumbnailEditor implements INodeEditor {\n  constructor(readonly ctx: NodeEditingContext) {}\n  get name() {\n    return \"thumbnail\";\n  }\n  showEditor(model: ModelSpec, parentEl: HTMLElement): HTMLElement {\n    if (!model.thumbnail) {\n      throw new Error(\"EDITOR_ERROR:not a thumbnail node\");\n    }\n    const { dom } = this.ctx.config;\n    const { mode, path } = model.thumbnail;\n\n    const $editorEl = this.ctx.parse(template.editor);\n    const $inputEl = this.ctx.query<HTMLInputElement>($editorEl, \"input\");\n\n    $inputEl.value = `${model.thumbnail.size}`;\n    dom.event.input(\n      $inputEl,\n      (e) => {\n        const value = (e.target as HTMLInputElement).value.trim();\n        dom.valid.number(value).then((num) => {\n          this.ctx.updateModel((model) => {\n            model.thumbnail.size = num;\n            return false;\n          });\n        });\n      },\n      { debouce: 500 }\n    );\n    const $mode = this.ctx.query<HTMLInputElement>(\n      $editorEl,\n      `[data-mode=\"${mode}\"]`\n    );\n    $mode.checked = true;\n\n    dom.event.change($editorEl, (e) => {\n      const { mode } = (e.target as HTMLElement).dataset;\n      if (mode) {\n        this.ctx.updateModel((model: ModelSpec) => {\n          model.thumbnail.mode = mode as ThumbnailFillMode;\n          return false;\n        });\n      }\n    });\n    const $textArea = this.ctx.query<HTMLTextAreaElement>(\n      $editorEl,\n      \"textarea\"\n    );\n    $textArea.value = path;\n    dom.event.input(\n      $textArea,\n      (e) => {\n        const url = (e.target as HTMLTextAreaElement).value.trim();\n        dom.valid.path(url).then((url) => {\n          this.ctx.updateModel((model: ModelSpec) => {\n            model.thumbnail.path = url;\n            return false;\n          });\n        });\n      },\n      { debouce: 500 }\n    );\n    const $close = this.ctx.query<HTMLButtonElement>($editorEl, \"[data-close]\");\n    dom.event.click($close, () => {\n      this.ctx.close();\n    });\n    parentEl.appendChild($editorEl);\n    return $editorEl;\n  }\n}\n","import { INodeEditor, type UserDefinedEditor } from '.'\nimport { NodeEventArg, ViewportEventArg } from '../../mindwired-event'\nimport { EVENT } from '../../service/event-bus'\nimport type { CanvasUI } from '../canvas-ui'\nimport type { DataSourceFactory } from '../datasource'\nimport { NodeEditingDelegate } from './editor/editor-delegate'\nimport { IconBadgeEditor } from './editor/icon-badge-editor'\nimport { LinkEditor } from './editor/link-editor'\nimport { PlainTextEditor } from './editor/plain-text-editor'\nimport { ThumbnailEditor } from './editor/thumbnail-editor'\nimport { ImageSizeSpec, ModelSpec } from './node-type'\nimport type { NodeUI } from './node-ui'\n\nexport const installDefaultEditors = (ctx: NodeEditingContext) => {\n\tctx.registerEditor(new PlainTextEditor(ctx))\n\tctx.registerEditor(new IconBadgeEditor(ctx))\n\tctx.registerEditor(new ThumbnailEditor(ctx))\n\tctx.registerEditor(new LinkEditor(ctx))\n}\nexport class NodeEditingContext {\n\tdispose() {\n\t\tthis.node = undefined\n\t}\n\t/**\n\t * current editing node\n\t */\n\tnode: NodeUI | undefined\n\tprivate _editorMap = new Map<string, INodeEditor>()\n\tconstructor(\n\t\treadonly canvas: CanvasUI,\n\t\treadonly datasourceFactory: DataSourceFactory\n\t) {\n\t\tthis.node = undefined\n\t\tthis.config.listen(EVENT.VIEWPORT.CLICKED, (_: ViewportEventArg) => {\n\t\t\tthis.close()\n\t\t})\n\t\tthis.config.listen(EVENT.NODE.SELECTED, ({ nodes }: NodeEventArg) => {\n\t\t\tif (this.node !== nodes[0]) {\n\t\t\t\tthis.close()\n\t\t\t}\n\t\t})\n\t}\n\tget config() {\n\t\treturn this.canvas.config\n\t}\n\tisEditing() {\n\t\treturn !!this.node\n\t}\n\tregisterEditor(editor: INodeEditor) {\n\t\tthis._editorMap.set(editor.name, editor)\n\t}\n\tregisterCustomEditor<T>(delegate: UserDefinedEditor<T>) {\n\t\tconst customEditor = new NodeEditingDelegate(this, delegate)\n\t\tthis.registerEditor(customEditor)\n\t}\n\tgetEditor(editorName: string) {\n\t\treturn this._editorMap.get(editorName)\n\t}\n\tedit(nodeUI: NodeUI) {\n\t\tif (this.node) {\n\t\t\tthis.close()\n\t\t}\n\t\tlet name: string = undefined\n\t\tconst { model } = nodeUI\n\t\tif (model.text) {\n\t\t\tname = 'text'\n\t\t} else if (model['icon-badge']) {\n\t\t\tname = 'icon-badge'\n\t\t} else if (model.thumbnail) {\n\t\t\tname = 'thumbnail'\n\t\t} else if (model.link) {\n\t\t\tname = 'link'\n\t\t} else if (model.provider) {\n\t\t\tconst ds = this.datasourceFactory.findDataSourceByKey(model.provider.key)\n\t\t\tif (ds) {\n\t\t\t\tname = this.datasourceFactory.getEditorName(ds.id)\n\t\t\t}\n\t\t}\n\t\tconst editor = this._editorMap.get(name)\n\t\tif (editor) {\n\t\t\tthis.node = nodeUI\n\t\t\tthis.node.setEditingState(true)\n\t\t\tthis.canvas.showNodeEditor(this.node, editor)\n\t\t}\n\n\t\t// this.datasourceFactory.findDataSourceByData()\n\t}\n\tparse(htmlTemplate: string) {\n\t\t// FIXME rendering context와 코드 중복\n\t\treturn this.config.dom.parseTemplate(htmlTemplate)\n\t}\n\tquery<T extends HTMLElement>(el: HTMLElement, cssSelector: string): T {\n\t\treturn this.config.dom.findOne(el, cssSelector) as T\n\t}\n\tqueryAll<T extends HTMLElement>(el: HTMLElement, cssSelector: string): T[] {\n\t\treturn this.config.dom.findAll<T>(el, [cssSelector])\n\t}\n\tupdateModel(callback: (model: ModelSpec) => boolean) {\n\t\tlet closing = false\n\t\tthis.node.updateModel(model => {\n\t\t\tclosing = callback(model)\n\t\t\treturn true\n\t\t})\n\t\tif (closing) {\n\t\t\tthis.close()\n\t\t}\n\t}\n\tclose() {\n\t\tif (this.node) {\n\t\t\tthis.node.setEditingState(false)\n\t\t\tthis.canvas.hideNodeEditor(this.node)\n\t\t}\n\t\tthis.node = undefined\n\t}\n\tnormalizeImageSize(size: ImageSizeSpec): { width: string; height: string } {\n\t\tlet width: string\n\t\tlet height: string\n\t\tif (Array.isArray(size)) {\n\t\t\tconst [w, h] = size\n\t\t\twidth = `${w}px`\n\t\t\theight = h === undefined ? 'auto' : `${h}px`\n\t\t} else if (typeof size === 'number') {\n\t\t\twidth = height = `${size}px`\n\t\t} else {\n\t\t\twidth = height = 'auto'\n\t\t}\n\t\treturn { width, height }\n\t}\n}\n","import { ISnapLineResolver } from \"./snap-target-resolver\";\n\nexport class CompositeSnapResolver implements ISnapLineResolver {\n  constructor(readonly resolvers: ISnapLineResolver[]) {}\n  resolveLines(hLines: Set<number>, vLines: Set<number>): void {\n    this.resolvers.forEach((resolver) => {\n      resolver.resolveLines(hLines, vLines);\n    });\n  }\n}\n","import type { CanvasUI } from \"@/components/canvas-ui\";\nimport { ISnapLineResolver } from \"./snap-target-resolver\";\nimport type { NodeUI } from \"@/components/node\";\n\nconst captureSnapLines = (\n  nodes: NodeUI[],\n  node: NodeUI,\n  hSnaps: Set<number>,\n  vSnaps: Set<number>,\n  canvas: CanvasUI\n) => {\n  if (nodes.includes(node)) {\n    return;\n  }\n  const dim = canvas.getNodeDimension(node);\n  // top, center, bottom\n  hSnaps.add(dim.y);\n  hSnaps.add(dim.cy);\n  hSnaps.add(dim.b);\n  // left, center, right\n  vSnaps.add(dim.x);\n  vSnaps.add(dim.cx);\n  vSnaps.add(dim.r);\n  if (node.isFolded()) {\n    return;\n  }\n  node.subs.forEach((child) => {\n    captureSnapLines(nodes, child, hSnaps, vSnaps, canvas);\n  });\n};\n\n/**\n * It captures snap lines from all nodes(except the starting nodes and their descendants)\n */\nexport class DefaultTargetResolver implements ISnapLineResolver {\n  constructor(\n    private startingNode: NodeUI,\n    private nodes: NodeUI[],\n    private readonly canvas: CanvasUI\n  ) {}\n  resolveLines(hLines: Set<number>, vLines: Set<number>): void {\n    captureSnapLines(\n      this.nodes,\n      this.startingNode,\n      hLines,\n      vLines,\n      this.canvas\n    );\n  }\n}\n","import type { NodeUI } from \"@/components/node\";\nimport { ISnapLineResolver } from \"./snap-target-resolver\";\nimport type { CanvasUI } from \"@/components/canvas-ui\";\n\nconst walkUpward = (\n  node: NodeUI,\n  distance: number,\n  hLines: Set<number>,\n  vLines: Set<number>,\n  canvas: CanvasUI,\n  visited: NodeUI[]\n) => {\n  if (node === undefined) {\n    // called from root node\n    return;\n  }\n  if (visited.includes(node)) {\n    return;\n  }\n  if (distance === 0) {\n    return;\n  }\n  const dim = canvas.getNodeDimension(node);\n  // top, center, bottom\n  hLines.add(dim.y);\n  hLines.add(dim.cy);\n  hLines.add(dim.b);\n  // left, center, right\n  vLines.add(dim.x);\n  vLines.add(dim.cx);\n  vLines.add(dim.r);\n  walkUpward(node.parent, distance - 1, hLines, vLines, canvas, visited);\n  if (node.isFolded()) {\n    return;\n  }\n  node.subs.forEach((child) => {\n    walkDownward(child, distance - 1, hLines, vLines, canvas, visited);\n  });\n};\nconst walkDownward = (\n  node: NodeUI,\n  distance: number,\n  hLines: Set<number>,\n  vLines: Set<number>,\n  canvas: CanvasUI,\n  visited: NodeUI[]\n) => {\n  if (visited.includes(node)) {\n    return;\n  }\n  if (distance === 0) {\n    return;\n  }\n  const dim = canvas.getNodeDimension(node);\n  // top, center, bottom\n  hLines.add(dim.y);\n  hLines.add(dim.cy);\n  hLines.add(dim.b);\n  // left, center, right\n  vLines.add(dim.x);\n  vLines.add(dim.cx);\n  vLines.add(dim.r);\n  if (node.isFolded()) {\n    return;\n  }\n  node.subs.forEach((child) => {\n    walkDownward(child, distance - 1, hLines, vLines, canvas, visited);\n  });\n};\n/**\n * Distance based snap line resolver\n *\n * ```\n * [configuration]\n *   ui: {\n *     snap: {\n *       enabled: true,\n *       target: [{ distance: 2 }],\n *     }\n *   }\n * ```\n * Setting `{distance: 2}` searchs snap lines from nodes within the distance 2(except the starting nodes and their descendants).\n */\nexport class DistanceBasedSnapResolver implements ISnapLineResolver {\n  constructor(\n    readonly staringNodes: NodeUI[],\n    readonly canvas: CanvasUI,\n    readonly distance: number\n  ) {}\n  resolveLines(hLines: Set<number>, vLines: Set<number>): void {\n    const visited: NodeUI[] = [...this.staringNodes];\n    this.staringNodes.forEach((node) => {\n      walkUpward(\n        node.parent,\n        this.distance,\n        hLines,\n        vLines,\n        this.canvas,\n        visited\n      );\n    });\n  }\n}\n","import { SnapToEntitySetting, UISetting } from \"../../setting\";\nimport type { Configuration } from \"../config\";\nimport type { NodeUI } from \"../node/node-ui\";\nimport { CompositeSnapResolver } from \"./snap/composite-snap-resolver\";\nimport { DefaultTargetResolver } from \"./snap/default-snap-resolver\";\nimport { DistanceBasedSnapResolver } from \"./snap/distance-snap-resolver\";\nimport { ISnapLineResolver } from \"./snap/snap-target-resolver\";\n\nconst abs = (a: number) => Math.abs(a);\nconst captureNearest = (\n  lines: number[],\n  value: number,\n  min: { idx: number; gap: number },\n  limit: number\n) => {\n  for (let k = 0; k < lines.length; k++) {\n    const b = lines[k] - value;\n    const vb = abs(b);\n    if (vb > limit) {\n      continue;\n    }\n    if (vb < abs(min.gap)) {\n      min.idx = k;\n      min.gap = b;\n    }\n  }\n};\nconst lineStyling = (\n  ctx: CanvasRenderingContext2D,\n  ui: UISetting,\n  dir: \"horizontal\" | \"vertical\"\n) => {\n  const snap = ui.snap as SnapToEntitySetting;\n  ctx.strokeStyle = snap.color[dir];\n  ctx.lineWidth = snap.width || 0.4;\n  if (snap.dash) {\n    ctx.setLineDash(snap.dash);\n  }\n};\nexport class AlignmentContext {\n  activeNodes: NodeUI[];\n  snaps: { hLines: Set<number>; vLines: Set<number> };\n  constructor(readonly config: Configuration) {}\n  private _resolveSnapTarget(rootNode: NodeUI): ISnapLineResolver {\n    const { snap } = this.config.ui;\n    if (snap === false) {\n      return undefined;\n    }\n    const setting = snap as SnapToEntitySetting;\n    if (setting.enabled === false) {\n      return undefined;\n    }\n    const { target } = setting;\n    const canvas = this.config.getCanvas();\n    if (target === undefined || target.length === 0) {\n      return new DefaultTargetResolver(rootNode, [...this.activeNodes], canvas);\n    }\n    const resolvers = target\n      .map((rule) => {\n        if (rule.distance) {\n          return new DistanceBasedSnapResolver(\n            this.activeNodes,\n            canvas,\n            rule.distance\n          );\n        } else {\n          return undefined;\n        }\n      })\n      .filter((resolver) => resolver !== undefined);\n    return new CompositeSnapResolver(resolvers);\n  }\n  turnOn(rootNode: NodeUI, nodes: NodeUI[]) {\n    if (!nodes || nodes.length === 0 || !this.config.snapEnabled) {\n      return;\n    }\n    this.activeNodes = [...nodes];\n    const snapTargetResolver = this._resolveSnapTarget(rootNode);\n    if (snapTargetResolver === undefined) {\n      return;\n    }\n    const vLines = new Set<number>(); // [x in (x,0), (x,H)]\n    const hLines = new Set<number>(); // [y in (0,y), (W,y)]\n\n    snapTargetResolver.resolveLines(hLines, vLines);\n    this.snaps = { hLines, vLines };\n  }\n  turnOff() {\n    this.snaps = null;\n    this.activeNodes = undefined;\n  }\n  doAlign() {\n    if (!this.snaps) {\n      return;\n    }\n    const { snapSetting } = this.config;\n    const limit = snapSetting.limit;\n    const canvas = this.config.getCanvas();\n    canvas.clear();\n\n    const dim = canvas.getAbsoluteDimensions(this.activeNodes);\n    const vLines = [...this.snaps.vLines.values()].filter(\n      (x) =>\n        Math.abs(dim.x - x) <= limit ||\n        Math.abs(dim.r - x) <= limit ||\n        Math.abs(dim.cx - x) <= limit\n    );\n    const hLines = [...this.snaps.hLines.values()].filter(\n      (y) =>\n        Math.abs(dim.y - y) <= limit ||\n        Math.abs(dim.b - y) <= limit ||\n        Math.abs(dim.cy - y) <= limit\n    );\n\n    const delta = { x: 0, y: 0 };\n    if (vLines.length > 0) {\n      const min = { idx: 0, gap: vLines[0] - dim.cx };\n      captureNearest(vLines, dim.cx, min, limit);\n      captureNearest(vLines, dim.x, min, limit);\n      captureNearest(vLines, dim.r, min, limit);\n      delta.x = min.gap;\n      canvas.drawVLines([vLines[min.idx]], (ctx) =>\n        lineStyling(ctx, this.config.ui, \"vertical\")\n      );\n    }\n\n    if (hLines.length > 0) {\n      const min = { idx: 0, gap: hLines[0] - dim.cy };\n      captureNearest(hLines, dim.cy, min, limit);\n      captureNearest(hLines, dim.y, min, limit);\n      captureNearest(hLines, dim.b, min, limit);\n      delta.y = min.gap;\n\n      canvas.drawHLines([hLines[min.idx]], (ctx) =>\n        lineStyling(ctx, this.config.ui, \"horizontal\")\n      );\n    }\n\n    this.activeNodes.forEach((each) => {\n      const off = each.offset();\n      off.x += delta.x;\n      off.y += delta.y;\n      each.setOffset(off);\n    });\n  }\n}\n","//@ts-nocheck\nimport clone from \"../../service/clone\";\nimport { Configuration } from \"../config\";\n\nconst NO_OP = (_) => _;\nconst buildTree = (dataSource, dataSet, parentSet) => {\n  const nodeConfigs = dataSet.toNodeConfigs(parentSet, dataSource);\n  const childSets = dataSource.childSetOf(dataSet.name);\n  childSets.forEach((childSet) => {\n    buildTree(dataSource, childSet, dataSet);\n  });\n  return nodeConfigs;\n};\n/**\n * datasource for tree structure\n */\nclass DataSet {\n  name: any;\n  userDataList: any;\n  parentType: any;\n  callbacks: any;\n  constructor(name, userDataList, parentType, callbacks) {\n    this.name = name;\n    this.userDataList = userDataList;\n    this.parentType = parentType;\n    this.callbacks = callbacks;\n  }\n  toNodeConfigs(parentSet, dataSource) {\n    let relation = parentSet ? this.callbacks.relation : null;\n    return this.userDataList.map((userData, index) => {\n      const config: Configuration = { userData, subs: [] };\n      const { model } = this.callbacks;\n      config.model =\n        typeof model === \"function\" ? model(userData) : clone.deepCopy(model);\n\n      if (relation) {\n        const parent = relation(userData, parentSet.userDataList);\n        const parentConfig = dataSource.$ref.get(parent);\n        config.idx = parentConfig.subs.length;\n        parentConfig.subs.push(config);\n      }\n      const { view } = this.callbacks;\n      if (typeof view === \"function\") {\n        config.view = view(userData, config.idx);\n      } else if (typeof view === \"object\") {\n        config.view = clone.deepCopy(view);\n      } else {\n        config.view = { x: 0, y: 0 };\n      }\n      // config.view =\n      //   typeof view === \"function\"\n      //     ? view(userData, config.idx)\n      //     : { x: 0, y: 0 };\n      // how to determine config.view = {x, y}\n      // config.view = {x:0, y:0}\n      dataSource.$ref.set(userData, config);\n      return config;\n    });\n  }\n}\nexport default class TreeDataSource {\n  dataSets: Map<any, any>;\n  rootType: null;\n  $ref: Map<any, any>;\n  constructor() {\n    this.dataSets = new Map();\n    this.rootType = null;\n    this.$ref = new Map(); // [{userData, nodeConfig}]\n  }\n  root(dataType, userData, option) {\n    const dataList = [];\n    if (!option) {\n      option = userData;\n      dataList.push({});\n    } else {\n      dataList.push(userData);\n    }\n    const virtualRoot = !option.virtual;\n    this.rootType = dataType;\n    option.relation = NO_OP;\n    return this.dataSet(dataType, dataList, option);\n  }\n  childSetOf(parentType) {\n    return [...this.dataSets.values()].filter(\n      (dset) => dset.parentType === parentType\n    );\n  }\n  dataSet(dataType, userDataList, option) {\n    const callbacks = {};\n    callbacks.relation = option.relation || NO_OP;\n    callbacks.model = option.model || NO_OP;\n    callbacks.view = option.view;\n    const type = dataType.trim();\n    if (this.dataSets.has(type)) {\n      throw new Error(`[MIND WIRED] existing data type: [${dataType}]`);\n    }\n    const dataSet = new DataSet(type, userDataList, option.parent, callbacks);\n    this.dataSets.set(type, dataSet);\n    return this;\n  }\n  build() {\n    const rootSet = this.dataSets.get(this.rootType);\n    const rootDataSet = buildTree(this, rootSet);\n    return rootDataSet[0];\n  }\n}\n","import { type Heading } from \"../service/geom\";\nimport { type NodeUI } from \"./node/node-ui\";\n/**\n * direction flow relative to parent node\n * * LR: moved from left to right\n * * RL: moved from right to left\n * * TB: moved from top to bottom\n * * BT: moved from bottom to top\n */\nexport type DirectionFlow = \"LR\" | \"RL\" | \"TB\" | \"BT\";\nexport class Direction {\n  node: NodeUI;\n  private prev: Heading;\n  // fixme NodeUI 타입\n  constructor(nodeUI: NodeUI) {\n    this.node = nodeUI;\n    this.prev = undefined;\n    this.capture();\n  }\n  get horizontal() {\n    const { x } = this.node;\n    return x <= 0 ? -1 : 1;\n  }\n  get vertical() {\n    const { y } = this.node;\n    return y <= 0 ? -1 : 1;\n  }\n  updated(format: DirectionFlow) {\n    const cur = this.node.getHeading();\n    if (format === \"LR\") {\n      return this.prev.cwy > 180 && cur.cwy <= 180;\n    } else if (format === \"RL\") {\n      return this.prev.cwy <= 180 && cur.cwy > 180;\n    } else if (format === \"TB\") {\n      return this.prev.ccwx <= 180 && cur.ccwx > 180;\n    } else if (format === \"BT\") {\n      return this.prev.ccwx > 180 && cur.ccwx <= 180;\n    } else {\n      throw new Error(\n        `[${format}] is not allowed. use 'LR' | 'RL' | 'TB' | 'BT'`\n      );\n    }\n  }\n  capture() {\n    this.prev = this.node.getHeading();\n  }\n}\n","import { type Point } from \"../service/geom\";\nimport { Direction } from \"./direction\";\nimport { type NodeUI } from \"./node/node-ui\";\n\nconst capturePos = (posMap: Map<NodeUI, Point>, nodeUI: NodeUI) => {\n  posMap.set(nodeUI, nodeUI.getPos());\n  nodeUI.subs.forEach((childUI) => capturePos(posMap, childUI));\n};\n\nexport class Capture {\n  readonly pos: Point;\n  readonly dir: Direction;\n  constructor(readonly node: NodeUI) {\n    this.dir = new Direction(node);\n    this.pos = node.getPos();\n  }\n}\nexport class DragContext {\n  readonly capture = new Map<NodeUI, Capture>();\n  readonly posMap = new Map<NodeUI, Point>();\n  constructor() {}\n  prepareCaptures(nodes: NodeUI[]) {\n    this.clear();\n    nodes\n      .filter((node) => !node.isRoot())\n      .forEach((node) => {\n        this.capture.set(node, new Capture(node));\n        capturePos(this.posMap, node);\n      });\n  }\n  eachCapture(callback: (capture: Capture) => void) {\n    for (let capture of this.capture.values()) {\n      callback(capture);\n    }\n  }\n  getUpdatedNodes() {\n    let updated = [] as NodeUI[];\n    this.posMap.forEach((pos, nodeUI) => {\n      if (pos.x !== nodeUI.x || pos.y !== nodeUI.y) {\n        updated.push(nodeUI);\n      }\n    });\n    return updated;\n  }\n  clear() {\n    this.capture.clear();\n    this.posMap.clear();\n  }\n}\n","export const uuid = (len: number = 16) => {\n  let id = \"\";\n  while (id.length < len) {\n    id += Math.random().toString(36).substring(2);\n  }\n  return id.substring(0, len);\n};\n","import {\n  INodeRenderer,\n  NodeState,\n  type NodeUI,\n  type UserDefinedRenderer,\n} from \"..\";\nimport type { NodeRenderingContext } from \"../node-rendering-context\";\nimport type { ModelSpec, NodeModelType } from \"../node-type\";\n\nexport class RenderingDelegate<T> implements INodeRenderer {\n  constructor(\n    readonly name: string,\n    readonly renderingContext: NodeRenderingContext,\n    readonly delegate: UserDefinedRenderer<T>\n  ) {}\n  private _pickRenderer(): INodeRenderer {\n    const ctx = this.renderingContext;\n    const { text, iconBadge, thumbnail, link } = this.delegate;\n    let name: NodeModelType = \"text\";\n    if (text) {\n      name = \"text\";\n    } else if (iconBadge) {\n      name = \"icon-badge\";\n    } else if (thumbnail) {\n      name = \"thumbnail\";\n    } else if (link) {\n      name = \"link\";\n    }\n    return ctx.getRenderer(name);\n  }\n  install(model: ModelSpec, parentEl: HTMLElement): void {\n    const renderer = this._pickRenderer();\n    renderer.install(model, parentEl);\n  }\n  render(model: ModelSpec, parentEl: HTMLElement, state: NodeState): void {\n    const renderer = this._pickRenderer();\n    renderer.render(model, parentEl, state);\n  }\n  editor?(node: NodeUI): void {\n    throw new Error(\"Method not implemented.\");\n  }\n}\n","import { ModelSpec } from \"../node-type\";\nimport { NodeRenderingContext } from \"../node-rendering-context\";\nimport { INodeRenderer } from \"..\";\n\nconst template = {\n  text: '<span class=\"mwd-node-text\"></span>',\n  editor: `<div class=\"mwd-node-editor plain-text-editbox\">\n    <textarea value=\"\"></textarea>\n    <button data-cmd=\"save\">SAVE</button>\n  </div>`,\n};\nexport class PlainTextRenderer implements INodeRenderer {\n  ctx: NodeRenderingContext;\n  constructor(renderingContext: NodeRenderingContext) {\n    this.ctx = renderingContext;\n  }\n  install(model: ModelSpec, bodyEl: HTMLElement) {\n    // const bodyEl = this.ctx.getNodeBody(nodeUI);\n    const $titleEl = this.ctx.parse(template.text);\n    bodyEl.append($titleEl);\n  }\n  render(model: ModelSpec, bodyEl: HTMLElement) {\n    const $titleEl = this.ctx.query(bodyEl, \".mwd-node-text\");\n    // const { model } = nodeUI;\n    const lines = model.text\n      .split(\"\\n\")\n      .map((text) => `<p>${text}</p>`)\n      .join(\"\");\n    $titleEl.innerHTML = lines;\n  }\n  get name() {\n    return \"text\";\n  }\n}\n","import { type ModelSpec } from \"../node-type\";\nimport { NodeRenderingContext } from \"../node-rendering-context\";\nimport { type INodeRenderer } from \"..\";\n\nconst template = {\n  viewer: `<div class=\"icon-badge-node\">\n    <img>\n    <span class=\"mwd-node-text\"></span>\n  </div>`,\n  editor: `<div class=\"\"></div>`,\n};\n/**\n *  ```\n *  icon-badge renderer\n *  +------+--------------+\n *  | IMG  |    T E X T   |\n *  +------+--------------+\n *\n *  [configuration]\n *  node: {\n *    model: {\n *      type: 'icon-badge',\n *      'icon-badge': {\n *        icon: 'https://image.url.value',\n *        text: 'text value'\n *      }\n *    },\n *    view: { ... }\n *  }\n * ```\n *\n */\nexport class IconBadgeRenderer implements INodeRenderer {\n  ctx: NodeRenderingContext;\n  constructor(renderingContext: NodeRenderingContext) {\n    this.ctx = renderingContext;\n  }\n  get name() {\n    return \"icon-badge\";\n  }\n  install(model: ModelSpec, parentEl: HTMLElement) {\n    const $iconBadgeEl = this.ctx.parse(template.viewer);\n    parentEl.append($iconBadgeEl);\n  }\n  render(model: ModelSpec, parentEl: HTMLElement) {\n    // const { model } = nodeUI;\n    const { icon, text } = model[\"icon-badge\"];\n    const $img = this.ctx.query<HTMLImageElement>(parentEl, \"img\");\n    $img.src = icon;\n    const $span = this.ctx.query(parentEl, \".mwd-node-text\");\n    $span.innerText = text;\n  }\n}\n","import { type ModelSpec } from \"../node-type\";\nimport { type NodeRenderingContext } from \"../node-rendering-context\";\nimport { type INodeRenderer } from \"..\";\n\nconst template = {\n  viewer: `<div class=\"mwd-thumbnail-node\"></div>`,\n};\n/**\n * ```\n * [configuration]\n * node: {\n *   model: {\n *     type: 'thumnail',\n *     thunmail: {\n *       path: 'https://image.url.value',\n *       size: 40,\n *     }\n *   }\n * }\n * ```\n */\nexport class ThumbnailRenderer implements INodeRenderer {\n  ctx: NodeRenderingContext;\n  constructor(renderingContext: NodeRenderingContext) {\n    this.ctx = renderingContext;\n  }\n  get name() {\n    return \"thumbnail\";\n  }\n  install(model: ModelSpec, bodyEl: HTMLElement) {\n    // const bodyEl = this.ctx.getNodeBody(nodeUI);\n    const $thumnailEl = this.ctx.parse(template.viewer);\n    bodyEl.append($thumnailEl);\n  }\n  render(model: ModelSpec, bodyEl: HTMLElement) {\n    const $el = this.ctx.query(bodyEl, \".mwd-thumbnail-node\");\n    // const $img = this.ctx.query<HTMLImageElement>($el, \"img\");\n    const { size, mode } = model.thumbnail;\n    const { width, height } = this.ctx.normalizeImageSize(size);\n\n    this.ctx.css($el, {\n      \"background-image\": `url(\"${model.thumbnail.path}\")`,\n      \"background-size\": mode || \"cover\",\n      width,\n      height,\n    });\n    $el.classList.add(\"cover\");\n  }\n}\n","import { type NodeRenderingContext } from \"../node-rendering-context\";\nimport { NodeState, type INodeRenderer } from \"..\";\nimport type { PlainTextRenderer } from \"./plain-text-renderer\";\nimport type { ModelSpec } from \"../node-type\";\n\nconst template = {\n  link: `\n  <div class=\"mwd-link-node\">\n    <a data-url data-mwd-link></a>\n    <span data-mwd-link-opener><a target=\"_\" data-mwd-link></a></span>\n  </div>`,\n};\n\nexport class LinkRenderer implements INodeRenderer {\n  constructor(readonly ctx: NodeRenderingContext) {}\n  get name() {\n    return \"link\";\n  }\n  install(model: ModelSpec, parentEl: HTMLElement) {\n    const linkEl = this.ctx.parse(template.link) as HTMLAnchorElement;\n    const { body } = model[\"link\"];\n    const renderer = this.ctx.getRenderer(body.type || \"text\");\n\n    const anchorEl = this.ctx.query(linkEl, \"a\");\n    renderer.install(model, anchorEl);\n    parentEl.append(linkEl);\n  }\n  render(model: ModelSpec, parentEl: HTMLElement, state: NodeState) {\n    // const { model } = nodeUI;\n    const { url, body } = model[\"link\"];\n    const $a = this.ctx.query<HTMLAnchorElement>(parentEl, \"a\");\n    $a.dataset.url = url;\n    {\n      const $opener = this.ctx.query<HTMLSpanElement>(\n        parentEl,\n        \"[data-mwd-link-opener]\"\n      );\n      if (state.selected) {\n        $opener.classList.add(\"visible\");\n      } else {\n        $opener.classList.remove(\"visible\");\n      }\n      const $anchor = this.ctx.query<HTMLAnchorElement>($opener, \"a\");\n      $anchor.href = url;\n      $anchor.textContent = url;\n    }\n    const renderer = this.ctx.getRenderer(\n      body.type || \"text\"\n    ) as PlainTextRenderer;\n    renderer.render(body, $a);\n  }\n}\n","import { uuid } from \"../../service/uuid\";\nimport { type CanvasUI } from \"../canvas-ui\";\nimport { type NodeUI } from \"./node-ui\";\nimport { INodeRenderer, UserDefinedRenderer } from \".\";\nimport { RenderingDelegate } from \"./renderer/renderer-delegate\";\nimport { ImageSizeSpec, ModelSpec } from \"./node-type\";\nimport { type DataSourceFactory } from \"../datasource\";\nimport { PlainTextRenderer } from \"./renderer/plain-text-renderer\";\nimport { IconBadgeRenderer } from \"./renderer/icon-badge-renderer\";\nimport { ThumbnailRenderer } from \"./renderer/thumbnail-renderer\";\nimport { LinkRenderer } from \"./renderer/link-renderer\";\n\nconst renderings = new Map<string, Map<string, INodeRenderer>>();\n\nexport const installDefaultRenderers = (ctx: NodeRenderingContext) => {\n  ctx.register(new PlainTextRenderer(ctx));\n  ctx.register(new IconBadgeRenderer(ctx));\n  ctx.register(new ThumbnailRenderer(ctx));\n  ctx.register(new LinkRenderer(ctx));\n  return ctx;\n};\nexport class NodeRenderingContext {\n  editingNode?: NodeUI;\n  canvas: CanvasUI;\n  uid: string;\n  constructor(\n    canvasUI: CanvasUI,\n    readonly datasourceFactory: DataSourceFactory\n  ) {\n    this.canvas = canvasUI;\n    this.uid = `node-rctx-${uuid()}`;\n    renderings.set(this.uid, new Map());\n    this.editingNode = null;\n  }\n  get event() {\n    return this.canvas.dom.event;\n  }\n  get valid() {\n    return this.canvas.dom.valid;\n  }\n  parse(htmlTemplate: string, fitToCenter: boolean = false) {\n    const { dom } = this.canvas;\n    const $el = dom.parseTemplate(htmlTemplate);\n    if (fitToCenter) {\n      dom.css($el, {\n        position: \"absolute\",\n        top: \"50%\",\n        left: \"50%\",\n        transform: \"translate(-50%, -50%)\",\n      });\n    }\n    return $el;\n  }\n  register(renderer: INodeRenderer) {\n    renderings.get(this.uid).set(renderer.name, renderer);\n  }\n  registerCustomRender<T>(renderer: UserDefinedRenderer<T>) {\n    const customRenderer = new RenderingDelegate(renderer.name, this, renderer);\n    this.register(customRenderer);\n  }\n  getRendererByModel(model: ModelSpec) {\n    let name: string = undefined;\n\n    if (model.text) {\n      name = \"text\";\n    } else if (model.thumbnail) {\n      name = \"thumbnail\";\n    } else if (model[\"icon-badge\"]) {\n      name = \"icon-badge\";\n    } else if (model.link) {\n      name = \"link\";\n    } else if (model.provider) {\n      const ds = this.datasourceFactory.findDataSourceByKey(model.provider.key);\n      if (ds) {\n        name = this.datasourceFactory.getRendererName(ds.id);\n      }\n    }\n    const renderer = renderings.get(this.uid).get(name);\n    if (!renderer) {\n      throw new Error(\n        `no match node renderer found for ModelSpec: ${JSON.stringify(model)}`\n      );\n    }\n    return renderer;\n  }\n  getRenderer(redererName: string) {\n    const renderer = renderings.get(this.uid).get(redererName || \"text\");\n    if (!renderer) {\n      throw new Error(`[No Renderer] no such renderer, (type:${redererName})`);\n    }\n    return renderer;\n  }\n  listRenderers() {\n    return [...renderings.get(this.uid).values()];\n  }\n  select(nodeUI: NodeUI, cssSelector: string) {\n    return nodeUI.$bodyEl.querySelector(cssSelector) as HTMLElement;\n  }\n  css(el, styles) {\n    this.canvas.dom.css(el, styles);\n  }\n  query<T extends HTMLElement>(el: HTMLElement, cssSelector: string): T {\n    return this.canvas.dom.findOne(el, cssSelector) as T;\n  }\n  normalizeImageSize(size: ImageSizeSpec): { width: string; height: string } {\n    let width: string;\n    let height: string;\n    if (Array.isArray(size)) {\n      const [w, h] = size;\n      width = `${w}px`;\n      height = h === undefined ? \"auto\" : `${h}px`;\n    } else if (typeof size === \"number\") {\n      width = height = `${size}px`;\n    } else {\n      width = height = \"auto\";\n    }\n    return { width, height };\n  }\n  dispose() {\n    this.editingNode = undefined;\n  }\n}\n","import type { ModelSpec } from \"../node/node-type\";\nimport { EVENT } from \"../../service/event-bus\";\nimport type { Configuration } from \"../config\";\nimport type { MindWired } from \"../mind-wired\";\nimport type { NodeUI } from \"../node/node-ui\";\nimport type { NodeSelectArg } from \"../../mindwired-event\";\nimport clone from \"@/service/clone\";\nconst clearSelection = (nodeMap: Map<string, NodeUI>) => {\n  const nodes = [...nodeMap.values()];\n  nodes.forEach((node) => {\n    node.setSelected(false);\n  });\n  nodeMap.clear();\n  return nodes;\n};\nconst skipStateForInsert = (nodes: NodeUI[]) => {\n  if (nodes.length !== 1) {\n    return true;\n  }\n  if (nodes[0].isEditingState()) {\n    return true;\n  }\n  return false;\n};\n\nconst skipStateForDelete = (nodes: NodeUI[]) => {\n  if (nodes.length === 0) {\n    return true;\n  }\n  // root node cannot be deleted\n  const rootNode = nodes.find((node) => node.isRoot());\n  return !!rootNode;\n};\nconst appendNode = (\n  model: NodeSelectionModel,\n  parent: NodeUI,\n  sibling: NodeUI\n) => {\n  const mwd: MindWired = model.config.mindWired();\n  let modelSpec: ModelSpec = sibling\n    ? clone.deepCopy(sibling.spec.model)\n    : ({ text: \"Text Node\" } as ModelSpec);\n\n  mwd.addNode(\n    parent,\n    {\n      model: modelSpec,\n      view: undefined,\n    },\n    { siblingNode: sibling }\n  );\n};\nconst deleteNodes = (selectionModel, nodesToDel) => {\n  const mwd = selectionModel.config.mindWired();\n  mwd.deleteNodes(nodesToDel);\n};\nconst notifySelection = (model: NodeSelectionModel, append: boolean) => {\n  const { config } = model;\n  const nodes = model.getNodes();\n  setTimeout(() =>\n    config.emit(EVENT.NODE.SELECTED.CLIENT, {\n      nodes,\n      append,\n      type: \"select\",\n    })\n  );\n};\nexport class NodeSelectionModel {\n  config: Configuration;\n  /**\n   * selected nodes<uid, NodeUI>\n   *\n   * @template key - uid of node\n   * @template value - NodeUI instance\n   */\n  nodeMap: Map<string, NodeUI>;\n  constructor(config: Configuration) {\n    this.config = config;\n    this.nodeMap = new Map(); // [uid:strng, NodeUI]\n\n    const canvasUI = this.config.getCanvas();\n    this.config.listen(\n      EVENT.NODE.SELECTED,\n      ({ nodes, append }: NodeSelectArg) => {\n        this.selectNodes(nodes, append, true);\n      }\n    );\n    this.config.listen(EVENT.VIEWPORT.CLICKED, () => {\n      this.clearSelection();\n    });\n\n    const { dom } = this.config;\n    dom.event.keyup(canvasUI.$viewport, (e) => {\n      if (this.isEmpty()) {\n        return;\n      }\n      const { code } = e as KeyboardEvent;\n      const [nodeUI] = [...this.nodeMap.values()];\n      const editing = nodeUI.isEditingState();\n      if (\"Space\" === code && !editing) {\n        e.stopPropagation();\n        canvasUI.clearNodeSelection();\n        this.config.emit(EVENT.NODE.EDITING, { editing: true, node: nodeUI });\n      } else if (\"Escape\" === code) {\n        this.config.emit(EVENT.NODE.EDITING, { editing: false, node: nodeUI });\n      }\n    });\n    dom.event.keydown(\n      canvasUI.$viewport,\n      (e) => {\n        const nodes = this.getNodes();\n        if (skipStateForInsert(nodes)) {\n          return;\n        }\n        e.stopPropagation();\n        e.stopImmediatePropagation();\n        appendNode(this, nodes[0].parent, nodes[0]);\n      },\n      \"enter\"\n    );\n    dom.event.keydown(\n      canvasUI.$viewport,\n      (e) => {\n        const nodes = this.getNodes();\n        if (skipStateForInsert(nodes)) {\n          return;\n        }\n        e.stopPropagation();\n        e.stopImmediatePropagation();\n        appendNode(this, nodes[0], nodes[0].lastChild());\n      },\n      \"shift@enter\"\n    );\n\n    dom.event.keydown(\n      canvasUI.$viewport,\n      (e) => {\n        const nodes = this.getNodes();\n        if (skipStateForDelete(nodes)) {\n          return;\n        }\n        e.stopPropagation();\n        e.stopImmediatePropagation();\n        deleteNodes(this, nodes);\n        clearSelection(this.nodeMap);\n        notifySelection(this, false);\n      },\n      \"delete\"\n    );\n  }\n  /**\n   * set the state of nodes 'selected'\n   * @param nodes nodes to select\n   * @param append if true, keep current selection state, otherwise reset selection state with the nodes\n   * @returns\n   */\n  selectNodes(\n    nodes: NodeUI[],\n    append: boolean,\n    propagateEvent: boolean = false\n  ) {\n    const nodesToSelect: NodeUI[] = nodes.filter(\n      (node) => !this.nodeMap.has(node.uid)\n    );\n    if (nodesToSelect.length === 0) {\n      return nodesToSelect;\n    }\n    if (!append) {\n      clearSelection(this.nodeMap);\n    }\n    nodesToSelect.forEach((node) => {\n      this.nodeMap.set(node.uid, node);\n      node.setSelected(true);\n    });\n    if (propagateEvent) {\n      notifySelection(this, append);\n    }\n    return nodesToSelect;\n  }\n  isEmpty() {\n    return this.nodeMap.size === 0;\n  }\n  getNodes() {\n    return [...this.nodeMap.values()];\n  }\n  clearSelection() {\n    const nodes = clearSelection(this.nodeMap);\n    if (nodes.length > 0) {\n      this.config.getCanvas().clearNodeSelection();\n      notifySelection(this, false);\n    }\n    return nodes;\n  }\n}\n","import { UserDefinedEditor, UserDefinedRenderer } from \"../node\";\n\nexport type KeyExtractor<T, K> = (item: T) => K;\n\nexport type DatasourceOptionalParam<T> = {\n  renderer?: UserDefinedRenderer<T>;\n  editor?: UserDefinedEditor<T>;\n};\n/**\n * @template T - type of user data, which is rendered as node\n * @template K - type of key for each data T\n */\nexport class BaseDataSource<T, K> {\n  private readonly _items: T[] = [];\n  private readonly _itemMap = new Map<K, T>();\n  /**\n   *\n   * @param id unique identifier for datasource\n   * @param keyOf extracts key from each item(user data)\n   */\n  constructor(readonly id: string, readonly keyOf: KeyExtractor<T, K>) {}\n  getData(key: K) {\n    return this._itemMap.get(key);\n  }\n  /**\n   *\n   * @param items user data to use\n   */\n  setData(items: T[]) {\n    items.forEach((item) => {\n      const key = this.keyOf(item);\n      const existing = this._itemMap.get(key);\n      if (existing) {\n        throw new Error(\n          `duplicated item found: key[${key}], value is ${existing}`\n        );\n      }\n      this._itemMap.set(key, item);\n    });\n    this._items.push(...items);\n  }\n  containsData(data: T) {\n    const key = this.keyOf(data);\n    return this.containsKey(key);\n  }\n  containsKey(key: K) {\n    return this._itemMap.has(key);\n  }\n}\n/**\n * Placeholder for all datasources\n */\nexport class DataSourceFactory {\n  private readonly _dsMap = new Map<string, BaseDataSource<any, any>>();\n  /**\n   * mapping datasource(key) to node render(value)\n   * @key datasource id\n   * @value name of custom node renderer\n   */\n  private _dsToRendererMap = new Map<string, string>();\n  /**\n   * mapping datasource(key) to node editor(value)\n   * @key datasource id\n   * @value name of custom node editor\n   */\n  private _dsToEditorMap = new Map<string, string>();\n  constructor() {}\n  /**\n   * creates new datasource\n   *\n   * @template T type of items in the datasource\n   * @template K type of key for each items(default: 'string')\n   * @param datasourceId unique identifier for datasource\n   * @returns new datasource\n   */\n  createDataSource<T, K>(\n    datasourceId: string,\n    keyExtractor: KeyExtractor<T, K>\n  ): BaseDataSource<T, K> {\n    if (this._dsMap.has(datasourceId)) {\n      throw new Error(`duplicated datasource id: [${datasourceId}]`);\n    }\n    const ds = new BaseDataSource<T, K>(datasourceId, keyExtractor);\n    this._dsMap.set(datasourceId, ds);\n    return ds;\n  }\n  /**\n   *\n   * @template T type of items in the datasource\n   * @template K type of key for each items(default: 'string')\n   * @param dataSourceId unique identifier for datasource\n   * @returns datasource\n   */\n  getDataSource<T = any, K = string>(dataSourceId: string) {\n    return this._dsMap.get(dataSourceId) as BaseDataSource<T, K>;\n  }\n  bindRendererMapping(ds: BaseDataSource<any, any>, rendererName: string) {\n    this._dsToRendererMap.set(ds.id, rendererName);\n  }\n  getRendererName(dataSourceId: string) {\n    return this._dsToRendererMap.get(dataSourceId);\n  }\n  bindEditorMapping(ds: BaseDataSource<any, any>, editorName: string) {\n    this._dsToEditorMap.set(ds.id, editorName);\n  }\n  getEditorName(dataSourceId: string) {\n    return this._dsToEditorMap.get(dataSourceId);\n  }\n  findDataSourceByData<T, K>(data: T) {\n    return this._findBy((ds) => ds.containsData(data));\n  }\n  findDataSourceByKey(key: string) {\n    return this._findBy((ds) => ds.containsKey(key));\n  }\n  private _findBy<T, K>(predicate: (ds: BaseDataSource<T, K>) => boolean) {\n    const dataSources = [...this._dsMap.values()] as BaseDataSource<T, K>[];\n    for (let k = 0; k < dataSources.length; k++) {\n      const ds = dataSources[k];\n      if (predicate(ds)) {\n        return ds;\n      }\n    }\n    return undefined;\n  }\n  findData<K>(key: K) {\n    const ds = this._findBy<any, any>((ds) => ds.containsKey(key));\n    return ds.getData(key);\n  }\n  clear() {\n    this._dsToRendererMap.clear();\n    this._dsToEditorMap.clear();\n    this._dsMap.clear();\n  }\n}\n","import { type Subscriber, type Writable } from \"svelte/store\";\nconst dummy: () => void = () => {};\nconst updateStore = <T>(store: Writable<T>, callback: (state: T) => void) => {\n  store.update((state) => {\n    callback(state);\n    return state;\n  });\n};\n\nexport abstract class MindWiredStore<T> {\n  protected abstract store: Writable<T>;\n  constructor() {}\n  subscribe(callback: Subscriber<T>) {\n    return this.store.subscribe(callback);\n  }\n  update(callback?: (state: T) => void) {\n    updateStore(this.store, callback || dummy);\n  }\n}\n","/** @returns {void} */\nexport function noop() {}\n\nexport const identity = (x) => x;\n\n/**\n * @template T\n * @template S\n * @param {T} tar\n * @param {S} src\n * @returns {T & S}\n */\nexport function assign(tar, src) {\n\t// @ts-ignore\n\tfor (const k in src) tar[k] = src[k];\n\treturn /** @type {T & S} */ (tar);\n}\n\n// Adapted from https://github.com/then/is-promise/blob/master/index.js\n// Distributed under MIT License https://github.com/then/is-promise/blob/master/LICENSE\n/**\n * @param {any} value\n * @returns {value is PromiseLike<any>}\n */\nexport function is_promise(value) {\n\treturn (\n\t\t!!value &&\n\t\t(typeof value === 'object' || typeof value === 'function') &&\n\t\ttypeof (/** @type {any} */ (value).then) === 'function'\n\t);\n}\n\n/** @returns {void} */\nexport function add_location(element, file, line, column, char) {\n\telement.__svelte_meta = {\n\t\tloc: { file, line, column, char }\n\t};\n}\n\nexport function run(fn) {\n\treturn fn();\n}\n\nexport function blank_object() {\n\treturn Object.create(null);\n}\n\n/**\n * @param {Function[]} fns\n * @returns {void}\n */\nexport function run_all(fns) {\n\tfns.forEach(run);\n}\n\n/**\n * @param {any} thing\n * @returns {thing is Function}\n */\nexport function is_function(thing) {\n\treturn typeof thing === 'function';\n}\n\n/** @returns {boolean} */\nexport function safe_not_equal(a, b) {\n\treturn a != a ? b == b : a !== b || (a && typeof a === 'object') || typeof a === 'function';\n}\n\nlet src_url_equal_anchor;\n\n/**\n * @param {string} element_src\n * @param {string} url\n * @returns {boolean}\n */\nexport function src_url_equal(element_src, url) {\n\tif (element_src === url) return true;\n\tif (!src_url_equal_anchor) {\n\t\tsrc_url_equal_anchor = document.createElement('a');\n\t}\n\t// This is actually faster than doing URL(..).href\n\tsrc_url_equal_anchor.href = url;\n\treturn element_src === src_url_equal_anchor.href;\n}\n\n/** @param {string} srcset */\nfunction split_srcset(srcset) {\n\treturn srcset.split(',').map((src) => src.trim().split(' ').filter(Boolean));\n}\n\n/**\n * @param {HTMLSourceElement | HTMLImageElement} element_srcset\n * @param {string | undefined | null} srcset\n * @returns {boolean}\n */\nexport function srcset_url_equal(element_srcset, srcset) {\n\tconst element_urls = split_srcset(element_srcset.srcset);\n\tconst urls = split_srcset(srcset || '');\n\n\treturn (\n\t\turls.length === element_urls.length &&\n\t\turls.every(\n\t\t\t([url, width], i) =>\n\t\t\t\twidth === element_urls[i][1] &&\n\t\t\t\t// We need to test both ways because Vite will create an a full URL with\n\t\t\t\t// `new URL(asset, import.meta.url).href` for the client when `base: './'`, and the\n\t\t\t\t// relative URLs inside srcset are not automatically resolved to absolute URLs by\n\t\t\t\t// browsers (in contrast to img.src). This means both SSR and DOM code could\n\t\t\t\t// contain relative or absolute URLs.\n\t\t\t\t(src_url_equal(element_urls[i][0], url) || src_url_equal(url, element_urls[i][0]))\n\t\t)\n\t);\n}\n\n/** @returns {boolean} */\nexport function not_equal(a, b) {\n\treturn a != a ? b == b : a !== b;\n}\n\n/** @returns {boolean} */\nexport function is_empty(obj) {\n\treturn Object.keys(obj).length === 0;\n}\n\n/** @returns {void} */\nexport function validate_store(store, name) {\n\tif (store != null && typeof store.subscribe !== 'function') {\n\t\tthrow new Error(`'${name}' is not a store with a 'subscribe' method`);\n\t}\n}\n\nexport function subscribe(store, ...callbacks) {\n\tif (store == null) {\n\t\tfor (const callback of callbacks) {\n\t\t\tcallback(undefined);\n\t\t}\n\t\treturn noop;\n\t}\n\tconst unsub = store.subscribe(...callbacks);\n\treturn unsub.unsubscribe ? () => unsub.unsubscribe() : unsub;\n}\n\n/**\n * Get the current value from a store by subscribing and immediately unsubscribing.\n *\n * https://svelte.dev/docs/svelte-store#get\n * @template T\n * @param {import('../store/public.js').Readable<T>} store\n * @returns {T}\n */\nexport function get_store_value(store) {\n\tlet value;\n\tsubscribe(store, (_) => (value = _))();\n\treturn value;\n}\n\n/** @returns {void} */\nexport function component_subscribe(component, store, callback) {\n\tcomponent.$$.on_destroy.push(subscribe(store, callback));\n}\n\nexport function create_slot(definition, ctx, $$scope, fn) {\n\tif (definition) {\n\t\tconst slot_ctx = get_slot_context(definition, ctx, $$scope, fn);\n\t\treturn definition[0](slot_ctx);\n\t}\n}\n\nfunction get_slot_context(definition, ctx, $$scope, fn) {\n\treturn definition[1] && fn ? assign($$scope.ctx.slice(), definition[1](fn(ctx))) : $$scope.ctx;\n}\n\nexport function get_slot_changes(definition, $$scope, dirty, fn) {\n\tif (definition[2] && fn) {\n\t\tconst lets = definition[2](fn(dirty));\n\t\tif ($$scope.dirty === undefined) {\n\t\t\treturn lets;\n\t\t}\n\t\tif (typeof lets === 'object') {\n\t\t\tconst merged = [];\n\t\t\tconst len = Math.max($$scope.dirty.length, lets.length);\n\t\t\tfor (let i = 0; i < len; i += 1) {\n\t\t\t\tmerged[i] = $$scope.dirty[i] | lets[i];\n\t\t\t}\n\t\t\treturn merged;\n\t\t}\n\t\treturn $$scope.dirty | lets;\n\t}\n\treturn $$scope.dirty;\n}\n\n/** @returns {void} */\nexport function update_slot_base(\n\tslot,\n\tslot_definition,\n\tctx,\n\t$$scope,\n\tslot_changes,\n\tget_slot_context_fn\n) {\n\tif (slot_changes) {\n\t\tconst slot_context = get_slot_context(slot_definition, ctx, $$scope, get_slot_context_fn);\n\t\tslot.p(slot_context, slot_changes);\n\t}\n}\n\n/** @returns {void} */\nexport function update_slot(\n\tslot,\n\tslot_definition,\n\tctx,\n\t$$scope,\n\tdirty,\n\tget_slot_changes_fn,\n\tget_slot_context_fn\n) {\n\tconst slot_changes = get_slot_changes(slot_definition, $$scope, dirty, get_slot_changes_fn);\n\tupdate_slot_base(slot, slot_definition, ctx, $$scope, slot_changes, get_slot_context_fn);\n}\n\n/** @returns {any[] | -1} */\nexport function get_all_dirty_from_scope($$scope) {\n\tif ($$scope.ctx.length > 32) {\n\t\tconst dirty = [];\n\t\tconst length = $$scope.ctx.length / 32;\n\t\tfor (let i = 0; i < length; i++) {\n\t\t\tdirty[i] = -1;\n\t\t}\n\t\treturn dirty;\n\t}\n\treturn -1;\n}\n\n/** @returns {{}} */\nexport function exclude_internal_props(props) {\n\tconst result = {};\n\tfor (const k in props) if (k[0] !== '$') result[k] = props[k];\n\treturn result;\n}\n\n/** @returns {{}} */\nexport function compute_rest_props(props, keys) {\n\tconst rest = {};\n\tkeys = new Set(keys);\n\tfor (const k in props) if (!keys.has(k) && k[0] !== '$') rest[k] = props[k];\n\treturn rest;\n}\n\n/** @returns {{}} */\nexport function compute_slots(slots) {\n\tconst result = {};\n\tfor (const key in slots) {\n\t\tresult[key] = true;\n\t}\n\treturn result;\n}\n\n/** @returns {(this: any, ...args: any[]) => void} */\nexport function once(fn) {\n\tlet ran = false;\n\treturn function (...args) {\n\t\tif (ran) return;\n\t\tran = true;\n\t\tfn.call(this, ...args);\n\t};\n}\n\nexport function null_to_empty(value) {\n\treturn value == null ? '' : value;\n}\n\nexport function set_store_value(store, ret, value) {\n\tstore.set(value);\n\treturn ret;\n}\n\nexport const has_prop = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop);\n\nexport function action_destroyer(action_result) {\n\treturn action_result && is_function(action_result.destroy) ? action_result.destroy : noop;\n}\n\n/** @param {number | string} value\n * @returns {[number, string]}\n */\nexport function split_css_unit(value) {\n\tconst split = typeof value === 'string' && value.match(/^\\s*(-?[\\d.]+)([^\\s]*)\\s*$/);\n\treturn split ? [parseFloat(split[1]), split[2] || 'px'] : [/** @type {number} */ (value), 'px'];\n}\n\nexport const contenteditable_truthy_values = ['', true, 1, 'true', 'contenteditable'];\n","import {\n\trun_all,\n\tsubscribe,\n\tnoop,\n\tsafe_not_equal,\n\tis_function,\n\tget_store_value\n} from '../internal/index.js';\n\nconst subscriber_queue = [];\n\n/**\n * Creates a `Readable` store that allows reading by subscription.\n *\n * https://svelte.dev/docs/svelte-store#readable\n * @template T\n * @param {T} [value] initial value\n * @param {import('./public.js').StartStopNotifier<T>} [start]\n * @returns {import('./public.js').Readable<T>}\n */\nexport function readable(value, start) {\n\treturn {\n\t\tsubscribe: writable(value, start).subscribe\n\t};\n}\n\n/**\n * Create a `Writable` store that allows both updating and reading by subscription.\n *\n * https://svelte.dev/docs/svelte-store#writable\n * @template T\n * @param {T} [value] initial value\n * @param {import('./public.js').StartStopNotifier<T>} [start]\n * @returns {import('./public.js').Writable<T>}\n */\nexport function writable(value, start = noop) {\n\t/** @type {import('./public.js').Unsubscriber} */\n\tlet stop;\n\t/** @type {Set<import('./private.js').SubscribeInvalidateTuple<T>>} */\n\tconst subscribers = new Set();\n\t/** @param {T} new_value\n\t * @returns {void}\n\t */\n\tfunction set(new_value) {\n\t\tif (safe_not_equal(value, new_value)) {\n\t\t\tvalue = new_value;\n\t\t\tif (stop) {\n\t\t\t\t// store is ready\n\t\t\t\tconst run_queue = !subscriber_queue.length;\n\t\t\t\tfor (const subscriber of subscribers) {\n\t\t\t\t\tsubscriber[1]();\n\t\t\t\t\tsubscriber_queue.push(subscriber, value);\n\t\t\t\t}\n\t\t\t\tif (run_queue) {\n\t\t\t\t\tfor (let i = 0; i < subscriber_queue.length; i += 2) {\n\t\t\t\t\t\tsubscriber_queue[i][0](subscriber_queue[i + 1]);\n\t\t\t\t\t}\n\t\t\t\t\tsubscriber_queue.length = 0;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @param {import('./public.js').Updater<T>} fn\n\t * @returns {void}\n\t */\n\tfunction update(fn) {\n\t\tset(fn(value));\n\t}\n\n\t/**\n\t * @param {import('./public.js').Subscriber<T>} run\n\t * @param {import('./private.js').Invalidator<T>} [invalidate]\n\t * @returns {import('./public.js').Unsubscriber}\n\t */\n\tfunction subscribe(run, invalidate = noop) {\n\t\t/** @type {import('./private.js').SubscribeInvalidateTuple<T>} */\n\t\tconst subscriber = [run, invalidate];\n\t\tsubscribers.add(subscriber);\n\t\tif (subscribers.size === 1) {\n\t\t\tstop = start(set, update) || noop;\n\t\t}\n\t\trun(value);\n\t\treturn () => {\n\t\t\tsubscribers.delete(subscriber);\n\t\t\tif (subscribers.size === 0 && stop) {\n\t\t\t\tstop();\n\t\t\t\tstop = null;\n\t\t\t}\n\t\t};\n\t}\n\treturn { set, update, subscribe };\n}\n\n/**\n * Derived value store by synchronizing one or more readable stores and\n * applying an aggregation function over its input values.\n *\n * https://svelte.dev/docs/svelte-store#derived\n * @template {import('./private.js').Stores} S\n * @template T\n * @overload\n * @param {S} stores - input stores\n * @param {(values: import('./private.js').StoresValues<S>, set: (value: T) => void, update: (fn: import('./public.js').Updater<T>) => void) => import('./public.js').Unsubscriber | void} fn - function callback that aggregates the values\n * @param {T} [initial_value] - initial value\n * @returns {import('./public.js').Readable<T>}\n */\n\n/**\n * Derived value store by synchronizing one or more readable stores and\n * applying an aggregation function over its input values.\n *\n * https://svelte.dev/docs/svelte-store#derived\n * @template {import('./private.js').Stores} S\n * @template T\n * @overload\n * @param {S} stores - input stores\n * @param {(values: import('./private.js').StoresValues<S>) => T} fn - function callback that aggregates the values\n * @param {T} [initial_value] - initial value\n * @returns {import('./public.js').Readable<T>}\n */\n\n/**\n * @template {import('./private.js').Stores} S\n * @template T\n * @param {S} stores\n * @param {Function} fn\n * @param {T} [initial_value]\n * @returns {import('./public.js').Readable<T>}\n */\nexport function derived(stores, fn, initial_value) {\n\tconst single = !Array.isArray(stores);\n\t/** @type {Array<import('./public.js').Readable<any>>} */\n\tconst stores_array = single ? [stores] : stores;\n\tif (!stores_array.every(Boolean)) {\n\t\tthrow new Error('derived() expects stores as input, got a falsy value');\n\t}\n\tconst auto = fn.length < 2;\n\treturn readable(initial_value, (set, update) => {\n\t\tlet started = false;\n\t\tconst values = [];\n\t\tlet pending = 0;\n\t\tlet cleanup = noop;\n\t\tconst sync = () => {\n\t\t\tif (pending) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tcleanup();\n\t\t\tconst result = fn(single ? values[0] : values, set, update);\n\t\t\tif (auto) {\n\t\t\t\tset(result);\n\t\t\t} else {\n\t\t\t\tcleanup = is_function(result) ? result : noop;\n\t\t\t}\n\t\t};\n\t\tconst unsubscribers = stores_array.map((store, i) =>\n\t\t\tsubscribe(\n\t\t\t\tstore,\n\t\t\t\t(value) => {\n\t\t\t\t\tvalues[i] = value;\n\t\t\t\t\tpending &= ~(1 << i);\n\t\t\t\t\tif (started) {\n\t\t\t\t\t\tsync();\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t() => {\n\t\t\t\t\tpending |= 1 << i;\n\t\t\t\t}\n\t\t\t)\n\t\t);\n\t\tstarted = true;\n\t\tsync();\n\t\treturn function stop() {\n\t\t\trun_all(unsubscribers);\n\t\t\tcleanup();\n\t\t\t// We need to set this to false because callbacks can still happen despite having unsubscribed:\n\t\t\t// Callbacks might already be placed in the queue which doesn't know it should no longer\n\t\t\t// invoke this derived store.\n\t\t\tstarted = false;\n\t\t};\n\t});\n}\n\n/**\n * Takes a store and returns a new one derived from the old one that is readable.\n *\n * https://svelte.dev/docs/svelte-store#readonly\n * @template T\n * @param {import('./public.js').Readable<T>} store  - store to make readonly\n * @returns {import('./public.js').Readable<T>}\n */\nexport function readonly(store) {\n\treturn {\n\t\tsubscribe: store.subscribe.bind(store)\n\t};\n}\n\nexport { get_store_value as get };\n","import { MindWiredStore } from \"../../service/store/mind-wired-store\";\nimport type { Configuration } from \"../config\";\nimport type { ModelSpec, SchemaSpec } from \"./node-type\";\nimport { Writable, writable } from \"svelte/store\";\nimport { SchemaEventArg } from \"../../mindwired-event\";\n\nexport type EventRef = {\n  detail: SchemaEventArg;\n};\nexport type SchemaOperationParam = {\n  overwriteIfExist?: boolean;\n  skipEvent?: boolean;\n};\nconst DEFAULT_SCHEMA_PARAM: SchemaOperationParam = {\n  overwriteIfExist: false,\n  skipEvent: false,\n};\nexport class SchemaContext extends MindWiredStore<EventRef> {\n  protected store: Writable<EventRef>;\n  private _eventRef: EventRef = { detail: undefined };\n  constructor(\n    private _config: Configuration,\n    private readonly _map = new Map<string, SchemaSpec>()\n  ) {\n    super();\n    this.store = writable(this._eventRef);\n  }\n  private get canvas() {\n    return this._config.getCanvas();\n  }\n  private _notify(event: SchemaEventArg) {\n    this._eventRef.detail = event;\n    this.update();\n    this._eventRef.detail = undefined;\n  }\n  findSchema(predicate: (schema: SchemaSpec) => boolean) {\n    return this.getSchemas().find(predicate);\n  }\n  /**\n   * create or update schema.\n   * @param schema\n   * @param param\n   */\n  addSchema(\n    schema: SchemaSpec,\n    param: SchemaOperationParam = DEFAULT_SCHEMA_PARAM\n  ) {\n    const existing = this._map.has(schema.name);\n    if (existing && !param.overwriteIfExist) {\n      throw new Error(`schema [${schema.name}] exists.`);\n    }\n    this._map.set(schema.name, schema);\n    this._registerSchema(schema);\n    if (!param.skipEvent) {\n      this._notify({\n        type: existing ? \"update\" : \"create\",\n        schemas: [schema],\n      });\n    }\n  }\n  private _registerSchema(schemaSpec: SchemaSpec) {\n    this.canvas.drawSchema(schemaSpec);\n  }\n  getSchemas(): SchemaSpec[] {\n    return [...this._map.values()];\n  }\n  removeSchema(\n    schemaSpec: SchemaSpec | string,\n    param: SchemaOperationParam = DEFAULT_SCHEMA_PARAM\n  ) {\n    const name = typeof schemaSpec === \"string\" ? schemaSpec : schemaSpec.name;\n    const schema = this._map.get(name);\n    if (schema) {\n      this.canvas.removeSchema(schema.name);\n      this._map.delete(schema.name);\n      if (!param.skipEvent) {\n        this._notify({ type: \"delete\", schemas: [schema] });\n      }\n    }\n  }\n  dispose() {\n    for (const schema of this._map.values()) {\n      this.removeSchema(schema, { skipEvent: true });\n    }\n  }\n}\n\nexport class SchemaUtil {\n  static has(model: ModelSpec, spec: SchemaSpec) {\n    const { schema } = model;\n    if (!schema) {\n      return false;\n    }\n    const names = schema.split(\" \").filter((tk) => tk.length > 0);\n    return names.includes(spec.name);\n  }\n  static toSchema(prop: SchemaSpec | string, ctx: SchemaContext) {\n    return typeof prop === \"string\"\n      ? ctx.findSchema((spec) => spec.name === prop)\n      : prop;\n  }\n}\n","import clone from \"@/service/clone\";\nimport type { MindWired } from \"../mind-wired\";\n\nexport type ExportType = \"node\" | \"schema\" | \"ui\";\nexport type ExportParam = {\n  types: ExportType[];\n};\nexport type ExportResponse = {\n  [name in ExportType]?: any;\n};\nconst DEFAULT_EXPORT_VALUE: ExportParam = {\n  types: [\"node\", \"schema\", \"ui\"],\n};\nexport class ExportContext {\n  constructor(readonly mwd: MindWired) {}\n  async export(\n    param: ExportParam = DEFAULT_EXPORT_VALUE\n  ): Promise<ExportResponse> {\n    const res: ExportResponse = {};\n    const set = new Set(param.types);\n    if (set.has(\"node\")) {\n      res.node = clone.deepCopy(await this.mwd.export(false));\n    }\n    if (set.has(\"schema\")) {\n      const ctx = this.mwd.getSchemaContext();\n      res.schema = clone.deepCopy(ctx.getSchemas());\n    }\n    if (set.has(\"ui\")) {\n      res.ui = clone.deepCopy(this.mwd.config.ui);\n      delete res.ui.offset;\n    }\n    return Promise.resolve(res);\n  }\n}\n","import { EVENT, parseEvent } from \"../service/event-bus\";\nimport { CanvasUI } from \"./canvas-ui\";\nimport { EdgeContext } from \"./edge\";\nimport { NodeUI } from \"./node/node-ui\";\nimport { NodeLayoutContext, installDefaultLayoutManagers } from \"./layout\";\nimport {\n  NodeEditingContext,\n  installDefaultEditors,\n} from \"./node/node-editing-context\";\nimport { INodeRenderer } from \"./node\";\nimport { RenderingDelegate } from \"./node/renderer/renderer-delegate\";\nimport { AlignmentContext } from \"./alignment\";\nimport TreeDataSource from \"./datasource/tree-ds\";\nimport { DragContext, type Capture } from \"./drag-context\";\nimport type { Configuration } from \"./config\";\nimport {\n  installDefaultRenderers,\n  NodeRenderingContext,\n} from \"./node/node-rendering-context\";\nimport {\n  EdgeSpec,\n  ModelSpec,\n  NodeLayout,\n  NodeSpec,\n  SchemaSpec,\n  ViewSpec,\n} from \"./node/node-type\";\nimport { NodeSelectionModel } from \"./selection\";\nimport {\n  DataSourceFactory,\n  DatasourceOptionalParam,\n  KeyExtractor,\n} from \"./datasource\";\nimport { IEdgeRenderer } from \"./edge/edge-renderer-type\";\nimport type {\n  NodeDragEvent,\n  NodeDragEventArg,\n  NodeEditingArg,\n  NodeEvent,\n  NodeEventArg,\n  ViewportDragEvent,\n  ViewportDragEventArg,\n  ViewportEvent,\n} from \"../mindwired-event\";\nimport { SchemaContext, SchemaUtil } from \"./node/schema-context\";\nimport { ExportContext, type ExportParam, type ExportResponse } from \"./export\";\nimport { INodeLayoutManager } from \"./layout/node-layout-manager\";\nimport { installDefaultEdgeRenderers } from \"./edge/edge-context\";\nimport clone from \"@/service/clone\";\n\nconst exportTree = (config: Configuration, nodeUI: NodeUI): NodeSpec => {\n  const v: ViewSpec = nodeUI.spec.view;\n  const view: ViewSpec = {\n    x: v.x,\n    y: v.y,\n    layout: undefined,\n    folding: undefined,\n    style: undefined\n  };\n  // 1.2345... => 1.2\n  const root = nodeUI.isRoot();\n  let x = root ? config.ui.offset.x : v.x;\n  let y = root ? config.ui.offset.y : v.y;\n  view.x = Math.floor(10 * x) / 10;\n  view.y = Math.floor(10 * y) / 10;\n\n  if (v.layout) {\n    view.layout = v.layout;\n  }\n  if (v.edge) {\n    view.edge = v.edge;\n  }\n  if (v.folding) {\n    view.folding = true;\n  }\n  if (v.style) {\n    view.style = v.style\n  }\n  const subs: NodeSpec[] = [];\n  nodeUI.subs.forEach((childUI) => {\n    subs.push(exportTree(config, childUI));\n  });\n  return {\n    model: nodeUI.model,\n    view: view,\n    subs: subs.length > 0 ? subs : undefined,\n  };\n};\nconst repaintTree = (mwd: MindWired, node: NodeUI, propagate = true) => {\n  node.repaint();\n  if (propagate) {\n    node.subs.forEach((childNode: NodeUI) => {\n      repaintTree(mwd, childNode);\n    });\n  }\n  if (node.isFolded()) {\n    mwd.setFoldingState([node], true);\n  }\n};\nconst updateLevelClass = (\n  nodeUI: NodeUI,\n  method: \"add\" | \"remove\",\n  config: Configuration\n) => {\n  const className = config.nodeLevelClassName(nodeUI);\n  config.dom.clazz[method](nodeUI.$bodyEl, className);\n  nodeUI.subs.forEach((childUI) => updateLevelClass(childUI, method, config));\n};\nconst mergeEdgeSpec = (src: EdgeSpec, dst: EdgeSpec): EdgeSpec => {\n  if (!dst) {\n    return src;\n  }\n  clone.mergeLeaf(src, dst);\n  return dst;\n};\nexport class MindWired {\n  config: Configuration;\n  canvas: CanvasUI;\n  nodeRenderingContext: NodeRenderingContext;\n  nodeSelectionModel: NodeSelectionModel;\n  private _nodeLayoutContext: NodeLayoutContext;\n  nodeEditingContext: NodeEditingContext;\n  private _alignmentContext: AlignmentContext;\n  dragContext: DragContext;\n  private _edgeContext: EdgeContext;\n  rootUI: NodeUI;\n  private _dsFactory: DataSourceFactory;\n  private _schemaContext: SchemaContext;\n  /**\n   *\n   * @param {Configuration} config\n   */\n  constructor(config: Configuration) {\n    this.config = config;\n    config.mindWired = () => this;\n\n    this.canvas = new CanvasUI(config);\n    config.getCanvas = () => this.canvas;\n\n    this._dsFactory = new DataSourceFactory();\n    config.getNodeRenderer = () => this.nodeRenderingContext;\n\n    this.nodeSelectionModel = new NodeSelectionModel(config);\n    this._nodeLayoutContext = new NodeLayoutContext(config);\n    installDefaultLayoutManagers(this._nodeLayoutContext);\n\n    this.nodeRenderingContext = new NodeRenderingContext(\n      this.canvas,\n      this._dsFactory\n    );\n    installDefaultRenderers(this.nodeRenderingContext);\n\n    this.nodeEditingContext = new NodeEditingContext(\n      this.canvas,\n      this._dsFactory\n    );\n    installDefaultEditors(this.nodeEditingContext);\n\n    this._alignmentContext = new AlignmentContext(config);\n    this.dragContext = new DragContext();\n    this._edgeContext = new EdgeContext(config, this.canvas);\n    installDefaultEdgeRenderers(this._edgeContext);\n\n    this._schemaContext = new SchemaContext(config);\n    this._schemaContext.subscribe((e) => {\n      if (e.detail) {\n        const { detail } = e;\n        setTimeout(() => {\n          this._edgeContext.repaint(true);\n          const { type } = detail;\n          const eventType =\n            type === \"create\"\n              ? \"CREATED\"\n              : type === \"update\"\n              ? \"UPDATED\"\n              : \"DELETED\";\n          this.config.emit(EVENT.SCHEMA[eventType].CLIENT, detail);\n        });\n      }\n    });\n\n    this.config\n      .listen(EVENT.DRAG.VIEWPORT, (e: ViewportDragEventArg) => {\n        this.config.setOffset(e.offset);\n        this.canvas.repaintNodeHolder();\n        this._edgeContext.repaint();\n        if (e.state === \"done\") {\n          this.rootUI.setPos(e.offset.x, e.offset.y, false);\n          try {\n            this.config.emit(EVENT.NODE.UPDATED.CLIENT, {\n              nodes: [this.rootUI],\n              type: \"pos\",\n            });\n          } finally {\n            this.rootUI.setPos(0, 0);\n          }\n        }\n      })\n      .listen(EVENT.DRAG.NODE, (e: NodeDragEventArg) => {\n        if (e.state === \"ready\") {\n          const nodes = this.nodeSelectionModel.getNodes();\n          /*\n           * shift@click on nodes redirects dragging to their children\n           */\n          const dragTargets =\n            e.target === \"all\" ? nodes : nodes.flatMap((node) => node.subs);\n          // this.draggingNodes = capatureDragData(dragTargets);\n          this.dragContext.prepareCaptures(dragTargets);\n          this._alignmentContext.turnOn(this.rootUI, dragTargets);\n          this.canvas.updateSelection(nodes);\n        } else if (e.state === \"drag\") {\n          const acceleration = e.target === \"all\" ? 1 : 2.5;\n          this.dragContext.eachCapture((capture: Capture) => {\n            const { node, dir, pos } = capture;\n            dir.capture();\n            node.setPos(\n              acceleration * e.x + pos.x,\n              acceleration * e.y + pos.y,\n              !this.config.snapEnabled\n            );\n          });\n          this._alignmentContext.doAlign();\n          this.dragContext.eachCapture((capture: Capture) => {\n            const { node, dir } = capture;\n            this._nodeLayoutContext.layout(node, {\n              dir,\n            });\n          });\n          this.canvas.updateSelection(this.nodeSelectionModel.getNodes());\n          this._edgeContext.repaint(!this.config.snapEnabled);\n        } else if (e.state === \"done\") {\n          this._alignmentContext.turnOff();\n          this._edgeContext.repaint(true);\n          const nodes = this.dragContext.getUpdatedNodes();\n          if (nodes.length > 0) {\n            this.config.emit(EVENT.NODE.UPDATED.CLIENT, {\n              nodes,\n              type: \"pos\",\n            });\n          } else {\n            const nodes = this.nodeSelectionModel.getNodes();\n            this.config.emit(EVENT.NODE.CLICKED.CLIENT, {\n              nodes,\n              type: \"click\",\n            });\n          }\n          this.dragContext.clear();\n        }\n      })\n      .listen(EVENT.NODE.EDITING, ({ editing, node }: NodeEditingArg) => {\n        // console.log(\"[edit]\", nodeUI);\n        if (editing) {\n          this.nodeEditingContext.edit(node);\n        } else {\n          this.nodeEditingContext.close();\n        }\n      })\n      .listen(EVENT.NODE.UPDATED, ({ nodes }: NodeEventArg) => {\n        nodes.forEach((node) => node.repaint());\n        this._edgeContext.repaint();\n        this.config.emit(EVENT.NODE.UPDATED.CLIENT, { nodes, type: \"model\" });\n      });\n  }\n  getAligmentContext() {\n    return this._alignmentContext;\n  }\n  /**\n   *\n   * @param dataSourceId unique id for datasource\n   * @param keyExtractor provides unique id for each items in the datasource\n   * @param param - used for mapping (data source, node renderer)\n   * @returns\n   */\n  createDataSource<T, K>(\n    dataSourceId: string,\n    keyExtractor: KeyExtractor<T, K>,\n    param?: DatasourceOptionalParam<T>\n  ) {\n    const ds = this._dsFactory.createDataSource(dataSourceId, keyExtractor);\n    if (param) {\n      const { renderer, editor } = param;\n      if (renderer) {\n        this.nodeRenderingContext.registerCustomRender(renderer);\n        this._dsFactory.bindRendererMapping(ds, renderer.name);\n      }\n      if (editor) {\n        this.nodeEditingContext.registerCustomEditor(editor);\n        this._dsFactory.bindEditorMapping(ds, editor.name);\n      }\n    }\n    return ds;\n  }\n  isEditing() {\n    return this.nodeEditingContext.isEditing();\n  }\n  private _dispose() {\n    this.nodeRenderingContext.dispose();\n    this.nodeEditingContext.dispose();\n    this._dsFactory.clear();\n    this._edgeContext.dispose();\n    this._alignmentContext.turnOff();\n    this.dragContext.clear();\n    this.canvas.unregisterNodeTree(this.rootUI);\n  }\n  nodes(elems: NodeSpec) {\n    if (this.rootUI) {\n      this._dispose();\n    }\n    if (elems instanceof TreeDataSource) {\n      const root = elems.build();\n      this.rootUI = NodeUI.build(root, this.config);\n    } else if (elems) {\n      this.rootUI = NodeUI.build(elems, this.config);\n    }\n    this._edgeContext.setRootNode(this.rootUI);\n    this.config.ui.offset.x = this.rootUI.spec.view.x;\n    this.config.ui.offset.y = this.rootUI.spec.view.y;\n    this.rootUI.spec.view.x = 0;\n    this.rootUI.spec.view.y = 0;\n\n    this.repaint();\n    return this;\n  }\n  findNode(predicate: (node: NodeUI) => boolean) {\n    return this.rootUI.find(predicate);\n  }\n  addNode(\n    parentNode: NodeUI,\n    nodeData: NodeSpec,\n    option?: { siblingNode: NodeUI }\n  ) {\n    const data: NodeSpec = {\n      root: false,\n      model: nodeData.model,\n      view: nodeData.view,\n    };\n    if (!data.view) {\n      data.view = {\n        x: 0,\n        y: 0,\n      };\n    }\n    const lastChild = parentNode.lastChild();\n    const nodeUI = new NodeUI(data, this.config, parentNode);\n    this.canvas.regsiterNode(nodeUI);\n    parentNode.addChild(nodeUI);\n    nodeUI.repaint();\n\n    this._nodeLayoutContext.setPosition(nodeUI, {\n      baseNode: lastChild,\n      offset: 60,\n    });\n\n    this._edgeContext.addEdge(nodeUI.parent, nodeUI);\n    this.config.emit(EVENT.NODE.CREATED.CLIENT, {\n      nodes: [nodeUI],\n      type: \"create\",\n    });\n    return nodeUI;\n    // FIXME 노드 생성 후 곧바로 편집 모드 전환하려는 코드인데 현재는 작동하지 않음.\n    // if (option && (option.editing || option.select)) {\n    //   this.config.emit(EVENT.NODE.SELECTED, {\n    //     node: nodeUI,\n    //     append: false,\n    //   });\n    // }\n    // if (option && option.editing) {\n    //   this.nodeEditingContext.edit(nodeUI);\n    // }\n  }\n  /**\n   *\n   * @param parentNode new parent of the given nodes\n   * @param nodes nodes whoses parent is changed\n   * @param trigger if true, event 'node.updated' is triggered\n   */\n  moveNodes(parentNode: NodeUI, nodes: NodeUI[], trigger: boolean = false) {\n    const childNodes = nodes.filter((node) => node.parent !== parentNode);\n    childNodes.forEach((child) => {\n      updateLevelClass(child, \"remove\", this.config);\n      const prevParent = parentNode.addChild(child);\n      updateLevelClass(child, \"add\", this.config);\n\n      this.config.emit(EVENT.NODE.MOVED, { node: child, prevParent });\n    });\n    parentNode.setFolding(false);\n    repaintTree(this, parentNode);\n    this.canvas.updateSelection(nodes);\n    if (trigger) {\n      this.config.emit(EVENT.NODE.UPDATED.CLIENT, {\n        nodes: childNodes,\n        type: \"path\",\n      });\n    }\n  }\n  deleteNodes(nodes: NodeUI[]) {\n    const updated: NodeUI[] = [];\n    const deleted: NodeUI[] = [];\n    nodes.forEach((node) => {\n      /**\n       * delete [N1]\n       * ```\n       *  parent\n       *   +- N0\n       *   +- N1 (delete)\n       *       +- C0 +- ...\n       *       +- C1 +- ...\n       * ```\n       * ```\n       *  parent\n       *   +- N0\n       *   +- C0 +- ...\n       *   +- C1 +- ...\n       * ```\n       */\n      const { parent, childNodes } = node;\n      if (childNodes.length > 0) {\n        // 1. move node.children to node.parent\n        childNodes.forEach((child) => {\n          // keep position\n          child.setPos(child.x + node.x, child.y + node.y);\n        });\n        this.moveNodes(parent, childNodes);\n        // child node can be in deleted nodes\n        updated.push(...childNodes.filter((c) => !nodes.includes(c)));\n      }\n      // 2. delete node(which has no children)\n      const deletedChild = node.parent.removeChild(node);\n      if (deletedChild) {\n        this.canvas.unregisterNode(deletedChild);\n        deleted.push(node);\n      }\n    });\n    if (updated.length > 0) {\n      this.config.emit(EVENT.NODE.UPDATED.CLIENT, {\n        nodes: updated,\n        type: \"path\",\n      });\n    }\n    if (deleted.length > 0) {\n      this._edgeContext.deleteEdges(deleted);\n      this.config.emit(EVENT.NODE.DELETED2.CLIENT, {\n        nodes: deleted,\n        updated,\n        type: \"delete\",\n      });\n    }\n  }\n  getNodeSelectionModel() {\n    return this.nodeSelectionModel;\n  }\n  getSelectedNodes() {\n    return this.nodeSelectionModel.getNodes();\n  }\n  setLayout(layoutSpec: NodeLayout | undefined, nodeUI: NodeUI) {\n    const targetNode = nodeUI || this.rootUI;\n    if (layoutSpec) {\n      targetNode.spec.view.layout = layoutSpec;\n    } else {\n      delete targetNode.spec.view.layout;\n    }\n    this.repaint();\n  }\n  setEdge(edgeSpec: EdgeSpec | undefined, nodeUI?: NodeUI) {\n    const targetNode = nodeUI || this.rootUI;\n    if (edgeSpec) {\n      targetNode.spec.view.edge = mergeEdgeSpec(\n        edgeSpec,\n        targetNode.spec.view.edge\n      );\n    } else {\n      delete targetNode.spec.view.edge;\n    }\n    this.repaint(nodeUI);\n  }\n  setScale(scale: number) {\n    this.config.ui.scale = scale;\n    this.repaint();\n  }\n  /**\n   * update  visibilityof of the given node's children\n   * @param nodes\n   * @param folding if true(false), children of the node are hidden(visible).\n   */\n  setFoldingState(nodes: NodeUI[], folding: boolean) {\n    const updatedNodes = nodes.filter((node) => {\n      const changed = node.setFolding(folding);\n      this.canvas.updateFoldingNodes(node);\n      this._edgeContext.setEdgeVisible(node, !folding, false);\n      return changed;\n    });\n    this._edgeContext.repaint();\n    this.config.emit(EVENT.NODE.UPDATED.CLIENT, {\n      type: \"folding\",\n      nodes: updatedNodes,\n    });\n  }\n  repaint(nodeUI?: NodeUI) {\n    nodeUI = nodeUI || this.rootUI;\n    repaintTree(this, nodeUI);\n    this.canvas.repaintNodeHolder();\n    this._nodeLayoutContext.layout(nodeUI, { dir: undefined });\n    this._edgeContext.repaint();\n\n    this.canvas.clearNodeSelection();\n    this.canvas.updateSelection(this.getSelectedNodes());\n  }\n  listen<A = any>(eventName: string, callback: (arg: A) => void) {\n    const event = parseEvent(`${eventName}.client`);\n    this.config.ebus.listen(event, callback);\n    return this;\n  }\n  /**\n   * register event listener\n   * @template A detail type of mind-wired event\n   * @param event\n   * @param callback\n   * @returns\n   * @example\n   * mwd.listenStrict(EVENT.NODE.CREATED, (e:NodeEventArg) => {\n   *  const {type, nodes} = e // type: 'create', nodes: [NodeUI]\n   * })\n   *\n   * @example\n   * mwd.listenStrict(EVENT.NODE.EDITING, (e:NodeEditingArg) => {\n   *  const {node, editing} = e // node: NodeUI, editing:boolean\n   *   if(editing) {\n   *     // editing state in on\n   *   } else {\n   *     // editing state is off\n   *   }\n   * })\n   */\n  listenStrict<A>(\n    event:\n      | NodeEvent<A>\n      | ViewportEvent<A>\n      | ViewportDragEvent<A>\n      | NodeDragEvent<A>,\n    callback: (arg: A) => void\n  ) {\n    if (event === EVENT.NODE.DELETED) {\n      event = EVENT.NODE.DELETED2;\n    }\n    const e = event.CLIENT || event;\n    this.config.ebus.listen(e, callback);\n    return this;\n  }\n  getNodeRender(model: ModelSpec): INodeRenderer {\n    return this.nodeRenderingContext.getRendererByModel(model);\n  }\n  /**\n   * returns all node renderers\n   * @returns all node renderers\n   */\n  listNodeRenderers(): INodeRenderer[] {\n    const renderers = this.nodeRenderingContext.listRenderers();\n    return renderers;\n  }\n  /**\n   * return all edge renderers\n   * @returns all edge renderers\n   */\n  listEdgeRenderers(): IEdgeRenderer[] {\n    return this._edgeContext.listRenderers();\n  }\n  listNodeLayoutManagers(): INodeLayoutManager[] {\n    return this._nodeLayoutContext.listLayoutManagers();\n  }\n  translateModel(model: ModelSpec) {\n    if (model.provider) {\n      const { key } = model.provider;\n      const ds = this._dsFactory.findDataSourceByKey(key);\n      const userData = ds.getData(key);\n      const renderName = this._dsFactory.getRendererName(ds.id);\n      const nodeRenderer = this.nodeRenderingContext.getRenderer(\n        renderName\n      ) as RenderingDelegate<any>;\n\n      const { text, iconBadge, thumbnail, link } = nodeRenderer.delegate;\n      let m: ModelSpec;\n      if (text) {\n        m = { type: \"text\", text: text(userData) };\n      } else if (iconBadge) {\n        m = { type: \"icon-badge\", \"icon-badge\": iconBadge(userData) };\n      } else if (thumbnail) {\n        m = { type: \"thumbnail\", thumbnail: thumbnail(userData) };\n      } else if (link) {\n        m = { type: \"link\", link: link(userData) };\n      }\n      return m;\n    } else {\n      return model;\n    }\n  }\n  /**\n   * return NodeSpec data. If you want to export schema or ui, use `exportwith` instead.\n   * @see {exportWith}\n   * @deprecated use exportWith(param: ExportParam)\n   * @param stringify if true, return JSON.stringify(nodeSpec), else return nodeSpec itself\n   * @returns nodeSpec\n   */\n  export(stringify = true): Promise<string | NodeSpec> {\n    const nodeSpec = exportTree(this.config, this.rootUI);\n    const value = stringify ? JSON.stringify(nodeSpec) : nodeSpec;\n    return Promise.resolve(value);\n  }\n  exportWith(param?: ExportParam): Promise<ExportResponse> {\n    const exporter = new ExportContext(this);\n    return exporter.export(param);\n  }\n  registerEdgeRenderer(renderer: IEdgeRenderer) {\n    this._edgeContext.registerEdgeRenderer(renderer);\n  }\n  getSchemaContext() {\n    return this._schemaContext;\n  }\n  registerSchema(schemaSpec: SchemaSpec) {\n    this._schemaContext.addSchema(schemaSpec);\n  }\n  bindSchema(schema: SchemaSpec | string, nodes?: NodeUI[]) {\n    nodes = nodes || this.getSelectedNodes();\n    if (nodes.length === 0) {\n      return;\n    }\n    const spec: SchemaSpec = SchemaUtil.toSchema(schema, this._schemaContext);\n    const updated = nodes.filter((node) => this._bindSchema(spec, node, true));\n    this._notifySchemaBinding(updated);\n  }\n  unbindSchema(schema: SchemaSpec | string, nodes?: NodeUI[]) {\n    nodes = nodes || this.getSelectedNodes();\n    if (nodes.length === 0) {\n      return;\n    }\n    const spec: SchemaSpec = SchemaUtil.toSchema(schema, this._schemaContext);\n    const updated = nodes.filter((node) => this._bindSchema(spec, node, false));\n    this._notifySchemaBinding(updated);\n  }\n  toggleSchema(schema: SchemaSpec | string, nodes?: NodeUI[]) {\n    nodes = nodes || this.getSelectedNodes();\n    if (nodes.length === 0) {\n      return;\n    }\n    const spec: SchemaSpec = SchemaUtil.toSchema(schema, this._schemaContext);\n    const updated = nodes.filter((node) => {\n      const existing = SchemaUtil.has(node.spec.model, spec);\n      return this._bindSchema(spec, node, !existing);\n    });\n    this._notifySchemaBinding(updated);\n  }\n  private _notifySchemaBinding(nodes: NodeUI[]) {\n    if (nodes.length > 0) {\n      setTimeout(() => {\n        this._edgeContext.repaint(true);\n        this.config.emit(EVENT.NODE.UPDATED.CLIENT, {\n          type: \"schema\",\n          nodes,\n        });\n      });\n    }\n  }\n  private _bindSchema(schema: SchemaSpec, node: NodeUI, binding: boolean) {\n    if (binding) {\n      return this.canvas.bindSchema(node, schema);\n    } else {\n      return this.canvas.unbindSchema(node, schema);\n    }\n  }\n}\n","import type { ModelSpec, NodeSpec, ViewSpec } from \"./node/node-type\";\nimport clone from \"../service/clone\";\nimport { EventBus } from \"../service/event-bus\";\nimport { Point } from \"../service/geom\";\nimport type { MindWiredEvent } from \"../mindwired-event\";\nimport type { InitParam, SnapToEntitySetting, UISetting } from \"../setting\";\nimport type { CanvasUI } from \"./canvas-ui\";\nimport type { NodeUI } from \"./node/node-ui\";\nimport type { NodeRenderingContext } from \"./node/node-rendering-context\";\nimport type { MindWired } from \"./mind-wired\";\nimport type { DomUtil } from \"../service/dom\";\n\nlet nodeUuid = 1000;\nconst DEFAULT_UI_SETTING: UISetting = {\n  width: 600,\n  height: 600,\n  scale: 1.0,\n  uuid: () => `uuid-${nodeUuid++}`,\n  clazz: {\n    node: \"active-node\",\n    edge: \"active-edge\",\n    schema: (schemaName: string): string => schemaName,\n    level: (level: number): string => `level-${level}`,\n    folded: \"folded\",\n  },\n  styleDef: {\n    schema: {\n      styleId: `#mwd-schema-@schema@mapId`,\n      selector: `[data-mind-wired-viewport@mapId] .mwd-node.@schema > .mwd-body`,\n    },\n  },\n  offset: new Point(0, 0),\n  snap: {\n    limit: 4,\n    width: 0.4,\n    dash: [6, 2],\n    color: { horizontal: \"orange\", vertical: \"#2bc490\" },\n  },\n  selection: {\n    padding: 5,\n    \"background-color\": \"#b3ddff6b\",\n    \"border-radius\": \"4px\",\n  },\n  useDefaultIcon: true,\n};\nexport class Configuration {\n  el: HTMLElement;\n  ui: UISetting;\n  readonly ebus: EventBus;\n  dom: DomUtil;\n  mindWired?: () => MindWired;\n  model: ModelSpec;\n  view: ViewSpec;\n  subs: NodeSpec[];\n  getCanvas: () => CanvasUI;\n  getNodeRenderer: () => NodeRenderingContext;\n  constructor({\n    el,\n    ui,\n    dom,\n    eventBus,\n  }: {\n    el: HTMLElement;\n    ui: UISetting;\n    dom: DomUtil;\n    eventBus: EventBus;\n  }) {\n    this.el = el;\n    this.ui = ui;\n    this.dom = dom;\n    this.ebus = eventBus || new EventBus();\n  }\n  get width() {\n    return this.ui.width;\n  }\n  get height() {\n    return this.ui.height;\n  }\n  get scale() {\n    return this.ui.scale;\n  }\n  get snapEnabled() {\n    return (this.ui.snap as SnapToEntitySetting).enabled;\n  }\n  get snapSetting() {\n    return this.ui.snap as SnapToEntitySetting;\n  }\n  getOffset() {\n    const offset = this.ui.offset;\n    return offset.clone();\n  }\n  setOffset(offset: Point) {\n    this.ui.offset = offset.clone();\n  }\n  relativeOffset(offset: Point) {\n    const baseOffset = this.ui.offset;\n    return baseOffset.sum(offset); // { x: baseOffset.x + offset.x, y: baseOffset.y + offset.y };\n  }\n  activeClassName(type: string) {\n    const className = this.ui.clazz[type];\n    if (!className) {\n      throw new Error(`[MINDWIRED][ERROR] no classname of type : \"${type}\"`);\n    }\n    return className;\n  }\n  nodeLevelClassName(node: NodeUI): string {\n    const { level } = this.ui.clazz;\n    let className: string = undefined;\n    if (typeof level === \"string\") {\n      className = level;\n    } else if (typeof level === \"function\") {\n      className = level(node.level(), node.spec);\n    } else {\n      className = `level-${node.level()}`;\n    }\n    return className;\n  }\n  foldedNodeClassName(): string {\n    return this.ui.clazz.folded || \"folded\";\n  }\n  listen<A = any>(eventName: MindWiredEvent<A>, callback: (arg: A) => void) {\n    this.ebus.on(eventName, callback);\n    return this;\n  }\n  off<A = any>(event: MindWiredEvent<A>, callback: Function) {\n    this.ebus.off(event.name, callback);\n  }\n  emit<A = any>(event: MindWiredEvent<A>, args?: A) {\n    this.ebus.emit(event, args);\n    return this;\n  }\n  static parse(param: InitParam, dom: DomUtil, eventBus?: EventBus) {\n    const ui: UISetting = clone.mergeLeaf(\n      param.ui || ({} as UISetting),\n      clone.deepCopy(DEFAULT_UI_SETTING)\n    ) as UISetting;\n\n    normalizeOffset(ui);\n    normalizeSnap(ui, dom);\n\n    const el =\n      typeof param.el === \"string\"\n        ? (document.querySelector(param.el as string) as HTMLElement)\n        : param.el;\n    return new Configuration({ el, ui, dom, eventBus });\n  }\n}\nconst normalizeOffset = (ui: UISetting) => {\n  const { offset } = ui;\n  if (!(offset instanceof Point)) {\n    ui.offset = new Point(ui.offset.x, ui.offset.y);\n  }\n};\nconst normalizeSnap = (ui: UISetting, dom: DomUtil) => {\n  const { snap } = ui;\n  const defaultSnap = DEFAULT_UI_SETTING.snap as SnapToEntitySetting;\n  if (snap === false) {\n    ui.snap = clone.deepCopy(defaultSnap) as SnapToEntitySetting;\n    ui.snap.enabled = false;\n  } else {\n    if (dom.valid.string(snap.color)) {\n      const color = snap.color as string;\n      snap.color = {\n        horizontal: color.trim(),\n        vertical: color.trim(),\n      };\n    }\n    snap.limit = snap.limit || defaultSnap.limit;\n    snap.width = snap.width || defaultSnap.width;\n    if (snap.dash !== false) {\n      snap.dash = snap.dash || defaultSnap.dash;\n    }\n    if (snap.enabled === undefined) {\n      snap.enabled = true;\n    }\n  }\n};\n","/* eslint-disable max-classes-per-file */\nclass Attr {\n  expression: string;\n  constructor(attrExpression: string) {\n    this.expression = attrExpression;\n  }\n\n  get isClass() {\n    return this.expression.charAt(0) === \".\";\n  }\n\n  get isId() {\n    return this.expression.charAt(0) === \"#\";\n  }\n\n  get value() {\n    return this.expression.substring(1);\n  }\n\n  setAttribute(el: HTMLElement) {\n    if (this.isId) {\n      el.setAttribute(\"id\", this.value);\n    } else if (this.isClass) {\n      el.classList.add(this.value);\n    } else {\n      throw new Error(`neither id nor class : [${this.expression}]`);\n    }\n  }\n}\nconst closest = (elem: HTMLElement, selector: string) => {\n  if (elem.nodeType === 1) {\n    return elem.closest(selector) as HTMLElement;\n  }\n  if (elem.nodeType === 3) {\n    return elem.parentElement?.closest(selector) as HTMLElement;\n  }\n  throw new Error(`node type ${elem.nodeType}, tag(${elem.nodeName})`);\n};\n\nconst parseAttr = (expression?: string) => {\n  const attr = expression || \"\";\n  return attr\n    .split(\" \")\n    .map((val) => val.trim())\n    .filter((val) => val.length > 0);\n};\nconst createEl = <T = HTMLElement>(tagName: string, attributes?: string[]) => {\n  const tag = document.createElement(tagName);\n  if (attributes) {\n    attributes.forEach((value) => {\n      const attr = new Attr(value);\n      attr.setAttribute(tag);\n    });\n  }\n  return tag as T;\n};\ntype TagUtil = {\n  span: (attr: string, content: string) => HTMLSpanElement;\n  iconButton: (attrs: string, content: string) => HTMLButtonElement;\n  img: (\n    imgUrl: string\n  ) => Promise<{ img: HTMLImageElement; width: number; height: number }>;\n  div: (attr?: string) => HTMLDivElement;\n  style: (attr?: string) => HTMLStyleElement;\n  canvas: (attr?: string) => HTMLCanvasElement;\n};\nconst tag: TagUtil = {\n  span: (attr: string, content: string) => {\n    const span = createEl(\"span\", parseAttr(attr));\n    if (content) {\n      span.innerHTML = content;\n    }\n    return span;\n  },\n  iconButton: (attrs: string, content: string) => {\n    const button = createEl<HTMLButtonElement>(\"BUTTON\", parseAttr(attrs));\n    button.innerHTML = content;\n    return button;\n  },\n  img: (\n    imgUrl: string\n  ): Promise<{ img: HTMLImageElement; width: number; height: number }> => {\n    const img = createEl<HTMLImageElement>(\"img\");\n    return new Promise((resolve, reject) => {\n      img.onload = () => {\n        resolve({ img, width: img.naturalWidth, height: img.naturalHeight });\n      };\n      img.onerror = () => {\n        console.log(\"ERROR\");\n        reject(\"NOT_ALLOWED\");\n      };\n      img.crossOrigin = \"Anonymous\";\n      img.src = imgUrl;\n    });\n  },\n  div: (attr?: string) => createEl<HTMLDivElement>(\"DIV\", parseAttr(attr)),\n  style: (attr?: string) =>\n    createEl<HTMLStyleElement>(\"STYLE\", parseAttr(attr)),\n  canvas: (attr?: string) =>\n    createEl(\"CANVAS\", parseAttr(attr)) as HTMLCanvasElement,\n};\n\nconst attr = (\n  el: HTMLElement,\n  attrName: string,\n  attrValue: string,\n  always?: boolean\n) => {\n  const v = el.getAttribute(attrName);\n  if (always || !v) {\n    el.setAttribute(attrName, attrValue);\n  }\n};\ntype ClassUtil = {\n  add: (el: HTMLElement, className: string) => void;\n  remove: (el: HTMLElement, className: string) => void;\n};\nconst clazz: ClassUtil = {\n  add: (el: HTMLElement, className: string) => el.classList.add(className),\n  remove: (el: HTMLElement, className: string) =>\n    el.classList.remove(className),\n};\n// const imageSize = (imgUrl: string) => {\n//   const xhr = new XMLHttpRequest();\n//   xhr.open(\"HEAD\", imgUrl, true);\n//   xhr.onreadystatechange = () => {\n//     if (xhr.readyState === xhr.DONE) {\n//       console.log(xhr.getResponseHeader(\"Content-Length\"));\n//     }\n//   };\n//   xhr.send();\n// };\n\n// const fileToImage = (file: Blob) => {\n//   const reader = new FileReader();\n//   return new Promise((resolve) => {\n//     reader.addEventListener(\"load\", () => {\n//       const img = document.createElement(\"img\");\n//       img.src = \"\" + reader.result;\n//       resolve({ file, img });\n//     });\n//     reader.readAsDataURL(file);\n//   });\n// };\n\nconst registerEvent = (\n  target: HTMLElement,\n  eventName: string,\n  callback: EventListenerOrEventListenerObject,\n  options?: boolean | AddEventListenerOptions | undefined\n) => {\n  const el = target || globalThis;\n  el.addEventListener(eventName, callback, options || false);\n};\n\nconst registerKeyEvent = (\n  target: HTMLElement,\n  eventName: string,\n  callback: EventListener,\n  options?: any\n) => {\n  target.addEventListener(\n    eventName,\n    (e: Event) => {\n      const code = (e as KeyboardEvent).code.toLowerCase();\n      const { keys } = options;\n      for (let i = 0; i < keys.length; i++) {\n        const key = keys[i];\n        const { ctrlKey, shiftKey, altKey, metaKey } = e as KeyboardEvent;\n        if (\n          key.code === \"*\" ||\n          (key.code === code &&\n            key.alt === altKey &&\n            key.meta === metaKey &&\n            key.shift === shiftKey &&\n            key.ctrl === ctrlKey)\n        ) {\n          callback(e);\n          break;\n        }\n      }\n    },\n    false\n  );\n};\n/**\n * 'enter'\n * 'space'\n * 'ctrl@enter'\n * 'alt+shift@space'\n * @param {string} keyFormat\n */\nconst parseKeyOption = (keyFormat: string) => {\n  let [metaKeys, code] = keyFormat.split(\"@\");\n  if (!code) {\n    // 'enter', 'space'\n    code = metaKeys;\n    metaKeys = \"\";\n  }\n  const metas = metaKeys.split(\"+\");\n  return {\n    ctrl: metas.includes(\"ctrl\"),\n    shift: metas.includes(\"shift\"),\n    alt: metas.includes(\"alt\"),\n    meta: metas.includes(\"meta\"),\n    code,\n  };\n};\nconst data = {\n  int: (el: HTMLElement, attrList: string[]) => {\n    const d: any = {};\n    attrList.forEach((key) => {\n      const v = el.dataset[key] || \"\";\n      d[key] = parseInt(v, 10);\n    });\n    return d;\n  },\n};\nconst stopPropagation = (e: Event) => e.stopPropagation();\n\ntype EventUtil = {\n  consume: (target: HTMLElement, eventName: string) => void;\n  click: (\n    target: HTMLElement,\n    callback: (e: Event) => void,\n    options?: string\n  ) => void;\n  keydown: (\n    target: HTMLElement,\n    callback: (e: Event) => void,\n    options: string\n  ) => void;\n  keyup: (\n    target: HTMLElement,\n    callback: (e: Event) => void,\n    options?: string\n  ) => void;\n  input: (\n    target: HTMLElement,\n    callback: (e: Event) => void,\n    option?: { debouce: number }\n  ) => void;\n  change: (target: HTMLElement, callback: (e: Event) => void) => void;\n};\nconst event: EventUtil = {\n  consume: (target: HTMLElement, eventName: string) => {\n    target.addEventListener(eventName, stopPropagation);\n  },\n  /*\n  focus: (target: HTMLElement, callback: (e: Event) => void, options: string) =>\n    registerEvent(target, \"focus\", callback, options),\n  mousedown: (callback, target, options) => {\n    registerEvent(target, \"mousedown\", callback, options);\n  },\n  mousemove: (callback, target, options) => {\n    registerEvent(target, \"mousemove\", callback, options);\n  },\n  mouseup: (callback, target, options) => {\n    registerEvent(target, \"mouseup\", callback, options);\n  },\n  touchstart: (callback, target, options) => {\n    registerEvent(target, \"touchstart\", callback, options);\n  },\n  touchmove: (callback, target, options) => {\n    registerEvent(target, \"touchmove\", callback, options);\n  },\n  touchend: (callback, target, options) => {\n    registerEvent(target, \"touchend\", callback, options);\n  },\n  */\n  click: (\n    target: HTMLElement,\n    callback: (e: Event) => void,\n    options?: string\n  ) => {\n    registerEvent(target, \"click\", callback, undefined);\n  },\n  keydown: (\n    target: HTMLElement,\n    callback: (e: Event) => void,\n    options: string\n  ) => {\n    options = options || \"*\";\n    const keys = options\n      .split(\" \")\n      .filter((key) => key.trim().length > 0)\n      .map((key) => parseKeyOption(key));\n    registerKeyEvent(target, \"keydown\", callback, { keys });\n  },\n  keyup: (\n    target: HTMLElement,\n    callback: (e: Event) => void,\n    options?: string\n  ) => {\n    options = options || \"*\";\n    const keys = options\n      .split(\" \")\n      .filter((key) => key.trim().length > 0)\n      .map((key) => parseKeyOption(key));\n    registerKeyEvent(target, \"keyup\", callback, {\n      keys,\n    });\n    // registerEvent(target, \"keyup\", callback, options);\n  },\n  input: (\n    target: HTMLElement,\n    callback: (e: Event) => void,\n    option?: { debouce: number }\n  ) => {\n    if (option?.debouce > 0) {\n      let timer: NodeJS.Timeout;\n      registerEvent(\n        target,\n        \"input\",\n        (e) => {\n          clearTimeout(timer);\n          timer = setTimeout(callback, option.debouce, e);\n        },\n        undefined\n      );\n    } else {\n      registerEvent(target, \"input\", callback, undefined);\n    }\n  },\n  change: (target: HTMLElement, callback: (e: Event) => void) => {\n    registerEvent(target, \"change\", callback, undefined);\n  },\n};\n\nconst converters = {\n  width: (val: number | string): string => {\n    const type = typeof val;\n    return type === \"number\" ? `${val}px` : \"\" + val;\n  },\n};\n\"top,left,height,minWidth,minHeight\".split(\",\").forEach((prop: string) => {\n  converters[prop] = converters.width;\n});\n\nconst css = (el: HTMLElement, styles: any) => {\n  Object.keys(styles).forEach((key: any) => {\n    const fn = converters[key] || ((val: string) => val);\n    const value: string = fn(styles[key]);\n    el.style[key] = value;\n  });\n};\nconst parseTemplate = <T = HTMLElement>(\n  template: string,\n  /** FIXME  param type*/ params?: any\n) => {\n  let t = template;\n  Object.keys(params || {}).forEach((key) => {\n    const text = \"@\" + key;\n    const value = params[key];\n    t = t.replaceAll(text, value);\n  });\n  const virtualElem = document.createElement(\"template\");\n  virtualElem.innerHTML = t;\n  return virtualElem.content.firstElementChild as T;\n  // return virtualDiv.firstElementChild;\n};\nconst findOne = <T = HTMLElement>(el: HTMLElement, cssSelector: string) =>\n  el.querySelector<HTMLElement>(cssSelector) as T;\nconst findAll = <T extends HTMLElement>(el: HTMLElement, selectors: string[]) =>\n  selectors.reduce((holder, cssSelector) => {\n    const elems = el.querySelectorAll<T>(cssSelector);\n    elems.forEach((elem) => {\n      holder.push(elem);\n    });\n    return holder;\n  }, [] as T[]);\nconst is = (\n  el: HTMLElement,\n  cssSelector: string,\n  searchParent: boolean = true\n) => {\n  const found = el.matches(cssSelector);\n  if (found) {\n    return found;\n  }\n  if (searchParent) {\n    const elem = closest(el, cssSelector);\n    return !!elem;\n  } else {\n    return false;\n  }\n};\nconst domRect = (el: HTMLElement) => el.getBoundingClientRect();\n\nconst types = {\n  method: (obj: any) => typeof obj === \"function\",\n};\ntype ValidUtil = {\n  path: (value: string) => Promise<string>;\n  number: (value: string) => Promise<number>;\n  string: (value: any) => boolean;\n};\nconst valid: ValidUtil = {\n  path: (value: string) =>\n    new Promise<string>((yes, no) => {\n      const v = value && value.trim();\n      if (v.length > 0) {\n        yes(v);\n      } else {\n        no(value);\n      }\n    }),\n  number: (value: string) =>\n    new Promise<number>((yes, no) => {\n      const n = Number.parseFloat(value);\n      if (Number.isNaN(n)) {\n        no(value);\n      } else {\n        yes(n);\n      }\n    }),\n  string: (value: any) => typeof value === \"string\" && value.trim().length > 0,\n};\nexport class DomUtil {\n  tag: TagUtil;\n  attr: (\n    el: HTMLElement,\n    attrName: string,\n    attrValue: string,\n    always?: boolean\n  ) => void;\n  clazz: ClassUtil;\n  closest: (elem: HTMLElement, selector: string) => HTMLElement;\n  event: EventUtil;\n  css: (el: HTMLElement, styles: any) => void;\n  parseTemplate: <T = HTMLElement>(template: string, params?: any) => T;\n  findOne: <T = HTMLElement>(el: HTMLElement, cssSelector: string) => T;\n  findAll: <T extends HTMLElement>(el: HTMLElement, selectors: string[]) => T[];\n  is: (el: HTMLElement, cssSelector: string, searchParent?: boolean) => boolean;\n  data: {\n    int: (el: HTMLElement, attrList: string[]) => any;\n  };\n  domRect: (el: HTMLElement) => DOMRect;\n  types: {\n    method: (obj: any) => boolean;\n  };\n  renderStyle(\n    el: HTMLElement,\n    style: Partial<CSSStyleDeclaration>,\n    clearStyle: boolean = true\n  ) {\n    if (clearStyle) {\n      for (let i = el.style.length - 1; i >= 0; i--) {\n        const prop = el.style[i];\n        el.style.removeProperty(prop);\n      }\n    }\n    Object.keys(style).forEach((key) => {\n      const value = style[key];\n      if (value) {\n        el.style[key] = value;\n      }\n    });\n  }\n  valid: ValidUtil;\n  constructor() {\n    this.tag = tag;\n    this.attr = attr;\n    this.clazz = clazz;\n    this.closest = closest;\n    this.event = event;\n    this.css = css;\n    this.parseTemplate = parseTemplate;\n    this.findOne = findOne;\n    this.findAll = findAll;\n    this.is = is;\n    this.data = data;\n    this.domRect = domRect;\n    this.types = types;\n    this.valid = valid;\n  }\n}\n\nlet dom: DomUtil;\n\nexport const domUtil = () => {\n  return dom;\n};\n","import { MindWired } from \"./components/mind-wired\";\nimport { Configuration } from \"./components/config\";\nimport \"./assets/mind-wired.scss\";\nimport \"./assets/extra/mind-wired-editor.scss\";\nimport { InitParam } from \"./setting\";\nimport { DomUtil } from \"./service/dom\";\n\nexport * from \"./service\";\nexport * from \"./mindwired-event\";\nexport * from \"./setting\";\nexport * from \"./components\";\n\nconst injectCanvas = (el: HTMLElement, dom: DomUtil) => {\n  const canvas = dom.tag.canvas();\n  el.append(canvas);\n  return canvas;\n};\nconst autoInstallation = (dom: DomUtil) => {\n  const el = document.querySelector(\"[mind-wired-holder]\") as HTMLElement;\n  if (el) {\n    let canvasEl = dom.findOne(el, \"canvas\") as HTMLCanvasElement;\n    if (!canvasEl) {\n      injectCanvas(el, dom);\n    }\n  }\n};\n\nconst init = (param: InitParam) => {\n  return new Promise<MindWired>((success, failure) => {\n    const dom = new DomUtil();\n    const { el } = param;\n    if (el) {\n      window.addEventListener(\"DOMContentLoaded\", () => {\n        autoInstallation(dom);\n      });\n      const configObj = Configuration.parse(param, dom);\n      configObj.dom = dom;\n      const mrd = new MindWired(configObj);\n      if (param.schema) {\n        const ctx = mrd.getSchemaContext();\n        param.schema.forEach((schema) => {\n          ctx.addSchema(schema, { skipEvent: true });\n        });\n      }\n      success(mrd);\n    } else {\n      failure({ cause: \"no_css_selector\" });\n    }\n  });\n};\n\nconst initMindWired = init;\n\nexport { init, initMindWired };\n"],"names":["EVENT","eventList","parseEvent","eventName","pathes","obj","i","EventBus","__publicField","event","callback","callbackList","eventObj","idx","cb","payload","e","beforeDrag","dragging","afterDrag","convToMouseEvent","te","touch","clearTouchTimer","ctx","mousedown","handler","mousemove","mouseup","body","touchstart","touchmove","touchend","install","DndContext","name","value","DEGREE_PER_RADIAN","_Point","x","y","other","Point","Heading","target","base","dx","dy","deg","Geometry","dst","degree","param","rad","cos","sin","p","geom","viewportDndHandler","canvasUI","offset","nodeDndHandler","nodeId","node","scale","changeParentDndHandler","iconEl","dom","rect","cx","cy","newParentNode","nodes","child","iconSetPara","iconfolding","template","installViewport","_a","el","ui","width","height","viewport","captureContext2D","pixelRatio","config","$viewport","$canvas","offsetWidth","offsetHeight","registerSchema","schema","$el","className","registerElement","nodeUI","mwd","nodeRenderer","model","$bodyEl","placeHolder","unregisterElement","propagateAll","subs","installDnd","btn","installFoldingIcon","nodeEl","foldingEl","applyDrawingOption","options","fn","key","val","CanvasUI","timer","resizer","cloned","elem","index","prop","point","relative","dim","rects","n","acc","cssSelector","nodeBodies","found","points","s","option","lenSE","cp1","cp2","xPoints","H","yPoints","W","baseOffset","parent","area","selection","ctrl","zIndex","$body","foldedClassName","pos","methodName","levelClassName","style","nodeEditor","uid","$editorEl","ok","editBox","display","subEl","schemaSpec","mapId","styleDef","styleId","styleEl","cssText","dashedprop","match","selector","schemaName","classes","clazz","AbstractEdgeRenderer","defaultOption","valignOf","pointAt","lblY","lblX","offsetY","LineEdgeRenderer","canvas","srcNode","dstNode","valign","auxPathes","srcStyle","srcLineWidth","dstStyle","dstLineWidth","lineGap","isLR","shiftX","sLabel","eLabel","s0","s1","d1","d0","p0","p1","NaturalCourveEdgeRenderer","renderUnderline","lineWidth","rnederCurve","src","distance","lineOffset","props","rendererFn","MustacheLREdgeRenderer","padding","isBottom","sp","ep","labelY","renderCurve","srcWidth","dstWidth","MustacheTBEdgeRenderer","min","max","filterIndex","edges","installDefaultEdgeRenderers","createEdges","Edge","updateVisibleState","edgeUI","edge","visible","EdgeContext","_","prevParent","deleted","rootNode","render","predicate","repaintImmediately","clearCanvas","DEFAULT_EDGE_STYLE","traceStyle","nodeRef","EdgeStyle","lvlWidth","isPrimitive","o","type","isFunction","notDefined","deepCopy","mergeLeaf","clone","NodeRect","center","_rect","minX","minY","maxX","maxY","parseSubs","nodeUi","NodeUI","spec","sharedConfig","parentNode","view","layout","selected","ref","poff","update","editing","childUI","deletedNodes","folding","DefaultNodeLayout","layoutContext","XAxisNodeLayout","context","dir","baseNode","rightSide","halfWidth","YAxisNodeLayout","topSide","nodeRect","halfHeight","XYAxisNodeLayout","NodeLayoutContext","layoutName","installDefaultLayoutManagers","NodeEditingDelegate","delegate","text","iconBadge","thumbnail","parentEl","IconBadgeEditor","$editor","$icon","path","$textarea","$close","LinkEditor","$url","url","link","PlainTextEditor","textArea","ThumbnailEditor","mode","$inputEl","num","$mode","$textArea","installDefaultEditors","NodeEditingContext","datasourceFactory","editor","customEditor","editorName","ds","htmlTemplate","closing","size","w","h","CompositeSnapResolver","resolvers","hLines","vLines","resolver","captureSnapLines","hSnaps","vSnaps","DefaultTargetResolver","startingNode","walkUpward","visited","walkDownward","DistanceBasedSnapResolver","staringNodes","abs","a","captureNearest","lines","limit","k","b","vb","lineStyling","snap","AlignmentContext","setting","rule","snapTargetResolver","snapSetting","delta","each","off","NO_OP","buildTree","dataSource","dataSet","parentSet","nodeConfigs","childSet","DataSet","userDataList","parentType","callbacks","relation","userData","parentConfig","TreeDataSource","dataType","dataList","dset","rootSet","Direction","format","cur","capturePos","posMap","Capture","DragContext","capture","updated","uuid","len","id","RenderingDelegate","renderingContext","state","PlainTextRenderer","bodyEl","$titleEl","IconBadgeRenderer","$iconBadgeEl","icon","$img","$span","ThumbnailRenderer","$thumnailEl","LinkRenderer","linkEl","renderer","anchorEl","$a","$opener","$anchor","renderings","installDefaultRenderers","NodeRenderingContext","fitToCenter","customRenderer","redererName","styles","clearSelection","nodeMap","skipStateForInsert","skipStateForDelete","appendNode","sibling","modelSpec","deleteNodes","selectionModel","nodesToDel","notifySelection","append","NodeSelectionModel","code","propagateEvent","nodesToSelect","BaseDataSource","keyOf","items","item","existing","data","DataSourceFactory","datasourceId","keyExtractor","dataSourceId","rendererName","dataSources","dummy","updateStore","store","MindWiredStore","noop","safe_not_equal","subscriber_queue","writable","start","stop","subscribers","set","new_value","run_queue","subscriber","subscribe","run","invalidate","DEFAULT_SCHEMA_PARAM","SchemaContext","_config","_map","SchemaUtil","tk","DEFAULT_EXPORT_VALUE","ExportContext","res","exportTree","v","root","repaintTree","propagate","childNode","updateLevelClass","method","mergeEdgeSpec","MindWired","detail","eventType","dragTargets","acceleration","elems","nodeData","lastChild","trigger","childNodes","c","deletedChild","layoutSpec","targetNode","edgeSpec","updatedNodes","changed","renderName","m","stringify","nodeSpec","binding","nodeUuid","DEFAULT_UI_SETTING","level","Configuration","eventBus","args","normalizeOffset","normalizeSnap","defaultSnap","color","Attr","attrExpression","closest","parseAttr","expression","createEl","tagName","attributes","tag","attr","content","span","attrs","button","imgUrl","img","resolve","reject","attrName","attrValue","always","registerEvent","registerKeyEvent","keys","ctrlKey","shiftKey","altKey","metaKey","parseKeyOption","keyFormat","metaKeys","metas","attrList","d","stopPropagation","converters","css","parseTemplate","params","virtualElem","findOne","findAll","selectors","holder","is","searchParent","domRect","types","valid","yes","no","DomUtil","clearStyle","domUtil","injectCanvas","autoInstallation","init","success","failure","configObj","mrd","initMindWired"],"mappings":"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","x_google_ignoreList":[48,49]}